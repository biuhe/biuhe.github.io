{"title":"「Go」Go 组件系列文章1-modules","slug":"技术/go/「Go」Go 组件系列文章1-modules","date":"2022-12-12T03:48:16.847Z","updated":"2022-12-13T08:26:46.445Z","comments":true,"path":"api/articles/技术/go/「Go」Go 组件系列文章1-modules.json","excerpt":null,"covers":null,"content":"<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h2>\n<p>模块是一组发布和版本化为单个单元的 Go 包。modules是源代码交换和版本控制的单元。go命令直接支持使用modules，包括记录和解析对其他模块的依赖性。modules替换旧的基于GOPATH的方法来指定在给定构建中使用哪些源文件。</p>\n<p><code>go mod</code> 是 Go 编程语言中用于管理模块依赖关系的一个命令。</p>\n<p><code>go mod</code> 允许您轻松地在 Go 项目中添加、删除和更新依赖项，以及管理依赖项的版本，以确保兼容性和可重复性。</p>\n<p>go modules 可以理解为 maven / gradle 等工具</p>\n<p><a href=\"https://github.com/golang/go/wiki/Modules\">官方文档及介绍</a></p>\n<h2 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\"></a> 使用</h2>\n<p>在使用 <code>go mod</code> 前，需要在项目目录下执行 <code>go mod init &lt;name&gt;</code> 命令来初始化模块。</p>\n<p>例如，我们以项目 star-im 为例进行初始化，在项目根目录（star-im/）中执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go mod init star-im</span><br></pre></td></tr></table></figure>\n<p>会在根目录生成一个 go.mod 的文件来进行包依赖的管理，其中会包含我们所需要的依赖及版本内容，此外某些依赖后面会有 indirect<br>\n字样，表示该依赖为传递依赖，也就是非直接依赖。</p>\n<p>其他命令如：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go mod &lt;command&gt;</span><br><span class=\"line\">download    download modules to local cache \t-- 将模块下载到本地缓存</span><br><span class=\"line\">edit        edit go.mod from tools or scripts -- 从工具或脚本编辑 go.mod 以编辑依赖关系</span><br><span class=\"line\">graph       print module requirement graph \t\t-- 查看依赖关系图</span><br><span class=\"line\">init        initialize new module in current directory \t-- 初始化当前目录中的新模块</span><br><span class=\"line\">tidy        add missing and remove unused modules \t\t\t-- 添加缺少的模块并删除未使用的模块</span><br><span class=\"line\">vendor      make vendored copy of dependencies \t\t\t\t\t-- 制作依赖项的供应商副本</span><br><span class=\"line\">verify      verify dependencies have expected content \t-- 验证依赖项是否具有预期内容</span><br><span class=\"line\">why         explain why packages or modules are needed \t-- 解释为什么需要包或模块</span><br></pre></td></tr></table></figure>\n<p>比较常用的是 <code>init</code>, <code>tidy</code>, <code>edit</code> ，当我们引入依赖包的之后，可以使用 <code>go mod tidy </code><br>\n来命令来整理依赖模块。其他更多内容可参考：<a href=\"https://zhuanlan.zhihu.com/p/482014524\">go mod使用 | 全网最详细 </a> 或者参考官方文档</p>\n<p>可以使用命令 <code>go list -m -u all </code>来检查可以升级的package</p>\n<p>依赖包仓库地址：<a href=\"https://pkg.go.dev/%EF%BC%88%E7%9B%B8%E5%BD%93%E4%BA%8Emaven%E7%9A%84\">https://pkg.go.dev/（相当于maven的</a> <a href=\"https://mvnrepository.com/%EF%BC%89%EF%BC%8C%E6%90%9C%E7%B4%A2%E9%9C%80%E8%A6%81%E7%9A%84%E4%BE%9D%E8%B5%96%E5%8C%85%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E6%AD%A4%E9%93%BE%E6%8E%A5%EF%BC%8C%E9%87%8C%E9%9D%A2%E4%B9%9F%E5%8C%85%E5%90%AB%E4%BA%86%E4%BE%9D%E8%B5%96%E5%8C%85%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BA%8B%E9%A1%B9%E7%AD%89%E3%80%82\">https://mvnrepository.com/），搜索需要的依赖包可以访问此链接，里面也包含了依赖包的使用事项等。</a></p>\n<p>目前 go web 似乎没有比较成型的 web 开发标准，因此我沿用了 Java 的习惯</p>\n<p>在根目录中新增 src 目录，以及 main、resource、test 三个下级目录，用于存放主要程序文件、资源设置文件、测试文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">star-im</span><br><span class=\"line\">  └── src</span><br><span class=\"line\">      ├── main</span><br><span class=\"line\">      ├── resource</span><br><span class=\"line\">      └── test</span><br></pre></td></tr></table></figure>\n","more":"<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h2>\n<p>模块是一组发布和版本化为单个单元的 Go 包。modules是源代码交换和版本控制的单元。go命令直接支持使用modules，包括记录和解析对其他模块的依赖性。modules替换旧的基于GOPATH的方法来指定在给定构建中使用哪些源文件。</p>\n<p><code>go mod</code> 是 Go 编程语言中用于管理模块依赖关系的一个命令。</p>\n<p><code>go mod</code> 允许您轻松地在 Go 项目中添加、删除和更新依赖项，以及管理依赖项的版本，以确保兼容性和可重复性。</p>\n<p>go modules 可以理解为 maven / gradle 等工具</p>\n<p><a href=\"https://github.com/golang/go/wiki/Modules\">官方文档及介绍</a></p>\n<h2 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\"></a> 使用</h2>\n<p>在使用 <code>go mod</code> 前，需要在项目目录下执行 <code>go mod init &lt;name&gt;</code> 命令来初始化模块。</p>\n<p>例如，我们以项目 star-im 为例进行初始化，在项目根目录（star-im/）中执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go mod init star-im</span><br></pre></td></tr></table></figure>\n<p>会在根目录生成一个 go.mod 的文件来进行包依赖的管理，其中会包含我们所需要的依赖及版本内容，此外某些依赖后面会有 indirect<br>\n字样，表示该依赖为传递依赖，也就是非直接依赖。</p>\n<p>其他命令如：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go mod &lt;command&gt;</span><br><span class=\"line\">download    download modules to local cache \t-- 将模块下载到本地缓存</span><br><span class=\"line\">edit        edit go.mod from tools or scripts -- 从工具或脚本编辑 go.mod 以编辑依赖关系</span><br><span class=\"line\">graph       print module requirement graph \t\t-- 查看依赖关系图</span><br><span class=\"line\">init        initialize new module in current directory \t-- 初始化当前目录中的新模块</span><br><span class=\"line\">tidy        add missing and remove unused modules \t\t\t-- 添加缺少的模块并删除未使用的模块</span><br><span class=\"line\">vendor      make vendored copy of dependencies \t\t\t\t\t-- 制作依赖项的供应商副本</span><br><span class=\"line\">verify      verify dependencies have expected content \t-- 验证依赖项是否具有预期内容</span><br><span class=\"line\">why         explain why packages or modules are needed \t-- 解释为什么需要包或模块</span><br></pre></td></tr></table></figure>\n<p>比较常用的是 <code>init</code>, <code>tidy</code>, <code>edit</code> ，当我们引入依赖包的之后，可以使用 <code>go mod tidy </code><br>\n来命令来整理依赖模块。其他更多内容可参考：<a href=\"https://zhuanlan.zhihu.com/p/482014524\">go mod使用 | 全网最详细 </a> 或者参考官方文档</p>\n<p>可以使用命令 <code>go list -m -u all </code>来检查可以升级的package</p>\n<p>依赖包仓库地址：<a href=\"https://pkg.go.dev/%EF%BC%88%E7%9B%B8%E5%BD%93%E4%BA%8Emaven%E7%9A%84\">https://pkg.go.dev/（相当于maven的</a> <a href=\"https://mvnrepository.com/%EF%BC%89%EF%BC%8C%E6%90%9C%E7%B4%A2%E9%9C%80%E8%A6%81%E7%9A%84%E4%BE%9D%E8%B5%96%E5%8C%85%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E6%AD%A4%E9%93%BE%E6%8E%A5%EF%BC%8C%E9%87%8C%E9%9D%A2%E4%B9%9F%E5%8C%85%E5%90%AB%E4%BA%86%E4%BE%9D%E8%B5%96%E5%8C%85%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BA%8B%E9%A1%B9%E7%AD%89%E3%80%82\">https://mvnrepository.com/），搜索需要的依赖包可以访问此链接，里面也包含了依赖包的使用事项等。</a></p>\n<p>目前 go web 似乎没有比较成型的 web 开发标准，因此我沿用了 Java 的习惯</p>\n<p>在根目录中新增 src 目录，以及 main、resource、test 三个下级目录，用于存放主要程序文件、资源设置文件、测试文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">star-im</span><br><span class=\"line\">  └── src</span><br><span class=\"line\">      ├── main</span><br><span class=\"line\">      ├── resource</span><br><span class=\"line\">      └── test</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"技术","path":"api/categories/技术.json"},{"name":"Golang","path":"api/categories/Golang.json"}],"tags":[{"name":"技术","path":"api/tags/技术.json"},{"name":"Golang","path":"api/tags/Golang.json"},{"name":"go mod","path":"api/tags/go mod.json"}]}