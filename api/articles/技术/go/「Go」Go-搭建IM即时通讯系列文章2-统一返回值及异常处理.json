{"title":"「Go」Go-搭建IM即时通讯系列文章2-统一返回值及异常处理","slug":"技术/go/「Go」Go-搭建IM即时通讯系列文章2-统一返回值及异常处理","date":"2022-12-13T08:33:58.642Z","updated":"2022-12-14T07:56:46.241Z","comments":true,"path":"api/articles/技术/go/「Go」Go-搭建IM即时通讯系列文章2-统一返回值及异常处理.json","excerpt":null,"covers":null,"content":"<p>在软件开发过程中，通过定义统一返回值还可以提高框架的可用性和可维护性，让开发人员更容易理解和使用框架中的各种功能。同时统一异常处理能够帮助我们更好地控制程序的流程，能够让我们更好地捕获异常并作出相应的处理。这样做可以帮助我们减少代码重复，提高代码的可读性和可维护性。</p>\n<h2 id=\"统一返回值\"><a class=\"markdownIt-Anchor\" href=\"#统一返回值\"></a> 统一返回值</h2>\n<p>我们规范约定返回值参数有利于我们对数据进行管理以及提升前后端开发的效率。</p>\n<p>在  <code>项目根目录/src/main/</code> 目录下新建一个<code>common/app</code> 层级目录，并在 <code>app </code>目录下分别建立 <code>code.go</code>、<code>msg.go</code>、 <code>response.go</code> 用于存放 返回值、返回消息、统一返回值的实体对象。</p>\n<p><code>code.go</code> 主要定义返回值常量，代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">  <span class=\"comment\">// 成功使用 200</span></span><br><span class=\"line\">\tSUCCESS = http.StatusOK</span><br><span class=\"line\">  <span class=\"comment\">// 异常使用 -1</span></span><br><span class=\"line\">\tERROR   = <span class=\"number\">-1</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><code>msg.go</code> 主要定义返回值常量对应的消息内容，代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MessageMap 返回值常量对应的消息内容，消息集合：&#123;消息码，消息内容&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MessageMap = <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">\tSUCCESS: <span class=\"string\">&quot;成功&quot;</span>,</span><br><span class=\"line\">\tERROR:   <span class=\"string\">&quot;失败&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GetMsg 根据代码获取返回信息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetMsg</span><span class=\"params\">(code <span class=\"type\">int</span>)</span></span> <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\tmsg, ok := MessageMap[code]</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ok &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> msg</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> MessageMap[ERROR]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>response.go</code> 主要定义返回值的对象，代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Response 响应对象</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Response <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 响应编码</span></span><br><span class=\"line\">\tCode <span class=\"type\">int</span> <span class=\"string\">`json:&quot;code&quot;`</span></span><br><span class=\"line\">\t<span class=\"comment\">// 返回消息</span></span><br><span class=\"line\">\tMsg <span class=\"type\">string</span> <span class=\"string\">`json:&quot;msg&quot;`</span></span><br><span class=\"line\">\t<span class=\"comment\">// 返回数据</span></span><br><span class=\"line\">\tData <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:&quot;data&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Res 设置 gin.JSON 的内容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Res</span><span class=\"params\">(c *gin.Context, httpCode, errCode <span class=\"type\">int</span>, data <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\tc.JSON(httpCode, Response&#123;</span><br><span class=\"line\">\t\tCode: errCode,</span><br><span class=\"line\">\t\tMsg:  GetMsg(errCode),</span><br><span class=\"line\">\t\tData: data,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Success 返回成功结果</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Success</span><span class=\"params\">(c *gin.Context, data <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\tRes(c, http.StatusOK, SUCCESS, data)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Error 返回错误结果，异常结果放在统一异常处理 handler中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Error</span><span class=\"params\">(c *gin.Context, data <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\tRes(c, http.StatusOK, ERROR, data)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这时我们可以修改 <code>src/main/routers/api/health.go</code> 中返回的结果如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> api</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;star-im/src/main/common/app&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Ping 接口连通性测试</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Ping</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 直接返回成功结果</span></span><br><span class=\"line\">\tapp.Success(c, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这时候我们通过浏览器访问 <a href=\"http://localhost:8081/ping%EF%BC%8C%E5%BE%97%E5%88%B0%E5%A6%82%E4%B8%8B%E8%BF%94%E5%9B%9E%EF%BC%9A\">http://localhost:8081/ping，得到如下返回：</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;code&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">200</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;msg&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;成功&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;data&quot;</span><span class=\"punctuation\">:</span><span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>这时候我们就可以根据不同的返回值进行不同的业务处理了</p>\n<h2 id=\"统一异常处理\"><a class=\"markdownIt-Anchor\" href=\"#统一异常处理\"></a> 统一异常处理</h2>\n<p>我们需要统一处理系统的异常信息并让异常结果也显示为统一的返回结果对象，那么需要进行统一异常处理。</p>\n<p>在  <code>项目根目录/src/main/</code> 目录下新建一个 <code>handler</code> 目录，并在目录下新建一个 <code>exception.go</code> 文件，用于处理异常信息</p>\n<p><code>exception.go</code> 代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> handler</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;runtime/debug&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;star-im/src/main/common/app&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Recover 注意 Recover 要尽量放在router.User的第一个被加载</span></span><br><span class=\"line\"><span class=\"comment\">// 如不是的话，在recover前的中间件或路由，将不能被拦截到</span></span><br><span class=\"line\"><span class=\"comment\">// 程序的原理是：</span></span><br><span class=\"line\"><span class=\"comment\">// 1.请求进来，执行recover</span></span><br><span class=\"line\"><span class=\"comment\">// 2.程序异常，抛出panic</span></span><br><span class=\"line\"><span class=\"comment\">// 3.panic被 recover捕获，返回异常信息，并Abort,终止这次请求</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Recover</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tr := <span class=\"built_in\">recover</span>()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> r != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//打印错误堆栈信息</span></span><br><span class=\"line\">\t\t\tlog.Printf(<span class=\"string\">&quot;panic: %v\\n&quot;</span>, r)</span><br><span class=\"line\">\t\t\tdebug.PrintStack()</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//封装通用json返回</span></span><br><span class=\"line\">\t\t\tc.JSON(http.StatusOK, app.Response&#123;</span><br><span class=\"line\">\t\t\t\tCode: app.ERROR,</span><br><span class=\"line\">\t\t\t\tMsg:  ErrorToString(r),</span><br><span class=\"line\">\t\t\t\tData: <span class=\"literal\">nil</span>,</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//终止后续接口调用，不加的话recover到异常后，还会继续执行接口里后续代码</span></span><br><span class=\"line\">\t\t\tc.Abort()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//加载完 defer recover，继续后续接口调用</span></span><br><span class=\"line\">\tc.Next()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ErrorToString recover错误，转string</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ErrorToString</span><span class=\"params\">(r <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> v := r.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"type\">error</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> v.Error()</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> r.(<span class=\"type\">string</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>该类主要捕获panic异常，并返回 json 信息给客户端</p>\n<p>在 <code>src/main/routers/router.go</code> 文件中添加如下代码即可。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 统一异常处理</span></span><br><span class=\"line\">r.Use(handler.Recover)</span><br></pre></td></tr></table></figure>\n<p>此时我们可以修改<code>router</code>中 <code>/ping</code> 的方法来测试结果</p>\n<p>将 <code>src/main/routers/router.go</code> 中如下代码</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.GET(<span class=\"string\">&quot;/ping&quot;</span>, api.Ping)</span><br></pre></td></tr></table></figure>\n<p>修改为：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.GET(<span class=\"string\">&quot;/ping&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 无意抛出 panic</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> slice = []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">\t\tslice[<span class=\"number\">6</span>] = <span class=\"number\">6</span></span><br><span class=\"line\">\t&#125;)</span><br></pre></td></tr></table></figure>\n<p>然后重启项目，通过浏览器访问 <a href=\"http://localhost:8081/ping%EF%BC%8C%E5%BE%97%E5%88%B0%E5%A6%82%E4%B8%8B%E8%BF%94%E5%9B%9E%EF%BC%9A\">http://localhost:8081/ping，得到如下返回：</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;code&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">-1</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;msg&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;runtime error: index out of range [6] with length 5&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;data&quot;</span><span class=\"punctuation\">:</span><span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>现在我们得到的就是统一的异常返回值，这里的 msg 可以根据需要再进行修改。</p>\n<p>在业务中我们可以通过判断业务逻辑，再进行抛出异常，如将刚才函数中的内容修改为如下代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.GET(<span class=\"string\">&quot;/ping&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 抛出 panic, true这里可以改为自己的业务处理逻辑</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> <span class=\"literal\">true</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">panic</span>(<span class=\"string\">&quot;抛出了指定的异常信息&quot;</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>通过浏览器访问 <a href=\"http://localhost:8081/ping%EF%BC%8C%E5%BE%97%E5%88%B0%E5%A6%82%E4%B8%8B%E8%BF%94%E5%9B%9E%EF%BC%9A\">http://localhost:8081/ping，得到如下返回：</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;code&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">-1</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;msg&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;抛出了指定的异常信息&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;data&quot;</span><span class=\"punctuation\">:</span><span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到成功捕获了 panic 抛出的异常信息，这可以很方便我们做业务逻辑的时候处理异常。（测试成功后记得把ping的函数恢复回之前的）</p>\n<p>gin router 中也提供了针对 NoRoute 和 NoMethod 的处理，在 <code>router.go</code> 中添加</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理404</span></span><br><span class=\"line\">r.NoRoute(handler.HandleNotFound)</span><br><span class=\"line\">r.NoMethod(handler.HandleNotFound)</span><br></pre></td></tr></table></figure>\n<p>在 <code>src/main/handler/exception.go</code> 中添加处理方法，直接返回处理结果即可</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">HandleNotFound</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 我这里使用的是统一返回值</span></span><br><span class=\"line\">\tapp.ErrorWithCode(c, app.NOT_FOUND, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">  <span class=\"comment\">// // 你们也可以直接使用普通的返回结果，如下</span></span><br><span class=\"line\">  <span class=\"comment\">// c.JSON(http.StatusOK, gin.H&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\t\t&quot;msg&quot;: &quot;找不到资源&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//    &quot;code&quot;: 404,</span></span><br><span class=\"line\">  <span class=\"comment\">//    &quot;data&quot;: &quot;&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"swag-接口文档\"><a class=\"markdownIt-Anchor\" href=\"#swag-接口文档\"></a> swag 接口文档</h2>\n<p>Swagger是一种API框架，它可以为REST APIs定义、生成、测试和文档化。它使用一种名为Swagger元数据的特殊格式来描述API，并使用Swagger UI来展示API的定义。这使得开发人员可以在不离开API文档的情况下测试API，并且可以轻松地为API创建文档。</p>\n<p>我们引入 Swagger 来生成接口文档，方便统一管理接口及调试。</p>\n<p>相关链接：</p>\n<p><a href=\"https://github.com/swaggo/swag/blob/master/README_zh-CN.md\">GitHub</a></p>\n<h3 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go install github.com/swaggo/swag/cmd/swag@latest</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\"></a> 使用</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swag init -o &quot;src/main/docs&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-o 为 output，指定输出目录，默认为“./docs”</li>\n</ul>\n<p>其他更多文章参考 <a href=\"https://github.com/swaggo/swag/blob/v1.8.8/README_zh-CN.md\">GitHub中文文档</a></p>\n<p>在主程序入口 <code>main.go</code> 中可以添加如下注释：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// @title           Star-IM</span></span><br><span class=\"line\"><span class=\"comment\">// @version         1.0</span></span><br><span class=\"line\"><span class=\"comment\">// @description     即时通讯接口文档</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 <code>src/main/routers/api/health.go</code> 文件中添加如下注释</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Ping</span></span><br><span class=\"line\"><span class=\"comment\">// @Summary      健康检查</span></span><br><span class=\"line\"><span class=\"comment\">// @Description  接口连通性测试</span></span><br><span class=\"line\"><span class=\"comment\">// @Tags         测试</span></span><br><span class=\"line\"><span class=\"comment\">// @Success      200  &#123;object&#125;  app.Response</span></span><br><span class=\"line\"><span class=\"comment\">// @Router       /ping [get]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Ping</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">  ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 <code>src/main/routers/router.go</code> 加入swagger接口文档的访问，并引入指定了目录的swagger文件</p>\n<p>代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> routers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\tswaggerFiles <span class=\"string\">&quot;github.com/swaggo/files&quot;</span></span><br><span class=\"line\">\tginSwagger <span class=\"string\">&quot;github.com/swaggo/gin-swagger&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;io&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;star-im/src/main/docs&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;star-im/src/main/handler&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;star-im/src/main/routers/api&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Setup 初始化路由</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Setup</span><span class=\"params\">()</span></span> *gin.Engine &#123;</span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\">\t<span class=\"comment\">// 记录到文件</span></span><br><span class=\"line\">\tf, _ := os.Create(<span class=\"string\">&quot;gin.log&quot;</span>)</span><br><span class=\"line\">\tgin.DefaultWriter = io.MultiWriter(f)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 使用中间件</span></span><br><span class=\"line\">\t<span class=\"comment\">// 统一异常处理</span></span><br><span class=\"line\">\tr.Use(handler.Recover)</span><br><span class=\"line\">\t<span class=\"comment\">// 统一日志</span></span><br><span class=\"line\">\tr.Use(gin.Logger())</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 不需要鉴权</span></span><br><span class=\"line\">\tr.GET(<span class=\"string\">&quot;/ping&quot;</span>, api.Ping)</span><br><span class=\"line\"></span><br><span class=\"line\">\tr.GET(<span class=\"string\">&quot;/swagger/*any&quot;</span>, ginSwagger.WrapHandler(swaggerFiles.Handler))</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> r</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主要变更内容为</p>\n<ul>\n<li><code>import  _ &quot;star-im/src/main/docs&quot;</code></li>\n<li><code>import swaggerFiles &quot;github.com/swaggo/files&quot;</code></li>\n<li><code>import ginSwagger &quot;github.com/swaggo/gin-swagger&quot;</code></li>\n<li><code>r.GET(&quot;/swagger/*any&quot;, ginSwagger.WrapHandler(swaggerFiles.Handler))</code></li>\n</ul>\n<h4 id=\"测试\"><a class=\"markdownIt-Anchor\" href=\"#测试\"></a> 测试</h4>\n<p>通过浏览器访问 <a href=\"http://localhost:8081/swagger/index.html#/\">http://localhost:8081/swagger/index.html#/</a> 可以进入到swagger 接口文档的管理界面</p>\n<p>至此，当前目录结构为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── LICENSE</span><br><span class=\"line\">├── README.md</span><br><span class=\"line\">├── doc</span><br><span class=\"line\">│   └── build</span><br><span class=\"line\">│       └── 1-framwork.md</span><br><span class=\"line\">├── gin.log</span><br><span class=\"line\">├── go.mod</span><br><span class=\"line\">├── go.sum</span><br><span class=\"line\">├── main.go</span><br><span class=\"line\">└── src</span><br><span class=\"line\">    ├── main</span><br><span class=\"line\">    │   ├── common</span><br><span class=\"line\">    │   │   └── app</span><br><span class=\"line\">    │   │       ├── code.go</span><br><span class=\"line\">    │   │       ├── msg.go</span><br><span class=\"line\">    │   │       └── response.go</span><br><span class=\"line\">    │   ├── config</span><br><span class=\"line\">    │   │   ├── database</span><br><span class=\"line\">    │   │   │   └── database.go</span><br><span class=\"line\">    │   │   ├── init.go</span><br><span class=\"line\">    │   │   └── settings</span><br><span class=\"line\">    │   │       └── settings.go</span><br><span class=\"line\">    │   ├── docs</span><br><span class=\"line\">    │   │   ├── docs.go</span><br><span class=\"line\">    │   │   ├── swagger.json</span><br><span class=\"line\">    │   │   └── swagger.yaml</span><br><span class=\"line\">    │   ├── handler</span><br><span class=\"line\">    │   │   └── exception.go</span><br><span class=\"line\">    │   ├── models</span><br><span class=\"line\">    │   │   └── model.go</span><br><span class=\"line\">    │   ├── routers</span><br><span class=\"line\">    │   │   ├── api</span><br><span class=\"line\">    │   │   │   ├── health.go</span><br><span class=\"line\">    │   │   │   └── v1</span><br><span class=\"line\">    │   │   └── router.go</span><br><span class=\"line\">    │   └── util</span><br><span class=\"line\">    ├── resource</span><br><span class=\"line\">    │   └── app.yml</span><br><span class=\"line\">    └── test</span><br><span class=\"line\">        └── pkg</span><br><span class=\"line\">            ├── test_gin.go</span><br><span class=\"line\">            ├── test_gorm.go</span><br><span class=\"line\">            ├── test_jwt.go</span><br><span class=\"line\">            ├── test_redis.go</span><br><span class=\"line\">            └── test_viper.go</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","more":"<p>在软件开发过程中，通过定义统一返回值还可以提高框架的可用性和可维护性，让开发人员更容易理解和使用框架中的各种功能。同时统一异常处理能够帮助我们更好地控制程序的流程，能够让我们更好地捕获异常并作出相应的处理。这样做可以帮助我们减少代码重复，提高代码的可读性和可维护性。</p>\n<h2 id=\"统一返回值\"><a class=\"markdownIt-Anchor\" href=\"#统一返回值\"></a> 统一返回值</h2>\n<p>我们规范约定返回值参数有利于我们对数据进行管理以及提升前后端开发的效率。</p>\n<p>在  <code>项目根目录/src/main/</code> 目录下新建一个<code>common/app</code> 层级目录，并在 <code>app </code>目录下分别建立 <code>code.go</code>、<code>msg.go</code>、 <code>response.go</code> 用于存放 返回值、返回消息、统一返回值的实体对象。</p>\n<p><code>code.go</code> 主要定义返回值常量，代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">  <span class=\"comment\">// 成功使用 200</span></span><br><span class=\"line\">\tSUCCESS = http.StatusOK</span><br><span class=\"line\">  <span class=\"comment\">// 异常使用 -1</span></span><br><span class=\"line\">\tERROR   = <span class=\"number\">-1</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><code>msg.go</code> 主要定义返回值常量对应的消息内容，代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MessageMap 返回值常量对应的消息内容，消息集合：&#123;消息码，消息内容&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MessageMap = <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">\tSUCCESS: <span class=\"string\">&quot;成功&quot;</span>,</span><br><span class=\"line\">\tERROR:   <span class=\"string\">&quot;失败&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GetMsg 根据代码获取返回信息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetMsg</span><span class=\"params\">(code <span class=\"type\">int</span>)</span></span> <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\tmsg, ok := MessageMap[code]</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ok &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> msg</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> MessageMap[ERROR]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>response.go</code> 主要定义返回值的对象，代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Response 响应对象</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Response <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 响应编码</span></span><br><span class=\"line\">\tCode <span class=\"type\">int</span> <span class=\"string\">`json:&quot;code&quot;`</span></span><br><span class=\"line\">\t<span class=\"comment\">// 返回消息</span></span><br><span class=\"line\">\tMsg <span class=\"type\">string</span> <span class=\"string\">`json:&quot;msg&quot;`</span></span><br><span class=\"line\">\t<span class=\"comment\">// 返回数据</span></span><br><span class=\"line\">\tData <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:&quot;data&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Res 设置 gin.JSON 的内容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Res</span><span class=\"params\">(c *gin.Context, httpCode, errCode <span class=\"type\">int</span>, data <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\tc.JSON(httpCode, Response&#123;</span><br><span class=\"line\">\t\tCode: errCode,</span><br><span class=\"line\">\t\tMsg:  GetMsg(errCode),</span><br><span class=\"line\">\t\tData: data,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Success 返回成功结果</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Success</span><span class=\"params\">(c *gin.Context, data <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\tRes(c, http.StatusOK, SUCCESS, data)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Error 返回错误结果，异常结果放在统一异常处理 handler中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Error</span><span class=\"params\">(c *gin.Context, data <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\tRes(c, http.StatusOK, ERROR, data)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这时我们可以修改 <code>src/main/routers/api/health.go</code> 中返回的结果如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> api</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;star-im/src/main/common/app&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Ping 接口连通性测试</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Ping</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 直接返回成功结果</span></span><br><span class=\"line\">\tapp.Success(c, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这时候我们通过浏览器访问 <a href=\"http://localhost:8081/ping%EF%BC%8C%E5%BE%97%E5%88%B0%E5%A6%82%E4%B8%8B%E8%BF%94%E5%9B%9E%EF%BC%9A\">http://localhost:8081/ping，得到如下返回：</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;code&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">200</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;msg&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;成功&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;data&quot;</span><span class=\"punctuation\">:</span><span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>这时候我们就可以根据不同的返回值进行不同的业务处理了</p>\n<h2 id=\"统一异常处理\"><a class=\"markdownIt-Anchor\" href=\"#统一异常处理\"></a> 统一异常处理</h2>\n<p>我们需要统一处理系统的异常信息并让异常结果也显示为统一的返回结果对象，那么需要进行统一异常处理。</p>\n<p>在  <code>项目根目录/src/main/</code> 目录下新建一个 <code>handler</code> 目录，并在目录下新建一个 <code>exception.go</code> 文件，用于处理异常信息</p>\n<p><code>exception.go</code> 代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> handler</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;runtime/debug&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;star-im/src/main/common/app&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Recover 注意 Recover 要尽量放在router.User的第一个被加载</span></span><br><span class=\"line\"><span class=\"comment\">// 如不是的话，在recover前的中间件或路由，将不能被拦截到</span></span><br><span class=\"line\"><span class=\"comment\">// 程序的原理是：</span></span><br><span class=\"line\"><span class=\"comment\">// 1.请求进来，执行recover</span></span><br><span class=\"line\"><span class=\"comment\">// 2.程序异常，抛出panic</span></span><br><span class=\"line\"><span class=\"comment\">// 3.panic被 recover捕获，返回异常信息，并Abort,终止这次请求</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Recover</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tr := <span class=\"built_in\">recover</span>()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> r != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//打印错误堆栈信息</span></span><br><span class=\"line\">\t\t\tlog.Printf(<span class=\"string\">&quot;panic: %v\\n&quot;</span>, r)</span><br><span class=\"line\">\t\t\tdebug.PrintStack()</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//封装通用json返回</span></span><br><span class=\"line\">\t\t\tc.JSON(http.StatusOK, app.Response&#123;</span><br><span class=\"line\">\t\t\t\tCode: app.ERROR,</span><br><span class=\"line\">\t\t\t\tMsg:  ErrorToString(r),</span><br><span class=\"line\">\t\t\t\tData: <span class=\"literal\">nil</span>,</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//终止后续接口调用，不加的话recover到异常后，还会继续执行接口里后续代码</span></span><br><span class=\"line\">\t\t\tc.Abort()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//加载完 defer recover，继续后续接口调用</span></span><br><span class=\"line\">\tc.Next()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ErrorToString recover错误，转string</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ErrorToString</span><span class=\"params\">(r <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> v := r.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"type\">error</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> v.Error()</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> r.(<span class=\"type\">string</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>该类主要捕获panic异常，并返回 json 信息给客户端</p>\n<p>在 <code>src/main/routers/router.go</code> 文件中添加如下代码即可。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 统一异常处理</span></span><br><span class=\"line\">r.Use(handler.Recover)</span><br></pre></td></tr></table></figure>\n<p>此时我们可以修改<code>router</code>中 <code>/ping</code> 的方法来测试结果</p>\n<p>将 <code>src/main/routers/router.go</code> 中如下代码</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.GET(<span class=\"string\">&quot;/ping&quot;</span>, api.Ping)</span><br></pre></td></tr></table></figure>\n<p>修改为：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.GET(<span class=\"string\">&quot;/ping&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 无意抛出 panic</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> slice = []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">\t\tslice[<span class=\"number\">6</span>] = <span class=\"number\">6</span></span><br><span class=\"line\">\t&#125;)</span><br></pre></td></tr></table></figure>\n<p>然后重启项目，通过浏览器访问 <a href=\"http://localhost:8081/ping%EF%BC%8C%E5%BE%97%E5%88%B0%E5%A6%82%E4%B8%8B%E8%BF%94%E5%9B%9E%EF%BC%9A\">http://localhost:8081/ping，得到如下返回：</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;code&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">-1</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;msg&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;runtime error: index out of range [6] with length 5&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;data&quot;</span><span class=\"punctuation\">:</span><span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>现在我们得到的就是统一的异常返回值，这里的 msg 可以根据需要再进行修改。</p>\n<p>在业务中我们可以通过判断业务逻辑，再进行抛出异常，如将刚才函数中的内容修改为如下代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.GET(<span class=\"string\">&quot;/ping&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 抛出 panic, true这里可以改为自己的业务处理逻辑</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> <span class=\"literal\">true</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">panic</span>(<span class=\"string\">&quot;抛出了指定的异常信息&quot;</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>通过浏览器访问 <a href=\"http://localhost:8081/ping%EF%BC%8C%E5%BE%97%E5%88%B0%E5%A6%82%E4%B8%8B%E8%BF%94%E5%9B%9E%EF%BC%9A\">http://localhost:8081/ping，得到如下返回：</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;code&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">-1</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;msg&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;抛出了指定的异常信息&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;data&quot;</span><span class=\"punctuation\">:</span><span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到成功捕获了 panic 抛出的异常信息，这可以很方便我们做业务逻辑的时候处理异常。（测试成功后记得把ping的函数恢复回之前的）</p>\n<p>gin router 中也提供了针对 NoRoute 和 NoMethod 的处理，在 <code>router.go</code> 中添加</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理404</span></span><br><span class=\"line\">r.NoRoute(handler.HandleNotFound)</span><br><span class=\"line\">r.NoMethod(handler.HandleNotFound)</span><br></pre></td></tr></table></figure>\n<p>在 <code>src/main/handler/exception.go</code> 中添加处理方法，直接返回处理结果即可</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">HandleNotFound</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 我这里使用的是统一返回值</span></span><br><span class=\"line\">\tapp.ErrorWithCode(c, app.NOT_FOUND, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">  <span class=\"comment\">// // 你们也可以直接使用普通的返回结果，如下</span></span><br><span class=\"line\">  <span class=\"comment\">// c.JSON(http.StatusOK, gin.H&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\t\t&quot;msg&quot;: &quot;找不到资源&quot;,</span></span><br><span class=\"line\">  <span class=\"comment\">//    &quot;code&quot;: 404,</span></span><br><span class=\"line\">  <span class=\"comment\">//    &quot;data&quot;: &quot;&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"swag-接口文档\"><a class=\"markdownIt-Anchor\" href=\"#swag-接口文档\"></a> swag 接口文档</h2>\n<p>Swagger是一种API框架，它可以为REST APIs定义、生成、测试和文档化。它使用一种名为Swagger元数据的特殊格式来描述API，并使用Swagger UI来展示API的定义。这使得开发人员可以在不离开API文档的情况下测试API，并且可以轻松地为API创建文档。</p>\n<p>我们引入 Swagger 来生成接口文档，方便统一管理接口及调试。</p>\n<p>相关链接：</p>\n<p><a href=\"https://github.com/swaggo/swag/blob/master/README_zh-CN.md\">GitHub</a></p>\n<h3 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go install github.com/swaggo/swag/cmd/swag@latest</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\"></a> 使用</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swag init -o &quot;src/main/docs&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-o 为 output，指定输出目录，默认为“./docs”</li>\n</ul>\n<p>其他更多文章参考 <a href=\"https://github.com/swaggo/swag/blob/v1.8.8/README_zh-CN.md\">GitHub中文文档</a></p>\n<p>在主程序入口 <code>main.go</code> 中可以添加如下注释：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// @title           Star-IM</span></span><br><span class=\"line\"><span class=\"comment\">// @version         1.0</span></span><br><span class=\"line\"><span class=\"comment\">// @description     即时通讯接口文档</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 <code>src/main/routers/api/health.go</code> 文件中添加如下注释</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Ping</span></span><br><span class=\"line\"><span class=\"comment\">// @Summary      健康检查</span></span><br><span class=\"line\"><span class=\"comment\">// @Description  接口连通性测试</span></span><br><span class=\"line\"><span class=\"comment\">// @Tags         测试</span></span><br><span class=\"line\"><span class=\"comment\">// @Success      200  &#123;object&#125;  app.Response</span></span><br><span class=\"line\"><span class=\"comment\">// @Router       /ping [get]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Ping</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">  ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 <code>src/main/routers/router.go</code> 加入swagger接口文档的访问，并引入指定了目录的swagger文件</p>\n<p>代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> routers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\tswaggerFiles <span class=\"string\">&quot;github.com/swaggo/files&quot;</span></span><br><span class=\"line\">\tginSwagger <span class=\"string\">&quot;github.com/swaggo/gin-swagger&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;io&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;star-im/src/main/docs&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;star-im/src/main/handler&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;star-im/src/main/routers/api&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Setup 初始化路由</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Setup</span><span class=\"params\">()</span></span> *gin.Engine &#123;</span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\">\t<span class=\"comment\">// 记录到文件</span></span><br><span class=\"line\">\tf, _ := os.Create(<span class=\"string\">&quot;gin.log&quot;</span>)</span><br><span class=\"line\">\tgin.DefaultWriter = io.MultiWriter(f)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 使用中间件</span></span><br><span class=\"line\">\t<span class=\"comment\">// 统一异常处理</span></span><br><span class=\"line\">\tr.Use(handler.Recover)</span><br><span class=\"line\">\t<span class=\"comment\">// 统一日志</span></span><br><span class=\"line\">\tr.Use(gin.Logger())</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 不需要鉴权</span></span><br><span class=\"line\">\tr.GET(<span class=\"string\">&quot;/ping&quot;</span>, api.Ping)</span><br><span class=\"line\"></span><br><span class=\"line\">\tr.GET(<span class=\"string\">&quot;/swagger/*any&quot;</span>, ginSwagger.WrapHandler(swaggerFiles.Handler))</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> r</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主要变更内容为</p>\n<ul>\n<li><code>import  _ &quot;star-im/src/main/docs&quot;</code></li>\n<li><code>import swaggerFiles &quot;github.com/swaggo/files&quot;</code></li>\n<li><code>import ginSwagger &quot;github.com/swaggo/gin-swagger&quot;</code></li>\n<li><code>r.GET(&quot;/swagger/*any&quot;, ginSwagger.WrapHandler(swaggerFiles.Handler))</code></li>\n</ul>\n<h4 id=\"测试\"><a class=\"markdownIt-Anchor\" href=\"#测试\"></a> 测试</h4>\n<p>通过浏览器访问 <a href=\"http://localhost:8081/swagger/index.html#/\">http://localhost:8081/swagger/index.html#/</a> 可以进入到swagger 接口文档的管理界面</p>\n<p>至此，当前目录结构为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── LICENSE</span><br><span class=\"line\">├── README.md</span><br><span class=\"line\">├── doc</span><br><span class=\"line\">│   └── build</span><br><span class=\"line\">│       └── 1-framwork.md</span><br><span class=\"line\">├── gin.log</span><br><span class=\"line\">├── go.mod</span><br><span class=\"line\">├── go.sum</span><br><span class=\"line\">├── main.go</span><br><span class=\"line\">└── src</span><br><span class=\"line\">    ├── main</span><br><span class=\"line\">    │   ├── common</span><br><span class=\"line\">    │   │   └── app</span><br><span class=\"line\">    │   │       ├── code.go</span><br><span class=\"line\">    │   │       ├── msg.go</span><br><span class=\"line\">    │   │       └── response.go</span><br><span class=\"line\">    │   ├── config</span><br><span class=\"line\">    │   │   ├── database</span><br><span class=\"line\">    │   │   │   └── database.go</span><br><span class=\"line\">    │   │   ├── init.go</span><br><span class=\"line\">    │   │   └── settings</span><br><span class=\"line\">    │   │       └── settings.go</span><br><span class=\"line\">    │   ├── docs</span><br><span class=\"line\">    │   │   ├── docs.go</span><br><span class=\"line\">    │   │   ├── swagger.json</span><br><span class=\"line\">    │   │   └── swagger.yaml</span><br><span class=\"line\">    │   ├── handler</span><br><span class=\"line\">    │   │   └── exception.go</span><br><span class=\"line\">    │   ├── models</span><br><span class=\"line\">    │   │   └── model.go</span><br><span class=\"line\">    │   ├── routers</span><br><span class=\"line\">    │   │   ├── api</span><br><span class=\"line\">    │   │   │   ├── health.go</span><br><span class=\"line\">    │   │   │   └── v1</span><br><span class=\"line\">    │   │   └── router.go</span><br><span class=\"line\">    │   └── util</span><br><span class=\"line\">    ├── resource</span><br><span class=\"line\">    │   └── app.yml</span><br><span class=\"line\">    └── test</span><br><span class=\"line\">        └── pkg</span><br><span class=\"line\">            ├── test_gin.go</span><br><span class=\"line\">            ├── test_gorm.go</span><br><span class=\"line\">            ├── test_jwt.go</span><br><span class=\"line\">            ├── test_redis.go</span><br><span class=\"line\">            └── test_viper.go</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":[{"name":"技术","path":"api/categories/技术.json"},{"name":"Golang","path":"api/categories/Golang.json"}],"tags":[{"name":"技术","path":"api/tags/技术.json"},{"name":"Golang","path":"api/tags/Golang.json"}]}