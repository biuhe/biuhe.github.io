{"title":"「Go」Go 组件系列文章2-viper","slug":"技术/go/「Go」Go 组件系列文章2-viper","date":"2022-11-21T11:41:20.000Z","updated":"2022-12-25T14:28:33.077Z","comments":true,"path":"api/articles/技术/go/「Go」Go 组件系列文章2-viper.json","excerpt":null,"covers":null,"content":"<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h2>\n<p>Viper是一个完整的Go应用程序配置解决方案，可以用于读取 JSON、TOML、YAML、HCL、env file和Java properties 配置文件。可以使用简单的方法来读取和设置配置值，并且可以设置默认值和类型转换器来确保程序始终能够读取到有效的配置值。</p>\n<p>我们通常将一些配置信息，如数据库的访问路径，端口号等存放在配置文件中方便统一修改。</p>\n<p>在 Java 中通常为 <code>application.yml</code> 或者 <code>applicatiton.properties</code> 文件，然后在 springboot 框架下使<br>\n用 <code>@ConfigurationProperties(prefix=”setting_name”) </code> 或者 <code>@Value(“valueStr”)</code> 的形式来读取。</p>\n<p>Viper 就是 go 用于做这一部分的工作类库</p>\n<p>相关链接：</p>\n<p><a href=\"https://github.com/spf13/viper\">GitHub</a></p>\n<p><a href=\"https://pkg.go.dev/github.com/spf13/viper\">PKG</a></p>\n<h2 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h2>\n<p>在项目中打开命令行执行如下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/spf13/viper</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\"></a> 使用</h2>\n<p>在 <code>项目根目录/src/resource</code> 资源目录下新建一个 <code>app.yml</code> 配置文件，并写入以下配置项</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">settings:</span></span><br><span class=\"line\">  <span class=\"attr\">server:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br></pre></td></tr></table></figure>\n<p>注：我们现在约定 <code>settings </code> 为配置项根节点，之后新增例如 <code>settings:database</code>之类的节点，则是在settings下新增一个 <code>database </code>节点，而不是重复设置多一个 <code>settings</code>。 其他新增/修改项也遵循此说法。</p>\n<p>如在settings下新增 <code>database </code>内容， 并修改 <code>server</code>下的端口号为9999，示例如下：</p>\n<p>正确示例为：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">settings:</span></span><br><span class=\"line\">  <span class=\"attr\">server:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">9999</span></span><br><span class=\"line\">\t<span class=\"attr\">database:</span></span><br><span class=\"line\">\t\t<span class=\"attr\">type:</span> <span class=\"string\">mysql</span></span><br></pre></td></tr></table></figure>\n<p>错误示例为：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">settings:</span></span><br><span class=\"line\">  <span class=\"attr\">server:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"attr\">server:</span>   </span><br><span class=\"line\">\t<span class=\"attr\">port:</span> <span class=\"number\">9999</span></span><br><span class=\"line\"><span class=\"attr\">settings:</span></span><br><span class=\"line\">\t<span class=\"attr\">database:</span></span><br><span class=\"line\">\t\t<span class=\"attr\">type:</span> <span class=\"string\">mysql</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"测试\"><a class=\"markdownIt-Anchor\" href=\"#测试\"></a> 测试</h2>\n<p>在  <code>项目根目录/src/test</code> 目录下新建一个 <code>pkg</code> 目录，用于测试引入的第三方类库。在目录下新建 <code>test_viper.go</code> 测试文件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main 方法必须使用 main 包</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入依赖</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/spf13/viper&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 主要执行的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t<span class=\"comment\">// 配置文件名(不带扩展名，即 app.yml 只需要app这部分)</span></span><br><span class=\"line\">\tviper.SetConfigName(<span class=\"string\">&quot;app&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 如果配置文件名称中没有扩展名，则为必填项</span></span><br><span class=\"line\">\tviper.SetConfigType(<span class=\"string\">&quot;yaml&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 在其中查找配置文件的路径</span></span><br><span class=\"line\">\tviper.AddConfigPath(<span class=\"string\">&quot;src/resource/&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 查找并读取配置文件</span></span><br><span class=\"line\">\terr := viper.ReadInConfig()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 处理读取配置文件时出现的错误</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(fmt.Errorf(<span class=\"string\">&quot;读取配置异常，原因为: %w&quot;</span>, err))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t<span class=\"comment\">// 打印内容到控制台</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;初始化 app 配置成功&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 获取配置文件中的参数</span></span><br><span class=\"line\">\turl := viper.GetString(<span class=\"string\">&quot;settings.server.url&quot;</span>)</span><br><span class=\"line\">\tport := viper.GetString(<span class=\"string\">&quot;settings.server.port&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 打印参数</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;配置中的服务器地址及端口号为：%s:%s&quot;</span>, url, port)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>执行程序后在控制台输出如下结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">初始化 app 配置成功</span><br><span class=\"line\">配置中的服务器地址及端口号为：localhost:8081</span><br></pre></td></tr></table></figure>\n","more":"<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h2>\n<p>Viper是一个完整的Go应用程序配置解决方案，可以用于读取 JSON、TOML、YAML、HCL、env file和Java properties 配置文件。可以使用简单的方法来读取和设置配置值，并且可以设置默认值和类型转换器来确保程序始终能够读取到有效的配置值。</p>\n<p>我们通常将一些配置信息，如数据库的访问路径，端口号等存放在配置文件中方便统一修改。</p>\n<p>在 Java 中通常为 <code>application.yml</code> 或者 <code>applicatiton.properties</code> 文件，然后在 springboot 框架下使<br>\n用 <code>@ConfigurationProperties(prefix=”setting_name”) </code> 或者 <code>@Value(“valueStr”)</code> 的形式来读取。</p>\n<p>Viper 就是 go 用于做这一部分的工作类库</p>\n<p>相关链接：</p>\n<p><a href=\"https://github.com/spf13/viper\">GitHub</a></p>\n<p><a href=\"https://pkg.go.dev/github.com/spf13/viper\">PKG</a></p>\n<h2 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h2>\n<p>在项目中打开命令行执行如下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/spf13/viper</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\"></a> 使用</h2>\n<p>在 <code>项目根目录/src/resource</code> 资源目录下新建一个 <code>app.yml</code> 配置文件，并写入以下配置项</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">settings:</span></span><br><span class=\"line\">  <span class=\"attr\">server:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br></pre></td></tr></table></figure>\n<p>注：我们现在约定 <code>settings </code> 为配置项根节点，之后新增例如 <code>settings:database</code>之类的节点，则是在settings下新增一个 <code>database </code>节点，而不是重复设置多一个 <code>settings</code>。 其他新增/修改项也遵循此说法。</p>\n<p>如在settings下新增 <code>database </code>内容， 并修改 <code>server</code>下的端口号为9999，示例如下：</p>\n<p>正确示例为：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">settings:</span></span><br><span class=\"line\">  <span class=\"attr\">server:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">9999</span></span><br><span class=\"line\">\t<span class=\"attr\">database:</span></span><br><span class=\"line\">\t\t<span class=\"attr\">type:</span> <span class=\"string\">mysql</span></span><br></pre></td></tr></table></figure>\n<p>错误示例为：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">settings:</span></span><br><span class=\"line\">  <span class=\"attr\">server:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"attr\">server:</span>   </span><br><span class=\"line\">\t<span class=\"attr\">port:</span> <span class=\"number\">9999</span></span><br><span class=\"line\"><span class=\"attr\">settings:</span></span><br><span class=\"line\">\t<span class=\"attr\">database:</span></span><br><span class=\"line\">\t\t<span class=\"attr\">type:</span> <span class=\"string\">mysql</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"测试\"><a class=\"markdownIt-Anchor\" href=\"#测试\"></a> 测试</h2>\n<p>在  <code>项目根目录/src/test</code> 目录下新建一个 <code>pkg</code> 目录，用于测试引入的第三方类库。在目录下新建 <code>test_viper.go</code> 测试文件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main 方法必须使用 main 包</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入依赖</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/spf13/viper&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 主要执行的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t<span class=\"comment\">// 配置文件名(不带扩展名，即 app.yml 只需要app这部分)</span></span><br><span class=\"line\">\tviper.SetConfigName(<span class=\"string\">&quot;app&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 如果配置文件名称中没有扩展名，则为必填项</span></span><br><span class=\"line\">\tviper.SetConfigType(<span class=\"string\">&quot;yaml&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 在其中查找配置文件的路径</span></span><br><span class=\"line\">\tviper.AddConfigPath(<span class=\"string\">&quot;src/resource/&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 查找并读取配置文件</span></span><br><span class=\"line\">\terr := viper.ReadInConfig()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 处理读取配置文件时出现的错误</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(fmt.Errorf(<span class=\"string\">&quot;读取配置异常，原因为: %w&quot;</span>, err))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t<span class=\"comment\">// 打印内容到控制台</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;初始化 app 配置成功&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 获取配置文件中的参数</span></span><br><span class=\"line\">\turl := viper.GetString(<span class=\"string\">&quot;settings.server.url&quot;</span>)</span><br><span class=\"line\">\tport := viper.GetString(<span class=\"string\">&quot;settings.server.port&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 打印参数</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;配置中的服务器地址及端口号为：%s:%s&quot;</span>, url, port)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>执行程序后在控制台输出如下结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">初始化 app 配置成功</span><br><span class=\"line\">配置中的服务器地址及端口号为：localhost:8081</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"技术","path":"api/categories/技术.json"},{"name":"Golang","path":"api/categories/Golang.json"}],"tags":[{"name":"技术","path":"api/tags/技术.json"},{"name":"Golang","path":"api/tags/Golang.json"},{"name":"viper","path":"api/tags/viper.json"}]}