{"title":"「Go」Go 组件系列文章3-gorm","slug":"技术/go/「Go」Go 组件系列文章3-gorm","date":"2022-12-12T04:08:56.304Z","updated":"2022-12-13T02:35:38.109Z","comments":true,"path":"api/articles/技术/go/「Go」Go 组件系列文章3-gorm.json","excerpt":null,"covers":null,"content":"<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h2>\n<p>GORM 是一个用于构建 Go 语言应用程序的对象关系映射（ORM）库。它可以帮助开发人员在 Go 语言项目中更轻松地使用数据库。它支持多种数据库，包括 MySQL、PostgreSQL 和 SQLite，并提供了一组简单易用的 API，可以让开发人员使用 Go 语言的结构体来描述数据库表和字段，并通过这些结构体来执行数据库操作。并支持事务、批量操作等等。和<code>Java</code>的<code>hibernate</code>框架相似。</p>\n<p>相关链接：</p>\n<p><a href=\"https://github.com/go-gorm/gorm\">GitHub</a></p>\n<p><a href=\"https://gorm.io/zh_CN/docs/index.html\">GORM中文网</a></p>\n<h2 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\"></a> 使用</h2>\n<h3 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h3>\n<p>要使用 <a href=\"http://gorm.io/gorm%EF%BC%8C%E9%A6%96%E5%85%88%E9%9C%80%E8%A6%81%E5%AE%89%E8%A3%85%E5%AE%83%E3%80%82%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8\">gorm.io/gorm，首先需要安装它。可以使用</a> Go 语言的包管理工具 go mod 来安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get gorm.io/gorm</span><br><span class=\"line\">go get gorm.io/driver/mysql</span><br></pre></td></tr></table></figure>\n<p>安装完成后，在 Go 语言项目中就可以引入 gorm 包并使用它了。首先，需要创建一个 gorm.DB 类型的变量，用于表示与数据库的连接：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;gorm.io/gorm&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> db *gorm.DB</span><br></pre></td></tr></table></figure>\n<p>然后，使用 gorm.Open() 函数来连接到数据库：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db, err := gorm.Open(<span class=\"string\">&quot;mysql&quot;</span>, <span class=\"string\">&quot;user:password@/dbname?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">panic</span>(<span class=\"string\">&quot;failed to connect database&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> db.Close()</span><br></pre></td></tr></table></figure>\n<p>其中 user 和password 为连接数据库的用户和密码，dbname 为库名，后面设置根据自己需求设置。</p>\n<p>以下为完整实例：</p>\n<p>创建数据库的步骤忽略，我们约定数据库名称为star-im，用户名和密码均为root。</p>\n<p>在  <code>项目根目录/src/test/pkg</code> 目录下新建 <code>test_gorm.go</code> 测试文件，代码如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;gorm.io/gorm&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TestProduct 定义一个实体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> TestProduct <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// gorm.Model 提供了基础实体的定义，包含了id, CreatedAt, UpdatedAt, DeletedAt 字段</span></span><br><span class=\"line\">\tgorm.Model</span><br><span class=\"line\">\t<span class=\"comment\">// Name 商品名称</span></span><br><span class=\"line\">\tName <span class=\"type\">string</span></span><br><span class=\"line\">\t<span class=\"comment\">// Price 商品价格</span></span><br><span class=\"line\">\tPrice <span class=\"type\">uint</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试 ORM 框架 —— 连接 MySQL https://github.com/go-gorm/gorm</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接信息，字符串中内容分别为：用户名:密码@连接方式(Host:Port)/数据库名?字符集&amp;解析时间&amp;默认时间</span></span><br><span class=\"line\">\t<span class=\"comment\">// 更多参数详见：https://github.com/go-sql-driver/mysql#parameters</span></span><br><span class=\"line\">\tdsn := <span class=\"string\">&quot;root:root@tcp(127.0.0.1:3306)/star-im?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class=\"line\">\t<span class=\"comment\">// 连接数据库，并设置基本的配置</span></span><br><span class=\"line\">\tdb, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果连接有异常则打印</span></span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;连接数据库失败：&quot;</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 迁移 schema，如果数据库该表没有则创建表</span></span><br><span class=\"line\">\terr = db.AutoMigrate(&amp;TestProduct&#123;&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;创建数据库表异常：&quot;</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Create 创建记录</span></span><br><span class=\"line\">\t<span class=\"comment\">// 定义实体</span></span><br><span class=\"line\">\tproduct := &amp;TestProduct&#123;Name: <span class=\"string\">&quot;奶茶&quot;</span>, Price: <span class=\"number\">100</span>&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 创建记录</span></span><br><span class=\"line\">\tresult := db.Create(product)</span><br><span class=\"line\">\t<span class=\"comment\">// 创建成功后会返回插入数据的主键给实体赋值 ID</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;ID为：&quot;</span>, product.ID)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;如果有异常，则会输出：&quot;</span>, result.Error)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;返回插入记录的条数：&quot;</span>, result.RowsAffected)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Find 查询</span></span><br><span class=\"line\">\tprod := db.First(&amp;product, <span class=\"string\">&quot;name = ?&quot;</span>, <span class=\"string\">&quot;奶茶&quot;</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;查询数:&quot;</span>, prod.RowsAffected)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 查找后返回实体</span></span><br><span class=\"line\">\tprod2 := TestProduct&#123;&#125;</span><br><span class=\"line\">\tdb.Where(<span class=\"string\">&quot;name = ?&quot;</span>, <span class=\"string\">&quot;奶茶&quot;</span>).First(&amp;prod2)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;实体：&quot;</span>, prod2)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Update - 修改</span></span><br><span class=\"line\">\t<span class=\"comment\">// 将 product 的 price 更新为 200</span></span><br><span class=\"line\">\tdb.Model(&amp;product).Update(<span class=\"string\">&quot;Price&quot;</span>, <span class=\"number\">200</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// Update - 更新多个字段</span></span><br><span class=\"line\">\tdb.Model(&amp;product).Updates(TestProduct&#123;Price: <span class=\"number\">200</span>, Name: <span class=\"string\">&quot;蛋糕&quot;</span>&#125;)</span><br><span class=\"line\">\t<span class=\"comment\">// 仅更新非零值字段</span></span><br><span class=\"line\">\tdb.Model(&amp;product).Updates(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">&quot;Price&quot;</span>: <span class=\"number\">200</span>, <span class=\"string\">&quot;Name&quot;</span>: <span class=\"string\">&quot;蛋糕&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Delete - 逻辑删除 product，会修改 deleted_at，标记为删除</span></span><br><span class=\"line\">\tdb.Delete(&amp;product, <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>执行程序后在控制台输出如下结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ID为： 1</span><br><span class=\"line\">如果有异常，则会输出： &lt;nil&gt;</span><br><span class=\"line\">返回插入记录的条数： 1</span><br><span class=\"line\">查询数: 1</span><br><span class=\"line\">实体： &#123;&#123;1 2022-11-22 16:53:58.969 +0800 CST 2022-11-22 16:53:58.969 +0800 CST &#123;0001-01-01 00:00:00 +0000 UTC false&#125;&#125; 奶茶 100&#125;</span><br></pre></td></tr></table></figure>\n<p>其他更多操作请参考 <a href=\"https://gorm.io/zh_CN/docs/index.html\">GORM中文网</a> ，以及 <a href=\"https://gorm.io/zh_CN/docs/constraints.html\">约束</a>、<a href=\"https://gorm.io/zh_CN/docs/generic_interface.html\">连接池</a> 、<a href=\"https://gorm.io/zh_CN/docs/logger.html\">日志</a> 等配置可根据自身需求学习设置。我在后续过程中也会讲解并设置。</p>\n","more":"<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h2>\n<p>GORM 是一个用于构建 Go 语言应用程序的对象关系映射（ORM）库。它可以帮助开发人员在 Go 语言项目中更轻松地使用数据库。它支持多种数据库，包括 MySQL、PostgreSQL 和 SQLite，并提供了一组简单易用的 API，可以让开发人员使用 Go 语言的结构体来描述数据库表和字段，并通过这些结构体来执行数据库操作。并支持事务、批量操作等等。和<code>Java</code>的<code>hibernate</code>框架相似。</p>\n<p>相关链接：</p>\n<p><a href=\"https://github.com/go-gorm/gorm\">GitHub</a></p>\n<p><a href=\"https://gorm.io/zh_CN/docs/index.html\">GORM中文网</a></p>\n<h2 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\"></a> 使用</h2>\n<h3 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h3>\n<p>要使用 <a href=\"http://gorm.io/gorm%EF%BC%8C%E9%A6%96%E5%85%88%E9%9C%80%E8%A6%81%E5%AE%89%E8%A3%85%E5%AE%83%E3%80%82%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8\">gorm.io/gorm，首先需要安装它。可以使用</a> Go 语言的包管理工具 go mod 来安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get gorm.io/gorm</span><br><span class=\"line\">go get gorm.io/driver/mysql</span><br></pre></td></tr></table></figure>\n<p>安装完成后，在 Go 语言项目中就可以引入 gorm 包并使用它了。首先，需要创建一个 gorm.DB 类型的变量，用于表示与数据库的连接：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;gorm.io/gorm&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> db *gorm.DB</span><br></pre></td></tr></table></figure>\n<p>然后，使用 gorm.Open() 函数来连接到数据库：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db, err := gorm.Open(<span class=\"string\">&quot;mysql&quot;</span>, <span class=\"string\">&quot;user:password@/dbname?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">panic</span>(<span class=\"string\">&quot;failed to connect database&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> db.Close()</span><br></pre></td></tr></table></figure>\n<p>其中 user 和password 为连接数据库的用户和密码，dbname 为库名，后面设置根据自己需求设置。</p>\n<p>以下为完整实例：</p>\n<p>创建数据库的步骤忽略，我们约定数据库名称为star-im，用户名和密码均为root。</p>\n<p>在  <code>项目根目录/src/test/pkg</code> 目录下新建 <code>test_gorm.go</code> 测试文件，代码如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;gorm.io/gorm&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TestProduct 定义一个实体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> TestProduct <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// gorm.Model 提供了基础实体的定义，包含了id, CreatedAt, UpdatedAt, DeletedAt 字段</span></span><br><span class=\"line\">\tgorm.Model</span><br><span class=\"line\">\t<span class=\"comment\">// Name 商品名称</span></span><br><span class=\"line\">\tName <span class=\"type\">string</span></span><br><span class=\"line\">\t<span class=\"comment\">// Price 商品价格</span></span><br><span class=\"line\">\tPrice <span class=\"type\">uint</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试 ORM 框架 —— 连接 MySQL https://github.com/go-gorm/gorm</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接信息，字符串中内容分别为：用户名:密码@连接方式(Host:Port)/数据库名?字符集&amp;解析时间&amp;默认时间</span></span><br><span class=\"line\">\t<span class=\"comment\">// 更多参数详见：https://github.com/go-sql-driver/mysql#parameters</span></span><br><span class=\"line\">\tdsn := <span class=\"string\">&quot;root:root@tcp(127.0.0.1:3306)/star-im?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class=\"line\">\t<span class=\"comment\">// 连接数据库，并设置基本的配置</span></span><br><span class=\"line\">\tdb, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果连接有异常则打印</span></span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;连接数据库失败：&quot;</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 迁移 schema，如果数据库该表没有则创建表</span></span><br><span class=\"line\">\terr = db.AutoMigrate(&amp;TestProduct&#123;&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;创建数据库表异常：&quot;</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Create 创建记录</span></span><br><span class=\"line\">\t<span class=\"comment\">// 定义实体</span></span><br><span class=\"line\">\tproduct := &amp;TestProduct&#123;Name: <span class=\"string\">&quot;奶茶&quot;</span>, Price: <span class=\"number\">100</span>&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 创建记录</span></span><br><span class=\"line\">\tresult := db.Create(product)</span><br><span class=\"line\">\t<span class=\"comment\">// 创建成功后会返回插入数据的主键给实体赋值 ID</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;ID为：&quot;</span>, product.ID)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;如果有异常，则会输出：&quot;</span>, result.Error)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;返回插入记录的条数：&quot;</span>, result.RowsAffected)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Find 查询</span></span><br><span class=\"line\">\tprod := db.First(&amp;product, <span class=\"string\">&quot;name = ?&quot;</span>, <span class=\"string\">&quot;奶茶&quot;</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;查询数:&quot;</span>, prod.RowsAffected)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 查找后返回实体</span></span><br><span class=\"line\">\tprod2 := TestProduct&#123;&#125;</span><br><span class=\"line\">\tdb.Where(<span class=\"string\">&quot;name = ?&quot;</span>, <span class=\"string\">&quot;奶茶&quot;</span>).First(&amp;prod2)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;实体：&quot;</span>, prod2)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Update - 修改</span></span><br><span class=\"line\">\t<span class=\"comment\">// 将 product 的 price 更新为 200</span></span><br><span class=\"line\">\tdb.Model(&amp;product).Update(<span class=\"string\">&quot;Price&quot;</span>, <span class=\"number\">200</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// Update - 更新多个字段</span></span><br><span class=\"line\">\tdb.Model(&amp;product).Updates(TestProduct&#123;Price: <span class=\"number\">200</span>, Name: <span class=\"string\">&quot;蛋糕&quot;</span>&#125;)</span><br><span class=\"line\">\t<span class=\"comment\">// 仅更新非零值字段</span></span><br><span class=\"line\">\tdb.Model(&amp;product).Updates(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">&quot;Price&quot;</span>: <span class=\"number\">200</span>, <span class=\"string\">&quot;Name&quot;</span>: <span class=\"string\">&quot;蛋糕&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Delete - 逻辑删除 product，会修改 deleted_at，标记为删除</span></span><br><span class=\"line\">\tdb.Delete(&amp;product, <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>执行程序后在控制台输出如下结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ID为： 1</span><br><span class=\"line\">如果有异常，则会输出： &lt;nil&gt;</span><br><span class=\"line\">返回插入记录的条数： 1</span><br><span class=\"line\">查询数: 1</span><br><span class=\"line\">实体： &#123;&#123;1 2022-11-22 16:53:58.969 +0800 CST 2022-11-22 16:53:58.969 +0800 CST &#123;0001-01-01 00:00:00 +0000 UTC false&#125;&#125; 奶茶 100&#125;</span><br></pre></td></tr></table></figure>\n<p>其他更多操作请参考 <a href=\"https://gorm.io/zh_CN/docs/index.html\">GORM中文网</a> ，以及 <a href=\"https://gorm.io/zh_CN/docs/constraints.html\">约束</a>、<a href=\"https://gorm.io/zh_CN/docs/generic_interface.html\">连接池</a> 、<a href=\"https://gorm.io/zh_CN/docs/logger.html\">日志</a> 等配置可根据自身需求学习设置。我在后续过程中也会讲解并设置。</p>\n","categories":[{"name":"技术","path":"api/categories/技术.json"},{"name":"Golang","path":"api/categories/Golang.json"}],"tags":[{"name":"技术","path":"api/tags/技术.json"},{"name":"Golang","path":"api/tags/Golang.json"},{"name":"gorm","path":"api/tags/gorm.json"}]}