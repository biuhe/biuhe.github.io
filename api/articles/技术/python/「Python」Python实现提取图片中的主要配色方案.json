{"title":"「Python」Python实现提取图片中的主要配色方案","slug":"技术/python/「Python」Python实现提取图片中的主要配色方案","date":"2023-06-07T06:42:11.000Z","updated":"2023-06-07T07:52:11.285Z","comments":true,"path":"api/articles/技术/python/「Python」Python实现提取图片中的主要配色方案.json","excerpt":null,"covers":null,"content":"<h2 id=\"背景\"><a class=\"markdownIt-Anchor\" href=\"#背景\"></a> 背景</h2>\n<p>当我们设计图片或网页时，配色方案是非常重要的一环。一个好的配色可以为我们的作品增添美感和视觉冲击力。因此，我们可以参考一些出色作品的配色方案来寻求灵感。</p>\n<p>Haishoku 是一个基于 Python 的开源色彩分析库，可用于提取图像中的主要颜色和色调。其可以读取图片文件，自动提取出其中的主色调、辅助色和背景色等颜色，并将其以 RGB 和 HEX 等格式输出。Haishoku 还提供了示例代码和 API 文档，方便用户进行使用和二次开发。通过 Haishoku，我们可以方便地获取图片的主色调和配色方案，为我们的设计等工作提供便利。</p>\n<h2 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\"></a> 介绍</h2>\n<p>Github仓库：<a href=\"https://github.com/LanceGin/haishoku\">LanceGin/haishoku</a></p>\n<p>Haishoku 是一个用来获取图片主色调和主要配色方案的python库，依赖于<code>python3</code>和<code>pillow</code>。</p>\n<h3 id=\"功能\"><a class=\"markdownIt-Anchor\" href=\"#功能\"></a> 功能</h3>\n<ol>\n<li>获取图片的 <code>主色调</code></li>\n<li>获取图片的 <code>配色方案</code></li>\n<li>从<code>v1.1.4</code>版本开始，可以直接从网络url生成Haishoku对象</li>\n</ol>\n<h3 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install haishoku</span><br></pre></td></tr></table></figure>\n<p>如果提示没有pip3，可能需要按以下方式安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m pip install haishoku</span><br></pre></td></tr></table></figure>\n<h3 id=\"api\"><a class=\"markdownIt-Anchor\" href=\"#api\"></a> API</h3>\n<h4 id=\"loadhaishoku-image\"><a class=\"markdownIt-Anchor\" href=\"#loadhaishoku-image\"></a> • loadHaishoku( image )</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> haishoku.haishoku <span class=\"keyword\">import</span> Haishoku</span><br><span class=\"line\">haishoku = Haishoku.loadHaishoku(image)</span><br></pre></td></tr></table></figure>\n<p>接口会返回一个<code>Haishoku</code>实例，你可以通过实例属性<code>haishoku.dominant</code> 和 <code>haishoku.palette</code>直接获取到对应的<code>主色调</code> 和 <code>配色方案</code></p>\n<blockquote>\n<p>当然，也提供了更加直接的接口用来获取对应颜色的值以及临时预览颜色，如下：</p>\n</blockquote>\n<h4 id=\"getdominant-image\"><a class=\"markdownIt-Anchor\" href=\"#getdominant-image\"></a> • getDominant( image )</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> haishoku.haishoku <span class=\"keyword\">import</span> Haishoku</span><br><span class=\"line\">dominant = Haishoku.getDominant(image)</span><br></pre></td></tr></table></figure>\n<p>返回结构为 (R, G, B) 的一个 <code>元组</code></p>\n<h4 id=\"showdominant-image\"><a class=\"markdownIt-Anchor\" href=\"#showdominant-image\"></a> • showDominant( image )</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> haishoku.haishoku <span class=\"keyword\">import</span> Haishoku</span><br><span class=\"line\">Haishoku.showDominant( image )</span><br></pre></td></tr></table></figure>\n<p>接口会打开一个临时文件用来预览主色调的颜色。（不会保存在本地）</p>\n<h4 id=\"getpalette-image\"><a class=\"markdownIt-Anchor\" href=\"#getpalette-image\"></a> • getPalette( image )</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> haishoku.haishoku <span class=\"keyword\">import</span> Haishoku</span><br><span class=\"line\">palette = Haishoku.getPalette( image )</span><br></pre></td></tr></table></figure>\n<p>返回一个结构为： [(percentage, (R, G, B)), (percentage, (R, G, B)), …] 最大长度为8的<code>数组</code></p>\n<h4 id=\"showpalette-image\"><a class=\"markdownIt-Anchor\" href=\"#showpalette-image\"></a> • showPalette( image）</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> haishoku.haishoku <span class=\"keyword\">import</span> Haishoku</span><br><span class=\"line\">Haishoku.showPalette(image)</span><br></pre></td></tr></table></figure>\n<p>接口会打开一个临时文件用来预览图片配色方案。（不会保存在本地）</p>\n<h2 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\"></a> 使用</h2>\n<p>我们获取配色方案的核心代码其实就两行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 载入图片的颜色信息</span></span><br><span class=\"line\">haishoku = Haishoku.loadHaishoku(img_path)</span><br><span class=\"line\"><span class=\"comment\"># 返回配色方案的数组，内容格式为 [(颜色占据的百分比, (红,绿,蓝的RGB色值))]</span></span><br><span class=\"line\">haishoku.palette</span><br></pre></td></tr></table></figure>\n<p>剩下的我们只需要处理 <code>haishoku.palette</code> 数据，获取到里面的 RGB 色值，然后另外绘制到新的图片中即可。</p>\n<p>总体思路为新建一个空白背景，并将图片等比缩放指定的像素，填入到背景当中，然后再将配色方案绘制成为色块，填充到图片下方即可。</p>\n<p>完整代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image, ImageDraw</span><br><span class=\"line\"><span class=\"keyword\">from</span> haishoku.haishoku <span class=\"keyword\">import</span> Haishoku</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_color_schema</span>(<span class=\"params\">img_path</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    生成图片的配色方案，并返回一张新的图片，其中包含原图和配色方案</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    此方法的作用是为传入的图片生成配色方案，并将原图和配色方案合并成一张新图片，最后以添加前缀 &quot;color_schema_&quot; 的方式保存。</span></span><br><span class=\"line\"><span class=\"string\">    其中，使用 Haishoku.loadHaishoku(img_path) 方法获取图片的颜色信息，</span></span><br><span class=\"line\"><span class=\"string\">    使用 Image.open(img_path) 方法打开图片文件，使用 .size 获取图片大小，计算缩放后的大小，</span></span><br><span class=\"line\"><span class=\"string\">    使用 .resize(new_size) 进行缩放。</span></span><br><span class=\"line\"><span class=\"string\">    然后计算配色方案中的每行应显示的颜色块数量，计算每个颜色块的宽度和高度，新建白色背景图片并将原始图片贴到新图片顶部。</span></span><br><span class=\"line\"><span class=\"string\">    接着，获取配色方案，并使用 Image.new() 方法新建一张图片，绘制矩形块表示颜色，并添加颜色名称，</span></span><br><span class=\"line\"><span class=\"string\">    最后在新图片上绘制原图和配色方案。使用 add_prefix(img_path) 方法为新图片路径添加前缀 &quot;color_schema_&quot; 并保存新图片。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :param img_path: 原始图片路径</span></span><br><span class=\"line\"><span class=\"string\">    :return: None</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 载入图片的颜色信息</span></span><br><span class=\"line\">    haishoku = Haishoku.loadHaishoku(img_path)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> Image.<span class=\"built_in\">open</span>(img_path) <span class=\"keyword\">as</span> img:</span><br><span class=\"line\">        <span class=\"comment\"># 获取图片大小，并计算缩放后的大小</span></span><br><span class=\"line\">        width, height = img.size</span><br><span class=\"line\">        scale_factor = <span class=\"number\">500</span> / width</span><br><span class=\"line\">        new_size = (<span class=\"number\">500</span>, <span class=\"built_in\">int</span>(height * scale_factor))</span><br><span class=\"line\">        img = img.resize(new_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 计算配色方案中每行应显示的颜色块数量</span></span><br><span class=\"line\">        colors_num = <span class=\"built_in\">len</span>(haishoku.palette)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> colors_num &lt; <span class=\"number\">5</span>:</span><br><span class=\"line\">            colors_per_row = colors_num</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            colors_per_row = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 计算每个颜色块的宽度和高度</span></span><br><span class=\"line\">        color_block_width = <span class=\"number\">500</span> // colors_per_row</span><br><span class=\"line\">        color_block_height = <span class=\"number\">40</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 新建一张白色背景的图片</span></span><br><span class=\"line\">        new_img = Image.new(<span class=\"string\">&#x27;RGB&#x27;</span>, (img.width, img.height + color_block_height + <span class=\"number\">20</span>), (<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 将原始图片贴到新图片顶部</span></span><br><span class=\"line\">        new_img.paste(img, (<span class=\"number\">0</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 获取配色方案</span></span><br><span class=\"line\">        colors = haishoku.palette[:colors_num]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 绘制矩形块表示颜色，并添加颜色名称</span></span><br><span class=\"line\">        palette_size = (<span class=\"number\">500</span>, <span class=\"built_in\">int</span>(<span class=\"built_in\">len</span>(colors) / colors_per_row) * color_block_height + <span class=\"number\">60</span>)</span><br><span class=\"line\">        colors_img = Image.new(<span class=\"string\">&#x27;RGB&#x27;</span>, palette_size, (<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>))</span><br><span class=\"line\">        draw_colors = ImageDraw.Draw(colors_img)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, color <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(colors):</span><br><span class=\"line\">          \t<span class=\"comment\"># 绘制色块</span></span><br><span class=\"line\">            x = i % colors_per_row * color_block_width</span><br><span class=\"line\">            y = i // colors_per_row * color_block_height</span><br><span class=\"line\">            draw_colors.rectangle((x, y, x + color_block_width, y + color_block_height), fill=<span class=\"built_in\">tuple</span>(color[<span class=\"number\">1</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 写上十六进制颜色值</span></span><br><span class=\"line\">            draw_colors.text((x + color_block_width // <span class=\"number\">2</span>, y + color_block_height // <span class=\"number\">2</span>),</span><br><span class=\"line\">                             <span class=\"string\">f&quot;#<span class=\"subst\">&#123;color[<span class=\"number\">1</span>][<span class=\"number\">0</span>]:02x&#125;</span><span class=\"subst\">&#123;color[<span class=\"number\">1</span>][<span class=\"number\">1</span>]:02x&#125;</span><span class=\"subst\">&#123;color[<span class=\"number\">1</span>][<span class=\"number\">2</span>]:02x&#125;</span>&quot;</span>.upper(), anchor=<span class=\"string\">&#x27;mm&#x27;</span>,</span><br><span class=\"line\">                             fill=(<span class=\"number\">235</span>, <span class=\"number\">235</span>, <span class=\"number\">235</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 在新图片上绘制原图和配色方案</span></span><br><span class=\"line\">        new_img = Image.new(<span class=\"string\">&#x27;RGB&#x27;</span>, (<span class=\"number\">500</span>, new_size[<span class=\"number\">1</span>] + palette_size[<span class=\"number\">1</span>] + <span class=\"number\">20</span>), (<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>))</span><br><span class=\"line\">        new_img.paste(img, (<span class=\"number\">0</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\">        new_img.paste(colors_img, (<span class=\"number\">0</span>, new_size[<span class=\"number\">1</span>] + <span class=\"number\">20</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 保存新图片</span></span><br><span class=\"line\">        new_img.save(add_prefix(img_path))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add_prefix</span>(<span class=\"params\">file_path</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    为文件路径添加前缀 &quot;color_schema_&quot;</span></span><br><span class=\"line\"><span class=\"string\">    :param file_path: 原始文件路径，包含目录路径、文件名和扩展名</span></span><br><span class=\"line\"><span class=\"string\">    :return: 添加前缀后的新文件路径</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 分离出目录路径、文件名和扩展名</span></span><br><span class=\"line\">    dir_path, file_name = os.path.split(file_path)</span><br><span class=\"line\">    name, ext = os.path.splitext(file_name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 在文件名前加上 &quot;color_schema_&quot; 前缀</span></span><br><span class=\"line\">    new_name = <span class=\"string\">&quot;color_schema_&quot;</span> + name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 重新拼接路径、文件名和扩展名</span></span><br><span class=\"line\">    new_path = os.path.join(dir_path, new_name + ext)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> new_path</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    get_color_schema(<span class=\"string\">&#x27;img/img1.png&#x27;</span>)</span><br><span class=\"line\">    get_color_schema(<span class=\"string\">&#x27;img/img2.png&#x27;</span>)</span><br><span class=\"line\">    get_color_schema(<span class=\"string\">&#x27;img/img3.png&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>除去注释，核心代码大概在 40 行左右，整个类库使用非常方便。通过这篇文章的分享，相信大家对于 Haishoku 工具有了更深入的了解，并且也可以从中学到一些有用的编程技巧和实践经验</p>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<blockquote>\n<p><a href=\"https://github.com/LanceGin/haishoku/blob/master/docs/document_zh.md\">Haishoku Github中文文档</a></p>\n</blockquote>\n","more":"<h2 id=\"背景\"><a class=\"markdownIt-Anchor\" href=\"#背景\"></a> 背景</h2>\n<p>当我们设计图片或网页时，配色方案是非常重要的一环。一个好的配色可以为我们的作品增添美感和视觉冲击力。因此，我们可以参考一些出色作品的配色方案来寻求灵感。</p>\n<p>Haishoku 是一个基于 Python 的开源色彩分析库，可用于提取图像中的主要颜色和色调。其可以读取图片文件，自动提取出其中的主色调、辅助色和背景色等颜色，并将其以 RGB 和 HEX 等格式输出。Haishoku 还提供了示例代码和 API 文档，方便用户进行使用和二次开发。通过 Haishoku，我们可以方便地获取图片的主色调和配色方案，为我们的设计等工作提供便利。</p>\n<h2 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\"></a> 介绍</h2>\n<p>Github仓库：<a href=\"https://github.com/LanceGin/haishoku\">LanceGin/haishoku</a></p>\n<p>Haishoku 是一个用来获取图片主色调和主要配色方案的python库，依赖于<code>python3</code>和<code>pillow</code>。</p>\n<h3 id=\"功能\"><a class=\"markdownIt-Anchor\" href=\"#功能\"></a> 功能</h3>\n<ol>\n<li>获取图片的 <code>主色调</code></li>\n<li>获取图片的 <code>配色方案</code></li>\n<li>从<code>v1.1.4</code>版本开始，可以直接从网络url生成Haishoku对象</li>\n</ol>\n<h3 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install haishoku</span><br></pre></td></tr></table></figure>\n<p>如果提示没有pip3，可能需要按以下方式安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m pip install haishoku</span><br></pre></td></tr></table></figure>\n<h3 id=\"api\"><a class=\"markdownIt-Anchor\" href=\"#api\"></a> API</h3>\n<h4 id=\"loadhaishoku-image\"><a class=\"markdownIt-Anchor\" href=\"#loadhaishoku-image\"></a> • loadHaishoku( image )</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> haishoku.haishoku <span class=\"keyword\">import</span> Haishoku</span><br><span class=\"line\">haishoku = Haishoku.loadHaishoku(image)</span><br></pre></td></tr></table></figure>\n<p>接口会返回一个<code>Haishoku</code>实例，你可以通过实例属性<code>haishoku.dominant</code> 和 <code>haishoku.palette</code>直接获取到对应的<code>主色调</code> 和 <code>配色方案</code></p>\n<blockquote>\n<p>当然，也提供了更加直接的接口用来获取对应颜色的值以及临时预览颜色，如下：</p>\n</blockquote>\n<h4 id=\"getdominant-image\"><a class=\"markdownIt-Anchor\" href=\"#getdominant-image\"></a> • getDominant( image )</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> haishoku.haishoku <span class=\"keyword\">import</span> Haishoku</span><br><span class=\"line\">dominant = Haishoku.getDominant(image)</span><br></pre></td></tr></table></figure>\n<p>返回结构为 (R, G, B) 的一个 <code>元组</code></p>\n<h4 id=\"showdominant-image\"><a class=\"markdownIt-Anchor\" href=\"#showdominant-image\"></a> • showDominant( image )</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> haishoku.haishoku <span class=\"keyword\">import</span> Haishoku</span><br><span class=\"line\">Haishoku.showDominant( image )</span><br></pre></td></tr></table></figure>\n<p>接口会打开一个临时文件用来预览主色调的颜色。（不会保存在本地）</p>\n<h4 id=\"getpalette-image\"><a class=\"markdownIt-Anchor\" href=\"#getpalette-image\"></a> • getPalette( image )</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> haishoku.haishoku <span class=\"keyword\">import</span> Haishoku</span><br><span class=\"line\">palette = Haishoku.getPalette( image )</span><br></pre></td></tr></table></figure>\n<p>返回一个结构为： [(percentage, (R, G, B)), (percentage, (R, G, B)), …] 最大长度为8的<code>数组</code></p>\n<h4 id=\"showpalette-image\"><a class=\"markdownIt-Anchor\" href=\"#showpalette-image\"></a> • showPalette( image）</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> haishoku.haishoku <span class=\"keyword\">import</span> Haishoku</span><br><span class=\"line\">Haishoku.showPalette(image)</span><br></pre></td></tr></table></figure>\n<p>接口会打开一个临时文件用来预览图片配色方案。（不会保存在本地）</p>\n<h2 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\"></a> 使用</h2>\n<p>我们获取配色方案的核心代码其实就两行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 载入图片的颜色信息</span></span><br><span class=\"line\">haishoku = Haishoku.loadHaishoku(img_path)</span><br><span class=\"line\"><span class=\"comment\"># 返回配色方案的数组，内容格式为 [(颜色占据的百分比, (红,绿,蓝的RGB色值))]</span></span><br><span class=\"line\">haishoku.palette</span><br></pre></td></tr></table></figure>\n<p>剩下的我们只需要处理 <code>haishoku.palette</code> 数据，获取到里面的 RGB 色值，然后另外绘制到新的图片中即可。</p>\n<p>总体思路为新建一个空白背景，并将图片等比缩放指定的像素，填入到背景当中，然后再将配色方案绘制成为色块，填充到图片下方即可。</p>\n<p>完整代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image, ImageDraw</span><br><span class=\"line\"><span class=\"keyword\">from</span> haishoku.haishoku <span class=\"keyword\">import</span> Haishoku</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_color_schema</span>(<span class=\"params\">img_path</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    生成图片的配色方案，并返回一张新的图片，其中包含原图和配色方案</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    此方法的作用是为传入的图片生成配色方案，并将原图和配色方案合并成一张新图片，最后以添加前缀 &quot;color_schema_&quot; 的方式保存。</span></span><br><span class=\"line\"><span class=\"string\">    其中，使用 Haishoku.loadHaishoku(img_path) 方法获取图片的颜色信息，</span></span><br><span class=\"line\"><span class=\"string\">    使用 Image.open(img_path) 方法打开图片文件，使用 .size 获取图片大小，计算缩放后的大小，</span></span><br><span class=\"line\"><span class=\"string\">    使用 .resize(new_size) 进行缩放。</span></span><br><span class=\"line\"><span class=\"string\">    然后计算配色方案中的每行应显示的颜色块数量，计算每个颜色块的宽度和高度，新建白色背景图片并将原始图片贴到新图片顶部。</span></span><br><span class=\"line\"><span class=\"string\">    接着，获取配色方案，并使用 Image.new() 方法新建一张图片，绘制矩形块表示颜色，并添加颜色名称，</span></span><br><span class=\"line\"><span class=\"string\">    最后在新图片上绘制原图和配色方案。使用 add_prefix(img_path) 方法为新图片路径添加前缀 &quot;color_schema_&quot; 并保存新图片。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :param img_path: 原始图片路径</span></span><br><span class=\"line\"><span class=\"string\">    :return: None</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 载入图片的颜色信息</span></span><br><span class=\"line\">    haishoku = Haishoku.loadHaishoku(img_path)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> Image.<span class=\"built_in\">open</span>(img_path) <span class=\"keyword\">as</span> img:</span><br><span class=\"line\">        <span class=\"comment\"># 获取图片大小，并计算缩放后的大小</span></span><br><span class=\"line\">        width, height = img.size</span><br><span class=\"line\">        scale_factor = <span class=\"number\">500</span> / width</span><br><span class=\"line\">        new_size = (<span class=\"number\">500</span>, <span class=\"built_in\">int</span>(height * scale_factor))</span><br><span class=\"line\">        img = img.resize(new_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 计算配色方案中每行应显示的颜色块数量</span></span><br><span class=\"line\">        colors_num = <span class=\"built_in\">len</span>(haishoku.palette)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> colors_num &lt; <span class=\"number\">5</span>:</span><br><span class=\"line\">            colors_per_row = colors_num</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            colors_per_row = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 计算每个颜色块的宽度和高度</span></span><br><span class=\"line\">        color_block_width = <span class=\"number\">500</span> // colors_per_row</span><br><span class=\"line\">        color_block_height = <span class=\"number\">40</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 新建一张白色背景的图片</span></span><br><span class=\"line\">        new_img = Image.new(<span class=\"string\">&#x27;RGB&#x27;</span>, (img.width, img.height + color_block_height + <span class=\"number\">20</span>), (<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 将原始图片贴到新图片顶部</span></span><br><span class=\"line\">        new_img.paste(img, (<span class=\"number\">0</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 获取配色方案</span></span><br><span class=\"line\">        colors = haishoku.palette[:colors_num]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 绘制矩形块表示颜色，并添加颜色名称</span></span><br><span class=\"line\">        palette_size = (<span class=\"number\">500</span>, <span class=\"built_in\">int</span>(<span class=\"built_in\">len</span>(colors) / colors_per_row) * color_block_height + <span class=\"number\">60</span>)</span><br><span class=\"line\">        colors_img = Image.new(<span class=\"string\">&#x27;RGB&#x27;</span>, palette_size, (<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>))</span><br><span class=\"line\">        draw_colors = ImageDraw.Draw(colors_img)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, color <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(colors):</span><br><span class=\"line\">          \t<span class=\"comment\"># 绘制色块</span></span><br><span class=\"line\">            x = i % colors_per_row * color_block_width</span><br><span class=\"line\">            y = i // colors_per_row * color_block_height</span><br><span class=\"line\">            draw_colors.rectangle((x, y, x + color_block_width, y + color_block_height), fill=<span class=\"built_in\">tuple</span>(color[<span class=\"number\">1</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 写上十六进制颜色值</span></span><br><span class=\"line\">            draw_colors.text((x + color_block_width // <span class=\"number\">2</span>, y + color_block_height // <span class=\"number\">2</span>),</span><br><span class=\"line\">                             <span class=\"string\">f&quot;#<span class=\"subst\">&#123;color[<span class=\"number\">1</span>][<span class=\"number\">0</span>]:02x&#125;</span><span class=\"subst\">&#123;color[<span class=\"number\">1</span>][<span class=\"number\">1</span>]:02x&#125;</span><span class=\"subst\">&#123;color[<span class=\"number\">1</span>][<span class=\"number\">2</span>]:02x&#125;</span>&quot;</span>.upper(), anchor=<span class=\"string\">&#x27;mm&#x27;</span>,</span><br><span class=\"line\">                             fill=(<span class=\"number\">235</span>, <span class=\"number\">235</span>, <span class=\"number\">235</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 在新图片上绘制原图和配色方案</span></span><br><span class=\"line\">        new_img = Image.new(<span class=\"string\">&#x27;RGB&#x27;</span>, (<span class=\"number\">500</span>, new_size[<span class=\"number\">1</span>] + palette_size[<span class=\"number\">1</span>] + <span class=\"number\">20</span>), (<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>))</span><br><span class=\"line\">        new_img.paste(img, (<span class=\"number\">0</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\">        new_img.paste(colors_img, (<span class=\"number\">0</span>, new_size[<span class=\"number\">1</span>] + <span class=\"number\">20</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 保存新图片</span></span><br><span class=\"line\">        new_img.save(add_prefix(img_path))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add_prefix</span>(<span class=\"params\">file_path</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    为文件路径添加前缀 &quot;color_schema_&quot;</span></span><br><span class=\"line\"><span class=\"string\">    :param file_path: 原始文件路径，包含目录路径、文件名和扩展名</span></span><br><span class=\"line\"><span class=\"string\">    :return: 添加前缀后的新文件路径</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 分离出目录路径、文件名和扩展名</span></span><br><span class=\"line\">    dir_path, file_name = os.path.split(file_path)</span><br><span class=\"line\">    name, ext = os.path.splitext(file_name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 在文件名前加上 &quot;color_schema_&quot; 前缀</span></span><br><span class=\"line\">    new_name = <span class=\"string\">&quot;color_schema_&quot;</span> + name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 重新拼接路径、文件名和扩展名</span></span><br><span class=\"line\">    new_path = os.path.join(dir_path, new_name + ext)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> new_path</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    get_color_schema(<span class=\"string\">&#x27;img/img1.png&#x27;</span>)</span><br><span class=\"line\">    get_color_schema(<span class=\"string\">&#x27;img/img2.png&#x27;</span>)</span><br><span class=\"line\">    get_color_schema(<span class=\"string\">&#x27;img/img3.png&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>除去注释，核心代码大概在 40 行左右，整个类库使用非常方便。通过这篇文章的分享，相信大家对于 Haishoku 工具有了更深入的了解，并且也可以从中学到一些有用的编程技巧和实践经验</p>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<blockquote>\n<p><a href=\"https://github.com/LanceGin/haishoku/blob/master/docs/document_zh.md\">Haishoku Github中文文档</a></p>\n</blockquote>\n","categories":[{"name":"技术","path":"api/categories/技术.json"},{"name":"Python","path":"api/categories/Python.json"}],"tags":[{"name":"技术","path":"api/tags/技术.json"},{"name":"Python","path":"api/tags/Python.json"},{"name":"Haishoku","path":"api/tags/Haishoku.json"},{"name":"配色方案","path":"api/tags/配色方案.json"}]}