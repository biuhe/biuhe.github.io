{"title":"「Python」Python将PDF转Word","slug":"技术/python/「Python」Python将PDF转Word","date":"2023-02-05T09:01:27.000Z","updated":"2023-04-03T15:14:15.551Z","comments":true,"path":"api/articles/技术/python/「Python」Python将PDF转Word.json","excerpt":null,"covers":null,"content":"<h2 id=\"背景\"><a class=\"markdownIt-Anchor\" href=\"#背景\"></a> 背景</h2>\n<p>PDF 作为一种电子文档，对于阅读和查看是很方便的，但先要编辑却很麻烦。因此将 PDF 转换为可编辑的 Word 文档就变得尤为重要。</p>\n<p>通过 Python 的 PDF2Docx 可以比较轻松的做到这点。具体的思路是通过文档元素和内容解析：</p>\n<ul>\n<li>基于 <code>PyMuPDF</code> 提取文本、图片、矢量等原始数据</li>\n<li>基于规则解析章节、段落、表格、图片、文本等布局及样式</li>\n<li>基于 <code>python-docx</code> 创建Word文档</li>\n</ul>\n<p>当然也有基于机器学习/计算机视觉方法训练模型（尤其是针对扫描的PDF文档）的，在这里暂不扩展。</p>\n<h2 id=\"特点\"><a class=\"markdownIt-Anchor\" href=\"#特点\"></a> 特点</h2>\n<ol>\n<li>简单易用：PDF2DOCX 库提供了简洁明了的函数和接口，方便用户快速上手。</li>\n<li>快速高效：该库采用高效的算法和技术，实现了在较短时间内完成 PDF 到 DOCX 的转换。</li>\n<li>无损转换：在保持文件结构和布局完整的同时，将 PDF 转换为 DOCX，尽量减少转换过程中可能出现的失真或遗漏。</li>\n<li>跨平台：支持 Windows，Mac 和 Linux 等多种操作系统，为用户提供全方位的支持。</li>\n</ol>\n<h2 id=\"限制\"><a class=\"markdownIt-Anchor\" href=\"#限制\"></a> 限制</h2>\n<ul>\n<li>目前暂不支持扫描PDF文字识别</li>\n<li>仅支持从左向右书写的语言（因此不支持阿拉伯语）</li>\n<li>不支持旋转的文字</li>\n<li>基于规则的解析无法保证100%还原PDF样式</li>\n</ul>\n<h2 id=\"使用方法\"><a class=\"markdownIt-Anchor\" href=\"#使用方法\"></a> 使用方法</h2>\n<ol>\n<li>安装依赖项：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pdf2docx</span><br></pre></td></tr></table></figure>\n<ol>\n<li>转换 PDF 到 DOCX</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pdf2docx <span class=\"keyword\">import</span> Converter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建转换器对象</span></span><br><span class=\"line\">converter = Converter(<span class=\"string\">&#x27;path/to/input.pdf&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转换 PDF 到 DOCX</span></span><br><span class=\"line\">converter.convert(<span class=\"string\">&#x27;path/to/output.docx&#x27;</span>, start=<span class=\"number\">1</span>, end=<span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭转换器</span></span><br><span class=\"line\">converter.close()</span><br></pre></td></tr></table></figure>\n<p>其中，<code>start</code> 和 <code>end</code> 参数可以用于指定转换的开始和结束页码，默认为全部转换。</p>\n<p>注意：由于PDF文档中的元素位置可能会因为解析引擎不同而有所偏差，因此建议在导出Word文档后再进行必要的手动调整。</p>\n<p>除了基本的转换功能之外，<code>pdf2docx</code> 还提供了一些其他的功能来方便用户进行更高级的操作。</p>\n<h3 id=\"解析-pdf-内容\"><a class=\"markdownIt-Anchor\" href=\"#解析-pdf-内容\"></a> 解析 PDF 内容</h3>\n<p><code>pdf2docx</code> 可以将 PDF 中的不同元素（如文本、表格、图片）解析为 Python 对象，以便进一步分析和处理。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pythonCopy Codefrom pdf2docx <span class=\"keyword\">import</span> Parser</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建解析器对象</span></span><br><span class=\"line\">parser = Parser(<span class=\"string\">&#x27;path/to/input.pdf&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解析 PDF 内容</span></span><br><span class=\"line\">pages = parser.parse()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历每一页的内容</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> page <span class=\"keyword\">in</span> pages:</span><br><span class=\"line\">    <span class=\"comment\"># 遍历页面中的所有元素</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> page.elements:</span><br><span class=\"line\">        <span class=\"comment\"># 处理元素</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭解析器</span></span><br><span class=\"line\">parser.close()</span><br></pre></td></tr></table></figure>\n<p>其中，<code>pages</code> 是一个包含所有页面对象的列表，每个页面对象都包含了该页面中所有的元素。</p>\n<p>每个元素可以是以下类型之一：</p>\n<ul>\n<li><code>TextElement</code>: 表示纯文本。</li>\n<li><code>ImageElement</code>: 表示图片。</li>\n<li><code>TableElement</code>: 表示表格。</li>\n</ul>\n<p>每个元素都具有一些属性，例如位置、大小、样式等，可以用于进一步处理。</p>\n<h3 id=\"自定义样式\"><a class=\"markdownIt-Anchor\" href=\"#自定义样式\"></a> 自定义样式</h3>\n<p>用户可以通过创建自定义样式对象来修改生成的 Word 文档的样式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pythonCopy Codefrom pdf2docx.styles import ParagraphStyle, RunStyle</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建段落样式</span><br><span class=\"line\">my_para_style = ParagraphStyle(&#x27;MyParaStyle&#x27;)</span><br><span class=\"line\">my_para_style.font.name = &#x27;Calibri&#x27;</span><br><span class=\"line\">my_para_style.font.size = 12</span><br><span class=\"line\">my_para_style.font.bold = True</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建文本样式</span><br><span class=\"line\">my_run_style = RunStyle(&#x27;MyRunStyle&#x27;)</span><br><span class=\"line\">my_run_style.font.color.rgb = (255, 0, 0)</span><br><span class=\"line\"></span><br><span class=\"line\"># 在段落样式中使用文本样式</span><br><span class=\"line\">my_para_style.run_style = my_run_style</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用自定义样式进行转换</span><br><span class=\"line\">converter = Converter(&#x27;path/to/input.pdf&#x27;, para_style=my_para_style)</span><br><span class=\"line\">converter.convert(&#x27;path/to/output.docx&#x27;)</span><br><span class=\"line\">converter.close()</span><br></pre></td></tr></table></figure>\n<p>在上面的示例中，创建了一个名为 <code>MyParaStyle</code> 的自定义段落样式，并将字体设置为 Calibri、字号设置为 12、加粗。然后又创建了一个名为 <code>MyRunStyle</code> 的自定义文本样式，并将字体颜色设置为红色。最后，在段落样式中使用了该文本样式。</p>\n<p>当转换 PDF 到 DOCX 时，指定了 <code>para_style=my_para_style</code> 参数，即使用了上述创建的自定义样式。</p>\n<h3 id=\"多进程转换\"><a class=\"markdownIt-Anchor\" href=\"#多进程转换\"></a> 多进程转换</h3>\n<p><code>pdf2docx</code> 支持多进程转换，可以提高转换速度。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pythonCopy Codefrom pdf2docx import MultiConverter</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建多进程转换器对象</span><br><span class=\"line\">mconverter = MultiConverter(&#x27;path/to/input.pdf&#x27;, num_processes=4)</span><br><span class=\"line\"></span><br><span class=\"line\"># 转换 PDF 到 DOCX</span><br><span class=\"line\">mconverter.convert(&#x27;path/to/output.docx&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 关闭转换器</span><br><span class=\"line\">mconverter.close()</span><br></pre></td></tr></table></figure>\n<p>在上面的示例中，创建了一个名为 <code>MultiConverter</code> 的多进程转换器对象，并将 <code>num_processes</code> 参数设置为 4，表示同时使用 4 个进程进行转换。</p>\n<p>注意：使用多进程转换时，请确保您的计算机具有足够的 CPU 和内存资源，以避免出现不必要的问题。</p>\n<h2 id=\"实际运用\"><a class=\"markdownIt-Anchor\" href=\"#实际运用\"></a> 实际运用</h2>\n<p>下面是一段使用第三方库pdf2docx实现pdf转docx的代码。</p>\n<p>该代码将pdf文件「英语4000单词本.pdf」转换成docx文件 wordBook.docx</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pdf2docx <span class=\"keyword\">import</span> Converter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装类库 pip install pdf2docx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># DPF文件路径</span></span><br><span class=\"line\">pdf_file = <span class=\"string\">&#x27;英语4000单词本.pdf&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 输出Docx文件路径</span></span><br><span class=\"line\">docx_file = <span class=\"string\">&#x27;wordBook.docx&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 实例化</span></span><br><span class=\"line\">cv = Converter(pdf_file)</span><br><span class=\"line\"><span class=\"comment\"># 执行转换</span></span><br><span class=\"line\">cv.convert(docx_file, start=<span class=\"number\">0</span>, end=<span class=\"literal\">None</span>, multiprocessing=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"comment\"># 关闭</span></span><br><span class=\"line\">cv.close()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>convert 函数的 start 和 end 参数代表需要转换的pdf页数的起始和结束位置，也可以通过<code>pages</code>指定不连续的页面，例如<code>pages=[1,3,5]</code>。</li>\n<li>multiprocessing 参数代表是否启用多进程进行转换，如果设置为True则会使用多个进程进行转换</li>\n</ul>\n<p>通过上面 5 行代码我们就可以进行将PDF转换为WORD文件了，也可以直接通过命令行来执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pdf2docx convert 批地艾抚.pdf 沃的.docx</span><br></pre></td></tr></table></figure>\n<p>同理可以通过<code>--start</code>、<code>--end</code>或者<code>--pages</code>指定页面范围。</p>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/sinat_15136141/article/details/113620116\">pdf2docx：Python实现PDF转Word</a></p>\n</blockquote>\n","more":"<h2 id=\"背景\"><a class=\"markdownIt-Anchor\" href=\"#背景\"></a> 背景</h2>\n<p>PDF 作为一种电子文档，对于阅读和查看是很方便的，但先要编辑却很麻烦。因此将 PDF 转换为可编辑的 Word 文档就变得尤为重要。</p>\n<p>通过 Python 的 PDF2Docx 可以比较轻松的做到这点。具体的思路是通过文档元素和内容解析：</p>\n<ul>\n<li>基于 <code>PyMuPDF</code> 提取文本、图片、矢量等原始数据</li>\n<li>基于规则解析章节、段落、表格、图片、文本等布局及样式</li>\n<li>基于 <code>python-docx</code> 创建Word文档</li>\n</ul>\n<p>当然也有基于机器学习/计算机视觉方法训练模型（尤其是针对扫描的PDF文档）的，在这里暂不扩展。</p>\n<h2 id=\"特点\"><a class=\"markdownIt-Anchor\" href=\"#特点\"></a> 特点</h2>\n<ol>\n<li>简单易用：PDF2DOCX 库提供了简洁明了的函数和接口，方便用户快速上手。</li>\n<li>快速高效：该库采用高效的算法和技术，实现了在较短时间内完成 PDF 到 DOCX 的转换。</li>\n<li>无损转换：在保持文件结构和布局完整的同时，将 PDF 转换为 DOCX，尽量减少转换过程中可能出现的失真或遗漏。</li>\n<li>跨平台：支持 Windows，Mac 和 Linux 等多种操作系统，为用户提供全方位的支持。</li>\n</ol>\n<h2 id=\"限制\"><a class=\"markdownIt-Anchor\" href=\"#限制\"></a> 限制</h2>\n<ul>\n<li>目前暂不支持扫描PDF文字识别</li>\n<li>仅支持从左向右书写的语言（因此不支持阿拉伯语）</li>\n<li>不支持旋转的文字</li>\n<li>基于规则的解析无法保证100%还原PDF样式</li>\n</ul>\n<h2 id=\"使用方法\"><a class=\"markdownIt-Anchor\" href=\"#使用方法\"></a> 使用方法</h2>\n<ol>\n<li>安装依赖项：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pdf2docx</span><br></pre></td></tr></table></figure>\n<ol>\n<li>转换 PDF 到 DOCX</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pdf2docx <span class=\"keyword\">import</span> Converter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建转换器对象</span></span><br><span class=\"line\">converter = Converter(<span class=\"string\">&#x27;path/to/input.pdf&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转换 PDF 到 DOCX</span></span><br><span class=\"line\">converter.convert(<span class=\"string\">&#x27;path/to/output.docx&#x27;</span>, start=<span class=\"number\">1</span>, end=<span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭转换器</span></span><br><span class=\"line\">converter.close()</span><br></pre></td></tr></table></figure>\n<p>其中，<code>start</code> 和 <code>end</code> 参数可以用于指定转换的开始和结束页码，默认为全部转换。</p>\n<p>注意：由于PDF文档中的元素位置可能会因为解析引擎不同而有所偏差，因此建议在导出Word文档后再进行必要的手动调整。</p>\n<p>除了基本的转换功能之外，<code>pdf2docx</code> 还提供了一些其他的功能来方便用户进行更高级的操作。</p>\n<h3 id=\"解析-pdf-内容\"><a class=\"markdownIt-Anchor\" href=\"#解析-pdf-内容\"></a> 解析 PDF 内容</h3>\n<p><code>pdf2docx</code> 可以将 PDF 中的不同元素（如文本、表格、图片）解析为 Python 对象，以便进一步分析和处理。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pythonCopy Codefrom pdf2docx <span class=\"keyword\">import</span> Parser</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建解析器对象</span></span><br><span class=\"line\">parser = Parser(<span class=\"string\">&#x27;path/to/input.pdf&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解析 PDF 内容</span></span><br><span class=\"line\">pages = parser.parse()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历每一页的内容</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> page <span class=\"keyword\">in</span> pages:</span><br><span class=\"line\">    <span class=\"comment\"># 遍历页面中的所有元素</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> page.elements:</span><br><span class=\"line\">        <span class=\"comment\"># 处理元素</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭解析器</span></span><br><span class=\"line\">parser.close()</span><br></pre></td></tr></table></figure>\n<p>其中，<code>pages</code> 是一个包含所有页面对象的列表，每个页面对象都包含了该页面中所有的元素。</p>\n<p>每个元素可以是以下类型之一：</p>\n<ul>\n<li><code>TextElement</code>: 表示纯文本。</li>\n<li><code>ImageElement</code>: 表示图片。</li>\n<li><code>TableElement</code>: 表示表格。</li>\n</ul>\n<p>每个元素都具有一些属性，例如位置、大小、样式等，可以用于进一步处理。</p>\n<h3 id=\"自定义样式\"><a class=\"markdownIt-Anchor\" href=\"#自定义样式\"></a> 自定义样式</h3>\n<p>用户可以通过创建自定义样式对象来修改生成的 Word 文档的样式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pythonCopy Codefrom pdf2docx.styles import ParagraphStyle, RunStyle</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建段落样式</span><br><span class=\"line\">my_para_style = ParagraphStyle(&#x27;MyParaStyle&#x27;)</span><br><span class=\"line\">my_para_style.font.name = &#x27;Calibri&#x27;</span><br><span class=\"line\">my_para_style.font.size = 12</span><br><span class=\"line\">my_para_style.font.bold = True</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建文本样式</span><br><span class=\"line\">my_run_style = RunStyle(&#x27;MyRunStyle&#x27;)</span><br><span class=\"line\">my_run_style.font.color.rgb = (255, 0, 0)</span><br><span class=\"line\"></span><br><span class=\"line\"># 在段落样式中使用文本样式</span><br><span class=\"line\">my_para_style.run_style = my_run_style</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用自定义样式进行转换</span><br><span class=\"line\">converter = Converter(&#x27;path/to/input.pdf&#x27;, para_style=my_para_style)</span><br><span class=\"line\">converter.convert(&#x27;path/to/output.docx&#x27;)</span><br><span class=\"line\">converter.close()</span><br></pre></td></tr></table></figure>\n<p>在上面的示例中，创建了一个名为 <code>MyParaStyle</code> 的自定义段落样式，并将字体设置为 Calibri、字号设置为 12、加粗。然后又创建了一个名为 <code>MyRunStyle</code> 的自定义文本样式，并将字体颜色设置为红色。最后，在段落样式中使用了该文本样式。</p>\n<p>当转换 PDF 到 DOCX 时，指定了 <code>para_style=my_para_style</code> 参数，即使用了上述创建的自定义样式。</p>\n<h3 id=\"多进程转换\"><a class=\"markdownIt-Anchor\" href=\"#多进程转换\"></a> 多进程转换</h3>\n<p><code>pdf2docx</code> 支持多进程转换，可以提高转换速度。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pythonCopy Codefrom pdf2docx import MultiConverter</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建多进程转换器对象</span><br><span class=\"line\">mconverter = MultiConverter(&#x27;path/to/input.pdf&#x27;, num_processes=4)</span><br><span class=\"line\"></span><br><span class=\"line\"># 转换 PDF 到 DOCX</span><br><span class=\"line\">mconverter.convert(&#x27;path/to/output.docx&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 关闭转换器</span><br><span class=\"line\">mconverter.close()</span><br></pre></td></tr></table></figure>\n<p>在上面的示例中，创建了一个名为 <code>MultiConverter</code> 的多进程转换器对象，并将 <code>num_processes</code> 参数设置为 4，表示同时使用 4 个进程进行转换。</p>\n<p>注意：使用多进程转换时，请确保您的计算机具有足够的 CPU 和内存资源，以避免出现不必要的问题。</p>\n<h2 id=\"实际运用\"><a class=\"markdownIt-Anchor\" href=\"#实际运用\"></a> 实际运用</h2>\n<p>下面是一段使用第三方库pdf2docx实现pdf转docx的代码。</p>\n<p>该代码将pdf文件「英语4000单词本.pdf」转换成docx文件 wordBook.docx</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pdf2docx <span class=\"keyword\">import</span> Converter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装类库 pip install pdf2docx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># DPF文件路径</span></span><br><span class=\"line\">pdf_file = <span class=\"string\">&#x27;英语4000单词本.pdf&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 输出Docx文件路径</span></span><br><span class=\"line\">docx_file = <span class=\"string\">&#x27;wordBook.docx&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 实例化</span></span><br><span class=\"line\">cv = Converter(pdf_file)</span><br><span class=\"line\"><span class=\"comment\"># 执行转换</span></span><br><span class=\"line\">cv.convert(docx_file, start=<span class=\"number\">0</span>, end=<span class=\"literal\">None</span>, multiprocessing=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"comment\"># 关闭</span></span><br><span class=\"line\">cv.close()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>convert 函数的 start 和 end 参数代表需要转换的pdf页数的起始和结束位置，也可以通过<code>pages</code>指定不连续的页面，例如<code>pages=[1,3,5]</code>。</li>\n<li>multiprocessing 参数代表是否启用多进程进行转换，如果设置为True则会使用多个进程进行转换</li>\n</ul>\n<p>通过上面 5 行代码我们就可以进行将PDF转换为WORD文件了，也可以直接通过命令行来执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pdf2docx convert 批地艾抚.pdf 沃的.docx</span><br></pre></td></tr></table></figure>\n<p>同理可以通过<code>--start</code>、<code>--end</code>或者<code>--pages</code>指定页面范围。</p>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/sinat_15136141/article/details/113620116\">pdf2docx：Python实现PDF转Word</a></p>\n</blockquote>\n","categories":[{"name":"技术","path":"api/categories/技术.json"},{"name":"Python","path":"api/categories/Python.json"}],"tags":[{"name":"技术","path":"api/tags/技术.json"},{"name":"Python","path":"api/tags/Python.json"},{"name":"Word","path":"api/tags/Word.json"}]}