{"title":"「Python」Python基于OpenCV实现图片中人脸识别","slug":"技术/python/「Python」Python基于OpenCV实现图片中人脸识别","date":"2023-06-11T14:20:48.000Z","updated":"2023-06-27T07:56:12.523Z","comments":true,"path":"api/articles/技术/python/「Python」Python基于OpenCV实现图片中人脸识别.json","excerpt":null,"covers":null,"content":"<h2 id=\"背景\"><a class=\"markdownIt-Anchor\" href=\"#背景\"></a> 背景</h2>\n<p>最近在和一家科技设计公司合作，需要从大量图片中挑选出含有人物的图片。因此考虑使用 OpenCV 进行人脸识别，有检测到人脸的图片再进额外的处理</p>\n<h2 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\"></a> 介绍</h2>\n<p>OpenCV是一个跨平台的计算机视觉库，支持Windows、Linux、macOS等操作系统。它提供了丰富的接口和函数，包括图像处理、计算机视觉、模式识别、机器学习等领域，可用于多种计算机视觉应用，如人脸识别、行人检测、运动跟踪、医学图像处理、目标识别等。</p>\n<p>Github仓库：<a href=\"https://github.com/opencv/opencv\">https://github.com/opencv/opencv</a></p>\n<h3 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install opencv-python</span><br></pre></td></tr></table></figure>\n<p>安装完成后，我们就可以开始使用OpenCV在Python中实现各种计算机视觉任务了。</p>\n<h2 id=\"图像处理\"><a class=\"markdownIt-Anchor\" href=\"#图像处理\"></a> 图像处理</h2>\n<p>使用OpenCV读取和显示图像</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取图像</span></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">&#x27;image.jpg&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示图像。接受两个参数：窗口名称（在这里是&quot;Image&quot;）和要显示的图像。</span></span><br><span class=\"line\">cv2.imshow(<span class=\"string\">&#x27;Image&#x27;</span>, img)</span><br><span class=\"line\"><span class=\"comment\"># 等待按键输入的函数。它会暂停程序执行，直到用户按下任意键。括号中的参数0表示无限等待用户的键盘输入。</span></span><br><span class=\"line\">cv2.waitKey(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\"># 销毁所有创建的窗口的函数，会关闭显示图像的窗口。</span></span><br><span class=\"line\">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>\n<p>除了读取和显示图像外，OpenCV还提供了许多其他图像处理功能，如调整大小、旋转、裁剪、灰度化、边缘检测、过滤器、形态学运算等。</p>\n<p>例如，下面的代码实现了将图像缩小一半，并进行灰度化和Canny边缘检测：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取图像</span></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">&#x27;image.jpg&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 缩小图像。将图像缩小到原来尺寸的50%。这里通过设置fx=0.5和fy=0.5来实现等比例缩小。</span></span><br><span class=\"line\">resized_img = cv2.resize(img, (<span class=\"number\">0</span>, <span class=\"number\">0</span>), fx=<span class=\"number\">0.5</span>, fy=<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 灰度化图像，将缩小后的彩色图像转换为灰度图像。这里使用cv2.COLOR_BGR2GRAY参数表示从BGR颜色空间转换为灰度颜色空间。</span></span><br><span class=\"line\">gray = cv2.cvtColor(resized_img, cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用Canny边缘检测算法，对灰度图像进行边缘检测。参数100和200分别表示边缘梯度的阈值</span></span><br><span class=\"line\">edges = cv2.Canny(gray, <span class=\"number\">100</span>, <span class=\"number\">200</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示边缘检测结果</span></span><br><span class=\"line\">cv2.imshow(<span class=\"string\">&#x27;Edges&#x27;</span>, edges)</span><br><span class=\"line\">cv2.waitKey(<span class=\"number\">0</span>)</span><br><span class=\"line\">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>\n<h2 id=\"人脸检测\"><a class=\"markdownIt-Anchor\" href=\"#人脸检测\"></a> 人脸检测</h2>\n<p>OpenCV提供了多种方法来实现人脸检测，其中一种常用的方法是使用Haar 特征 （Haar-like Features） Cascade分类器。下面的代码演示了如何使用OpenCV在Python中实现人脸检测：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加载Haar Cascade分类器模型</span></span><br><span class=\"line\">face_cascade = cv2.CascadeClassifier(<span class=\"string\">&#x27;haarcascade_frontalface_default.xml&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取图像</span></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">&#x27;image.jpg&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将图像转换为灰度图像</span></span><br><span class=\"line\">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用Haar Cascade分类器检测人脸</span></span><br><span class=\"line\">faces = face_cascade.detectMultiScale(gray, scaleFactor=<span class=\"number\">1.1</span>, minNeighbors=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在原始图像中绘制人脸框</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (x, y, w, h) <span class=\"keyword\">in</span> faces:</span><br><span class=\"line\">    cv2.rectangle(img, (x, y), (x+w, y+h), (<span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示图像</span></span><br><span class=\"line\">cv2.imshow(<span class=\"string\">&#x27;Faces&#x27;</span>, img)</span><br><span class=\"line\">cv2.waitKey(<span class=\"number\">0</span>)</span><br><span class=\"line\">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>\n<p>这个分类器模型可以在</p>\n<p>OpenCV 的 Github 仓库中的 data/haarcascades 目录中找到并且下载 <a href=\"https://github.com/opencv/opencv/tree/4.x/data/haarcascades\">opencv/data/haarcascades</a></p>\n<p>可以看到有</p>\n<ul>\n<li>\n<p>haarcascade_frontalface _default.xml  人脸检测级联分类器的默认模型。它对于一般情况下的人脸检测具有较好的效果，但在某些复杂场景下可能会有一些限制。</p>\n</li>\n<li>\n<p>haarcascade_frontalface_alt.xml 用于检测正面人脸。它在一般情况下具有较好的检测性能，并且速度相对较快。</p>\n</li>\n<li>\n<p>haarcascade_ frontalface_alt2.xml alt 的改进版本，对于一些复杂场景或具有不同角度的人脸也能进行较好的检测。</p>\n</li>\n<li>\n<p>haarcascade_ frontalface_alt_tree.xml 在 alt 的基础上使用了更复杂的级联结构，提高了人脸检测的准确性和鲁棒性。它通常对于复杂背景和表情变化较大的人脸具有更好的效果，但相应的检测速度可能会稍慢一些。</p>\n</li>\n</ul>\n<p>通常我们使用 alt2 就可以取得很好的效果</p>\n<h2 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\"></a> 使用</h2>\n<p>我们可以看到 <code>detectMultiScale</code> 函数中有需要传入 <code>scaleFactor</code> 和 <code>minNeighbors</code> 参数。</p>\n<p><code>scaleFactor</code> 用于指定在图像金字塔中采用多大的步长搜索人脸。它的值越小，搜索所花费的时间和检测精度都会增加。一般情况下，值在 1.01 到 1.5 之间逐步增加可以获得比较理想的效果。</p>\n<p><code>minNeighbors</code> 是指人脸矩形相邻两个矩形之间的最小有效距离，也就是当检测到一个人脸时，如果该矩形周围有比它更小的矩形，则认为该矩形并非人脸矩形，会被过滤掉。这个参数的值越大，过滤掉的矩形就越多，同时漏检率也会增加，而值越小，检出的矩形较多，但误检率也会增加。一般情况下，建议在 3-6 之间取值。</p>\n<p>我们也可以通过跟踪当前检测到的人脸数量和大小与预期值之间的差距，然后根据差距来自动调整检测器的参数。例如，当检测到的人脸数量过少时，可以尝试减小 <code>minNeighbors</code> 参数或增加 <code>scaleFactor</code> 参数，以扩大检测范围；而当检测到的人脸数量过多时，则可以尝试增加 <code>minSize</code> 参数，以过滤掉小尺寸的误检测。</p>\n<p>动态调整参数可以使用反馈控制的方法。具体来说，可以根据当前检测到人脸的数量和大小与预期值之间的差距，自动调整检测器的参数，以达到更好的检测效果。</p>\n<p>下面是完整代码，请留意 while True 部分代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dynamic_face_detection</span>(<span class=\"params\">img_path, target_count=<span class=\"number\">1</span>, min_width=<span class=\"number\">50</span>, min_height=<span class=\"number\">50</span>, scale_factor=<span class=\"number\">1.1</span>, min_neighbors=<span class=\"number\">3</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    动态人脸检测函数</span></span><br><span class=\"line\"><span class=\"string\">    :param img_path: 输入图像的文件路径</span></span><br><span class=\"line\"><span class=\"string\">    :param target_count: 目标检测到的人脸数量，默认为4</span></span><br><span class=\"line\"><span class=\"string\">    :param min_width: 最小人脸宽度，默认为50</span></span><br><span class=\"line\"><span class=\"string\">    :param min_height: 最小人脸高度，默认为50</span></span><br><span class=\"line\"><span class=\"string\">    :param scale_factor: 窗口缩放比例因子，默认为1.1</span></span><br><span class=\"line\"><span class=\"string\">    :param min_neighbors: 每个候选矩形应该保留的邻居数，默认为3</span></span><br><span class=\"line\"><span class=\"string\">    :return: faces_vertices 检测到的人脸顶点坐标数组，格式为[((x1, y1), (x2, y2), (x3, y3), (x4, y4)), ...]</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 读取输入图像</span></span><br><span class=\"line\">    img = cv2.imread(img_path)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 转换为灰度图像</span></span><br><span class=\"line\">    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 初始化人脸检测器</span></span><br><span class=\"line\">    face_cascade = cv2.CascadeClassifier(<span class=\"string\">&#x27;./models/cv/haarcascades/haarcascade_frontalface_alt2.xml&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 初始化参数</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 调用人脸检测器</span></span><br><span class=\"line\">        faces = face_cascade.detectMultiScale(gray, scaleFactor=scale_factor, minNeighbors=min_neighbors, minSize=(min_width, min_height))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 检测到目标数量，终止算法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(faces) == target_count:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 计算当前平均人脸大小</span></span><br><span class=\"line\">        total_width = <span class=\"built_in\">sum</span>([f[<span class=\"number\">2</span>] <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> faces])</span><br><span class=\"line\">        total_height = <span class=\"built_in\">sum</span>([f[<span class=\"number\">3</span>] <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> faces])</span><br><span class=\"line\">        avg_width = total_width / <span class=\"built_in\">len</span>(faces)</span><br><span class=\"line\">        avg_height = total_height / <span class=\"built_in\">len</span>(faces)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 针对检测结果进行参数调整</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(faces) &lt; target_count:</span><br><span class=\"line\">            <span class=\"comment\"># 当检测到人脸数量过少时，减小 min_neighbors 或者增加 scaleFactor</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> min_neighbors &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">                min_neighbors -= <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                scale_factor += <span class=\"number\">0.1</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">len</span>(faces) &gt; target_count:</span><br><span class=\"line\">            <span class=\"comment\"># 当检测到人脸数量过多时，增加 min_width 或者 min_height</span></span><br><span class=\"line\">            min_width = <span class=\"built_in\">int</span>(avg_width * <span class=\"number\">1.1</span>)</span><br><span class=\"line\">            min_height = <span class=\"built_in\">int</span>(avg_height * <span class=\"number\">1.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 避免参数过大或过小</span></span><br><span class=\"line\">        scale_factor = <span class=\"built_in\">max</span>(<span class=\"number\">1</span>, <span class=\"built_in\">min</span>(scale_factor, <span class=\"number\">2</span>))</span><br><span class=\"line\">        min_neighbors = <span class=\"built_in\">max</span>(<span class=\"number\">1</span>, <span class=\"built_in\">min</span>(min_neighbors, <span class=\"number\">10</span>))</span><br><span class=\"line\">        min_width = <span class=\"built_in\">max</span>(<span class=\"number\">20</span>, <span class=\"built_in\">min</span>(min_width, <span class=\"number\">200</span>))</span><br><span class=\"line\">        min_height = <span class=\"built_in\">max</span>(<span class=\"number\">20</span>, <span class=\"built_in\">min</span>(min_height, <span class=\"number\">200</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    faces_vertices = []</span><br><span class=\"line\">    <span class=\"comment\"># 在图像中绘制检测到的人脸矩形</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (x, y, w, h) <span class=\"keyword\">in</span> faces:</span><br><span class=\"line\">        <span class=\"comment\"># 绘制人脸矩形</span></span><br><span class=\"line\">        cv2.rectangle(img, (x, y), (x + w, y + h), (<span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 绘制顶点像素位置</span></span><br><span class=\"line\">        <span class=\"comment\"># 第一个参数是输入图像，第二个参数是要添加的文本，第三个参数是文本要显示的位置，第四个参数是字体，第五个参数是字体大小，第六个参数是颜色，第七个参数是文本厚度</span></span><br><span class=\"line\">        cv2.putText(img, <span class=\"string\">f&quot;(<span class=\"subst\">&#123;x&#125;</span>, <span class=\"subst\">&#123;y&#125;</span>)&quot;</span>, (x, y - <span class=\"number\">10</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class=\"number\">1.5</span>, (<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>), <span class=\"number\">2</span>)</span><br><span class=\"line\">        cv2.putText(img, <span class=\"string\">f&quot;(<span class=\"subst\">&#123;x + w&#125;</span>, <span class=\"subst\">&#123;y&#125;</span>)&quot;</span>, (x + w, y - <span class=\"number\">10</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class=\"number\">1.5</span>, (<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>), <span class=\"number\">2</span>)</span><br><span class=\"line\">        cv2.putText(img, <span class=\"string\">f&quot;(<span class=\"subst\">&#123;x&#125;</span>, <span class=\"subst\">&#123;y + h&#125;</span>)&quot;</span>, (x, y + h + <span class=\"number\">40</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class=\"number\">1.5</span>, (<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>), <span class=\"number\">2</span>)</span><br><span class=\"line\">        cv2.putText(img, <span class=\"string\">f&quot;(<span class=\"subst\">&#123;x + w&#125;</span>, <span class=\"subst\">&#123;y + h&#125;</span>)&quot;</span>, (x + w, y + h + <span class=\"number\">40</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class=\"number\">1.5</span>, (<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>), <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 添加顶点到数组中</span></span><br><span class=\"line\">        top_left = (x, y)</span><br><span class=\"line\">        top_right = (x + w, y)</span><br><span class=\"line\">        bottom_right = (x + w, y + h)</span><br><span class=\"line\">        bottom_left = (x, y + h)</span><br><span class=\"line\">        vertices = (top_left, top_right, bottom_right, bottom_left)</span><br><span class=\"line\">        faces_vertices.append(vertices)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 预览检测结果</span></span><br><span class=\"line\">    cv2.imshow(<span class=\"string\">&#x27;Dynamic Face Detection&#x27;</span>, img)</span><br><span class=\"line\">    cv2.waitKey(<span class=\"number\">0</span>)</span><br><span class=\"line\">    cv2.destroyAllWindows()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 返回检测到的人脸顶点坐标数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> faces_vertices</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;./img/img2.png&#x27;</span></span><br><span class=\"line\">    dynamic_face_detection(url)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<p>通过本文，我们了解了OpenCV的功能及应用领域、如何在Python中使用OpenCV实现图像处理和人脸检测等计算机视觉任务。OpenCV还支持多种其他计算机视觉操作，例如目标跟踪、形态学运算、特征提取和机器学习等。</p>\n<p>需要注意的是，在实际使用过程中，应根据具体要求和数据集选用不同的算法和模型，并对其进行调优和优化，以充分发挥OpenCV的性能和应用优势。</p>\n","more":"<h2 id=\"背景\"><a class=\"markdownIt-Anchor\" href=\"#背景\"></a> 背景</h2>\n<p>最近在和一家科技设计公司合作，需要从大量图片中挑选出含有人物的图片。因此考虑使用 OpenCV 进行人脸识别，有检测到人脸的图片再进额外的处理</p>\n<h2 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\"></a> 介绍</h2>\n<p>OpenCV是一个跨平台的计算机视觉库，支持Windows、Linux、macOS等操作系统。它提供了丰富的接口和函数，包括图像处理、计算机视觉、模式识别、机器学习等领域，可用于多种计算机视觉应用，如人脸识别、行人检测、运动跟踪、医学图像处理、目标识别等。</p>\n<p>Github仓库：<a href=\"https://github.com/opencv/opencv\">https://github.com/opencv/opencv</a></p>\n<h3 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install opencv-python</span><br></pre></td></tr></table></figure>\n<p>安装完成后，我们就可以开始使用OpenCV在Python中实现各种计算机视觉任务了。</p>\n<h2 id=\"图像处理\"><a class=\"markdownIt-Anchor\" href=\"#图像处理\"></a> 图像处理</h2>\n<p>使用OpenCV读取和显示图像</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取图像</span></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">&#x27;image.jpg&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示图像。接受两个参数：窗口名称（在这里是&quot;Image&quot;）和要显示的图像。</span></span><br><span class=\"line\">cv2.imshow(<span class=\"string\">&#x27;Image&#x27;</span>, img)</span><br><span class=\"line\"><span class=\"comment\"># 等待按键输入的函数。它会暂停程序执行，直到用户按下任意键。括号中的参数0表示无限等待用户的键盘输入。</span></span><br><span class=\"line\">cv2.waitKey(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\"># 销毁所有创建的窗口的函数，会关闭显示图像的窗口。</span></span><br><span class=\"line\">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>\n<p>除了读取和显示图像外，OpenCV还提供了许多其他图像处理功能，如调整大小、旋转、裁剪、灰度化、边缘检测、过滤器、形态学运算等。</p>\n<p>例如，下面的代码实现了将图像缩小一半，并进行灰度化和Canny边缘检测：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取图像</span></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">&#x27;image.jpg&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 缩小图像。将图像缩小到原来尺寸的50%。这里通过设置fx=0.5和fy=0.5来实现等比例缩小。</span></span><br><span class=\"line\">resized_img = cv2.resize(img, (<span class=\"number\">0</span>, <span class=\"number\">0</span>), fx=<span class=\"number\">0.5</span>, fy=<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 灰度化图像，将缩小后的彩色图像转换为灰度图像。这里使用cv2.COLOR_BGR2GRAY参数表示从BGR颜色空间转换为灰度颜色空间。</span></span><br><span class=\"line\">gray = cv2.cvtColor(resized_img, cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用Canny边缘检测算法，对灰度图像进行边缘检测。参数100和200分别表示边缘梯度的阈值</span></span><br><span class=\"line\">edges = cv2.Canny(gray, <span class=\"number\">100</span>, <span class=\"number\">200</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示边缘检测结果</span></span><br><span class=\"line\">cv2.imshow(<span class=\"string\">&#x27;Edges&#x27;</span>, edges)</span><br><span class=\"line\">cv2.waitKey(<span class=\"number\">0</span>)</span><br><span class=\"line\">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>\n<h2 id=\"人脸检测\"><a class=\"markdownIt-Anchor\" href=\"#人脸检测\"></a> 人脸检测</h2>\n<p>OpenCV提供了多种方法来实现人脸检测，其中一种常用的方法是使用Haar 特征 （Haar-like Features） Cascade分类器。下面的代码演示了如何使用OpenCV在Python中实现人脸检测：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加载Haar Cascade分类器模型</span></span><br><span class=\"line\">face_cascade = cv2.CascadeClassifier(<span class=\"string\">&#x27;haarcascade_frontalface_default.xml&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取图像</span></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">&#x27;image.jpg&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将图像转换为灰度图像</span></span><br><span class=\"line\">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用Haar Cascade分类器检测人脸</span></span><br><span class=\"line\">faces = face_cascade.detectMultiScale(gray, scaleFactor=<span class=\"number\">1.1</span>, minNeighbors=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在原始图像中绘制人脸框</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (x, y, w, h) <span class=\"keyword\">in</span> faces:</span><br><span class=\"line\">    cv2.rectangle(img, (x, y), (x+w, y+h), (<span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示图像</span></span><br><span class=\"line\">cv2.imshow(<span class=\"string\">&#x27;Faces&#x27;</span>, img)</span><br><span class=\"line\">cv2.waitKey(<span class=\"number\">0</span>)</span><br><span class=\"line\">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>\n<p>这个分类器模型可以在</p>\n<p>OpenCV 的 Github 仓库中的 data/haarcascades 目录中找到并且下载 <a href=\"https://github.com/opencv/opencv/tree/4.x/data/haarcascades\">opencv/data/haarcascades</a></p>\n<p>可以看到有</p>\n<ul>\n<li>\n<p>haarcascade_frontalface _default.xml  人脸检测级联分类器的默认模型。它对于一般情况下的人脸检测具有较好的效果，但在某些复杂场景下可能会有一些限制。</p>\n</li>\n<li>\n<p>haarcascade_frontalface_alt.xml 用于检测正面人脸。它在一般情况下具有较好的检测性能，并且速度相对较快。</p>\n</li>\n<li>\n<p>haarcascade_ frontalface_alt2.xml alt 的改进版本，对于一些复杂场景或具有不同角度的人脸也能进行较好的检测。</p>\n</li>\n<li>\n<p>haarcascade_ frontalface_alt_tree.xml 在 alt 的基础上使用了更复杂的级联结构，提高了人脸检测的准确性和鲁棒性。它通常对于复杂背景和表情变化较大的人脸具有更好的效果，但相应的检测速度可能会稍慢一些。</p>\n</li>\n</ul>\n<p>通常我们使用 alt2 就可以取得很好的效果</p>\n<h2 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\"></a> 使用</h2>\n<p>我们可以看到 <code>detectMultiScale</code> 函数中有需要传入 <code>scaleFactor</code> 和 <code>minNeighbors</code> 参数。</p>\n<p><code>scaleFactor</code> 用于指定在图像金字塔中采用多大的步长搜索人脸。它的值越小，搜索所花费的时间和检测精度都会增加。一般情况下，值在 1.01 到 1.5 之间逐步增加可以获得比较理想的效果。</p>\n<p><code>minNeighbors</code> 是指人脸矩形相邻两个矩形之间的最小有效距离，也就是当检测到一个人脸时，如果该矩形周围有比它更小的矩形，则认为该矩形并非人脸矩形，会被过滤掉。这个参数的值越大，过滤掉的矩形就越多，同时漏检率也会增加，而值越小，检出的矩形较多，但误检率也会增加。一般情况下，建议在 3-6 之间取值。</p>\n<p>我们也可以通过跟踪当前检测到的人脸数量和大小与预期值之间的差距，然后根据差距来自动调整检测器的参数。例如，当检测到的人脸数量过少时，可以尝试减小 <code>minNeighbors</code> 参数或增加 <code>scaleFactor</code> 参数，以扩大检测范围；而当检测到的人脸数量过多时，则可以尝试增加 <code>minSize</code> 参数，以过滤掉小尺寸的误检测。</p>\n<p>动态调整参数可以使用反馈控制的方法。具体来说，可以根据当前检测到人脸的数量和大小与预期值之间的差距，自动调整检测器的参数，以达到更好的检测效果。</p>\n<p>下面是完整代码，请留意 while True 部分代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dynamic_face_detection</span>(<span class=\"params\">img_path, target_count=<span class=\"number\">1</span>, min_width=<span class=\"number\">50</span>, min_height=<span class=\"number\">50</span>, scale_factor=<span class=\"number\">1.1</span>, min_neighbors=<span class=\"number\">3</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    动态人脸检测函数</span></span><br><span class=\"line\"><span class=\"string\">    :param img_path: 输入图像的文件路径</span></span><br><span class=\"line\"><span class=\"string\">    :param target_count: 目标检测到的人脸数量，默认为4</span></span><br><span class=\"line\"><span class=\"string\">    :param min_width: 最小人脸宽度，默认为50</span></span><br><span class=\"line\"><span class=\"string\">    :param min_height: 最小人脸高度，默认为50</span></span><br><span class=\"line\"><span class=\"string\">    :param scale_factor: 窗口缩放比例因子，默认为1.1</span></span><br><span class=\"line\"><span class=\"string\">    :param min_neighbors: 每个候选矩形应该保留的邻居数，默认为3</span></span><br><span class=\"line\"><span class=\"string\">    :return: faces_vertices 检测到的人脸顶点坐标数组，格式为[((x1, y1), (x2, y2), (x3, y3), (x4, y4)), ...]</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 读取输入图像</span></span><br><span class=\"line\">    img = cv2.imread(img_path)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 转换为灰度图像</span></span><br><span class=\"line\">    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 初始化人脸检测器</span></span><br><span class=\"line\">    face_cascade = cv2.CascadeClassifier(<span class=\"string\">&#x27;./models/cv/haarcascades/haarcascade_frontalface_alt2.xml&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 初始化参数</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 调用人脸检测器</span></span><br><span class=\"line\">        faces = face_cascade.detectMultiScale(gray, scaleFactor=scale_factor, minNeighbors=min_neighbors, minSize=(min_width, min_height))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 检测到目标数量，终止算法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(faces) == target_count:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 计算当前平均人脸大小</span></span><br><span class=\"line\">        total_width = <span class=\"built_in\">sum</span>([f[<span class=\"number\">2</span>] <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> faces])</span><br><span class=\"line\">        total_height = <span class=\"built_in\">sum</span>([f[<span class=\"number\">3</span>] <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> faces])</span><br><span class=\"line\">        avg_width = total_width / <span class=\"built_in\">len</span>(faces)</span><br><span class=\"line\">        avg_height = total_height / <span class=\"built_in\">len</span>(faces)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 针对检测结果进行参数调整</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(faces) &lt; target_count:</span><br><span class=\"line\">            <span class=\"comment\"># 当检测到人脸数量过少时，减小 min_neighbors 或者增加 scaleFactor</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> min_neighbors &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">                min_neighbors -= <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                scale_factor += <span class=\"number\">0.1</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">len</span>(faces) &gt; target_count:</span><br><span class=\"line\">            <span class=\"comment\"># 当检测到人脸数量过多时，增加 min_width 或者 min_height</span></span><br><span class=\"line\">            min_width = <span class=\"built_in\">int</span>(avg_width * <span class=\"number\">1.1</span>)</span><br><span class=\"line\">            min_height = <span class=\"built_in\">int</span>(avg_height * <span class=\"number\">1.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 避免参数过大或过小</span></span><br><span class=\"line\">        scale_factor = <span class=\"built_in\">max</span>(<span class=\"number\">1</span>, <span class=\"built_in\">min</span>(scale_factor, <span class=\"number\">2</span>))</span><br><span class=\"line\">        min_neighbors = <span class=\"built_in\">max</span>(<span class=\"number\">1</span>, <span class=\"built_in\">min</span>(min_neighbors, <span class=\"number\">10</span>))</span><br><span class=\"line\">        min_width = <span class=\"built_in\">max</span>(<span class=\"number\">20</span>, <span class=\"built_in\">min</span>(min_width, <span class=\"number\">200</span>))</span><br><span class=\"line\">        min_height = <span class=\"built_in\">max</span>(<span class=\"number\">20</span>, <span class=\"built_in\">min</span>(min_height, <span class=\"number\">200</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    faces_vertices = []</span><br><span class=\"line\">    <span class=\"comment\"># 在图像中绘制检测到的人脸矩形</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (x, y, w, h) <span class=\"keyword\">in</span> faces:</span><br><span class=\"line\">        <span class=\"comment\"># 绘制人脸矩形</span></span><br><span class=\"line\">        cv2.rectangle(img, (x, y), (x + w, y + h), (<span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 绘制顶点像素位置</span></span><br><span class=\"line\">        <span class=\"comment\"># 第一个参数是输入图像，第二个参数是要添加的文本，第三个参数是文本要显示的位置，第四个参数是字体，第五个参数是字体大小，第六个参数是颜色，第七个参数是文本厚度</span></span><br><span class=\"line\">        cv2.putText(img, <span class=\"string\">f&quot;(<span class=\"subst\">&#123;x&#125;</span>, <span class=\"subst\">&#123;y&#125;</span>)&quot;</span>, (x, y - <span class=\"number\">10</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class=\"number\">1.5</span>, (<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>), <span class=\"number\">2</span>)</span><br><span class=\"line\">        cv2.putText(img, <span class=\"string\">f&quot;(<span class=\"subst\">&#123;x + w&#125;</span>, <span class=\"subst\">&#123;y&#125;</span>)&quot;</span>, (x + w, y - <span class=\"number\">10</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class=\"number\">1.5</span>, (<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>), <span class=\"number\">2</span>)</span><br><span class=\"line\">        cv2.putText(img, <span class=\"string\">f&quot;(<span class=\"subst\">&#123;x&#125;</span>, <span class=\"subst\">&#123;y + h&#125;</span>)&quot;</span>, (x, y + h + <span class=\"number\">40</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class=\"number\">1.5</span>, (<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>), <span class=\"number\">2</span>)</span><br><span class=\"line\">        cv2.putText(img, <span class=\"string\">f&quot;(<span class=\"subst\">&#123;x + w&#125;</span>, <span class=\"subst\">&#123;y + h&#125;</span>)&quot;</span>, (x + w, y + h + <span class=\"number\">40</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class=\"number\">1.5</span>, (<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>), <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 添加顶点到数组中</span></span><br><span class=\"line\">        top_left = (x, y)</span><br><span class=\"line\">        top_right = (x + w, y)</span><br><span class=\"line\">        bottom_right = (x + w, y + h)</span><br><span class=\"line\">        bottom_left = (x, y + h)</span><br><span class=\"line\">        vertices = (top_left, top_right, bottom_right, bottom_left)</span><br><span class=\"line\">        faces_vertices.append(vertices)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 预览检测结果</span></span><br><span class=\"line\">    cv2.imshow(<span class=\"string\">&#x27;Dynamic Face Detection&#x27;</span>, img)</span><br><span class=\"line\">    cv2.waitKey(<span class=\"number\">0</span>)</span><br><span class=\"line\">    cv2.destroyAllWindows()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 返回检测到的人脸顶点坐标数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> faces_vertices</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;./img/img2.png&#x27;</span></span><br><span class=\"line\">    dynamic_face_detection(url)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<p>通过本文，我们了解了OpenCV的功能及应用领域、如何在Python中使用OpenCV实现图像处理和人脸检测等计算机视觉任务。OpenCV还支持多种其他计算机视觉操作，例如目标跟踪、形态学运算、特征提取和机器学习等。</p>\n<p>需要注意的是，在实际使用过程中，应根据具体要求和数据集选用不同的算法和模型，并对其进行调优和优化，以充分发挥OpenCV的性能和应用优势。</p>\n","categories":[{"name":"技术","path":"api/categories/技术.json"},{"name":"Python","path":"api/categories/Python.json"}],"tags":[{"name":"技术","path":"api/tags/技术.json"},{"name":"Python","path":"api/tags/Python.json"},{"name":"OpenCV","path":"api/tags/OpenCV.json"},{"name":"人脸识别","path":"api/tags/人脸识别.json"}]}