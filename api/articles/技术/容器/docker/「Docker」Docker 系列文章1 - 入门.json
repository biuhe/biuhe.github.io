{"title":"「Docker」Docker 系列文章1 - 入门","slug":"技术/容器/docker/「Docker」Docker 系列文章1 - 入门","date":"2022-12-04T08:14:47.000Z","updated":"2022-12-25T14:32:35.853Z","comments":true,"path":"api/articles/技术/容器/docker/「Docker」Docker 系列文章1 - 入门.json","excerpt":null,"covers":["https://sjwx.easydoc.xyz/46901064/files/l25jdwrn.png"],"content":"<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h2>\n<p>Docker 是一个开源的容器管理平台，它允许开发人员在轻量级容器中运行应用程序。容器是一种轻量级的虚拟化技术，它允许将应用程序及其依赖项打包在一起，并在任何支持容器的环境中运行。这样，开发人员可以确保应用程序在不同的平台上保持一致，并且能够在任何地方快速部署和运行。</p>\n<p>Docker可以简单理解为轻量级的虚拟机，但它使用独立于底层操作系统的容器来运行应用程序。与虚拟机相比，Docker 可以更快速地启动和运行应用程序，因为它不需要启动一个完整的操作系统来运行应用程序。这也使得 Docker 更容易在多个环境中进行部署，例如开发环境、测试环境和生产环境。</p>\n<h3 id=\"优点\"><a class=\"markdownIt-Anchor\" href=\"#优点\"></a> 优点</h3>\n<ul>\n<li>轻量级：可以通过一行命令完成启动和停止，方便快捷。</li>\n<li>可移植：可以将程序及其依赖、运行环境一起打包为一个镜像，可以迁移到任意操作系统，在不同的环境中运行。</li>\n<li>隔离：运行时利用沙箱机制形成隔离容器，各个应用互不干扰，可以有效地管理应用程序之间的依赖关系和资源限制。</li>\n<li>Docker 的生态系统提供了丰富的工具，可以帮助开发人员构建、部署和管理容器化应用程序。</li>\n</ul>\n<h3 id=\"能做什么\"><a class=\"markdownIt-Anchor\" href=\"#能做什么\"></a> 能做什么</h3>\n<ol>\n<li>\n<p>快速部署，解决不同环境中系统差异的问题<br>\n在使用Docker前，我们在不同环境下（如开发环境、测试环境、生产环境等）需要安装、配置、维护不同的应用程序（如JDK、Tomcat、数据库等），不同应用在每个环境都需要做一遍同样的操作，工作量繁重。使用Docker可以自己创建空镜像从头构建（或使用公共仓库中构建好的镜像），直接能够在不同环境中一步到位搭建部署整套应用环境。而 Docker 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现“代码在我机器上没问题啊”的情况。</p>\n</li>\n<li>\n<p>解决依赖问题，多个版本软件共存，不污染系统，例如 Python2、Python3，Redis4.0，Redis5.0</p>\n<p>大型项目中依赖关系复杂，依赖的组件非常多，不同组件之间部署时往往会产生依赖兼容性问题。<br>\n例如：一个项目中，部署时需要依赖于node.js、Redis、RabbitMQ、MySQL等，这些服务部署时所需要的函数库、依赖项，甚至Node JS的版本都需要不相同，此时便会出现依赖兼容问题。Docker应用运行在容器中，使用沙箱机制可以将环境互相隔离。不同应用需要不同的版本我们就运行在不同的容器中即可。</p>\n</li>\n<li>\n<p>更轻松的扩展和维护<br>\n基于上面的优点，使得Docker在应用复用更为容易，能够使得应用快速扩展，让服务弹性伸缩变得简单，能够轻松地完成动态管理的工作，根据业务需求实时扩展或拆除应用程序和服务。</p>\n</li>\n<li>\n<p>快速安装测试/学习软件，用完就可以删除，不把时间浪费在安装软件上。例如 Redis / MongoDB / ElasticSearch / ELK</p>\n</li>\n</ol>\n<h3 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\"></a> 概念</h3>\n<p>镜像（Image）：像是文件模板，可以理解为软件安装包，可以方便的进行传播和安装。一个镜像可以创建多个容器</p>\n<p>容器（Container）：是由镜像创建的运行实例，可以理解为软件安装后的状态，每个软件运行环境都是独立的、隔离的，称之为容器。</p>\n<p>仓库（Repository）：集中存放镜像文件的场所，可以理解为 Maven、Git 的仓库，当我们需要镜像文件的时候，可以从远程仓库中拉取。官方镜像仓库：<a href=\"https://hub.docker.com/\">https://hub.docker.com/</a></p>\n<h2 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h2>\n<p>桌面版：<a href=\"https://www.docker.com/products/docker-desktop\">https://www.docker.com/products/docker-desktop</a><br>\n服务器版：<a href=\"https://docs.docker.com/engine/install/#server\">https://docs.docker.com/engine/install/#server</a></p>\n<h3 id=\"问题\"><a class=\"markdownIt-Anchor\" href=\"#问题\"></a> 问题</h3>\n<p>windows 打开桌面版的时候如果出现了如下问题</p>\n<p><code>Hardware assisted virtualization and data execution protection must be enabled in the BIOS.</code></p>\n<p>则需要开启 WSL2 功能</p>\n<p>在控制面板-&gt;程序-&gt;启用或关闭 windows 功能，勾选Windows虚拟机监控程序平台和适用于Linux的Windows子系统，以开启 Windows 虚拟化和 Linux 子系统（WSL2)</p>\n<p>如果出现 WSL 2 installation is incomplete.<br>\nThe WSL2 Linux kernel is now installed using a separate MSI update package. Please click the link and follow the instructions to install the kernel update: xxx</p>\n<p>则需要安装最新版本的 WSL2： <a href=\"https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi\">https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi</a></p>\n<h2 id=\"配置\"><a class=\"markdownIt-Anchor\" href=\"#配置\"></a> 配置</h2>\n<p>镜像加速源</p>\n<table>\n<thead>\n<tr>\n<th>镜像加速器</th>\n<th>镜像加速器地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Docker 中国官方镜像</td>\n<td><a href=\"https://registry.docker-cn.com\">https://registry.docker-cn.com</a></td>\n</tr>\n<tr>\n<td>DaoCloud 镜像站</td>\n<td><a href=\"http://f1361db2.m.daocloud.io\">http://f1361db2.m.daocloud.io</a></td>\n</tr>\n<tr>\n<td>Azure 中国镜像</td>\n<td><a href=\"https://dockerhub.azk8s.cn\">https://dockerhub.azk8s.cn</a></td>\n</tr>\n<tr>\n<td>科大镜像站</td>\n<td><a href=\"https://docker.mirrors.ustc.edu.cn\">https://docker.mirrors.ustc.edu.cn</a></td>\n</tr>\n<tr>\n<td>阿里云</td>\n<td>https://&lt;your_code&gt;.mirror.aliyuncs.com</td>\n</tr>\n<tr>\n<td>七牛云</td>\n<td><a href=\"https://reg-mirror.qiniu.com\">https://reg-mirror.qiniu.com</a></td>\n</tr>\n<tr>\n<td>网易云</td>\n<td><a href=\"https://hub-mirror.c.163.com\">https://hub-mirror.c.163.com</a></td>\n</tr>\n<tr>\n<td>腾讯云</td>\n<td><a href=\"https://mirror.ccs.tencentyun.com\">https://mirror.ccs.tencentyun.com</a></td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://sjwx.easydoc.xyz/46901064/files/l25jdwrn.png\" alt=\"img\"></p>\n<h2 id=\"安装软件\"><a class=\"markdownIt-Anchor\" href=\"#安装软件\"></a> 安装软件</h2>\n<p>传统应用安装，可能需要先安装许多的依赖。例如我们安装WordPress （一个基于 PHP 和 MySQL 的免费和开源内容管理系统（CMS））的话，则需要先安装Apache、Php、MySQL等环境后才可以正常安装WordPress。同一系统下也不方便安装多个版本的软件，有些软件还卸载不干净。</p>\n<p>相对比之下Dokcer安装更简洁，一个命令就可以快速安装和卸载。也没有系统兼容的问题，Linux专享的软件也可以在Windows下使用。</p>\n<h3 id=\"安装redis\"><a class=\"markdownIt-Anchor\" href=\"#安装redis\"></a> 安装Redis</h3>\n<p>在Redis官方网站中并没有提供Docker相关的安装方式。</p>\n<p>可以通过Docker官方镜像仓库查找Redis镜像：<a href=\"https://hub.docker.com/_/redis\">https://hub.docker.com/_/redis</a></p>\n<p>通过命令 <code>docker pull redis</code> 来拉取镜像，也可以通过直接运行 <code>docker run</code> 来创建并运行容器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 6379:6379 --name redis redis:latest</span><br></pre></td></tr></table></figure>\n<p>然后会返回一串容器id（我这里是1c8f24cddd1d7a4accac19e1ef8f7ab68e70f663c3a8f184bbc732fd50f43abd），</p>\n<p>就表示创建成功。如果有需要，我们也可以设置更多参数：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=always --log-opt max-size=100m --log-opt max-file=2 -p 6379:6379 --name redis -d redis --appendonly yes  --requirepass 123456</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>--restart=always</code> 为开机启动</li>\n<li><code>-log</code> 为日志方面的设置</li>\n<li><code>-p</code> 为将内部端口映射到外部的端口，将6379端口挂载出去，前面为宿主机端口，后面为镜像内端口</li>\n<li><code>-name</code> 为容器名字</li>\n<li><code>-d redis</code> 表示后台启动redis</li>\n<li><code>-- appendonly yes</code> 开启 redis 持久化</li>\n<li><code>-- requirepass</code> 为设置redis访问密码</li>\n</ul>\n<p>注意：生产环境尽量不要使用 latest 版本，应使用指定版本号</p>\n<h3 id=\"查看状态\"><a class=\"markdownIt-Anchor\" href=\"#查看状态\"></a> 查看状态</h3>\n<p>通过以下命令查看容器运行状态：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a |grep &lt;容器名&gt;</span><br></pre></td></tr></table></figure>\n<p>运行 <code>docker ps -a |grep redis</code>  得到以下结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1c8f24cddd1d  redis  &quot;docker-entrypoint.s…&quot;  47 seconds ago  Up 45 seconds  0.0.0.0:6379-&gt;6379/tcp  redis</span><br></pre></td></tr></table></figure>\n<p>或者通过容器 id 来查看状态如：<code>docker ps -a | grep 1c8f</code></p>\n<h3 id=\"查看容器运行日志\"><a class=\"markdownIt-Anchor\" href=\"#查看容器运行日志\"></a> 查看容器运行日志</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs --since 30m &lt;容器名/id&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>–since 30m 是查看此容器30分钟之内的日志情况。</li>\n</ul>\n<p>运行<code>docker logs --since 30m redis</code> 或 <code>docker logs --since 30m 1c8f</code> 得到如下结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1:C 15 Dec 2022 08:23:37.361 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class=\"line\">1:C 15 Dec 2022 08:23:37.361 # Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=1, just started</span><br><span class=\"line\">1:C 15 Dec 2022 08:23:37.361 # Configuration loaded</span><br><span class=\"line\">1:M 15 Dec 2022 08:23:37.363 * monotonic clock: POSIX clock_gettime</span><br><span class=\"line\">1:M 15 Dec 2022 08:23:37.366 * Running mode=standalone, port=6379.</span><br><span class=\"line\">1:M 15 Dec 2022 08:23:37.366 # Server initialized</span><br><span class=\"line\">1:M 15 Dec 2022 08:23:37.367 * Ready to accept connections</span><br></pre></td></tr></table></figure>\n<h3 id=\"进入容器\"><a class=\"markdownIt-Anchor\" href=\"#进入容器\"></a> 进入容器</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker extc -it &lt;容器&gt; &lt;命令&gt;</span><br></pre></td></tr></table></figure>\n<p>运行 <code>docker exec -it redis redis-cli</code>  或   <code>docker exec -it 1c8f redis-cli</code>  就可以进入到redis 当中，刚才我们设置了密码，因此要用<code>auth</code>命令登录后才可以使用。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; auth 123456</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; set abc 1</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get abc</span><br><span class=\"line\">&quot;1&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; exit</span><br></pre></td></tr></table></figure>\n<p>此时我们已经可以操作并查看到redis中的数据了，证明我们已经安装成功，接下来我们学习怎样停止或删除容器</p>\n<h3 id=\"删除容器\"><a class=\"markdownIt-Anchor\" href=\"#删除容器\"></a> 删除容器</h3>\n<p>我们需要停止运行中的容器才可以删除</p>\n<p>停止命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop &lt;容器名/id&gt;</span><br></pre></td></tr></table></figure>\n<p>运行 <code>docker stop redis</code> 或 <code>docker stop 1c8f</code>停止容器</p>\n<p>删除命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm &lt;容器名/id&gt;</span><br></pre></td></tr></table></figure>\n<p>运行 <code>docker rm redis</code>  或 <code>docker rm 1c8f</code> 删除容器</p>\n<p>通过 <code>docker ps -a</code> 查看 redis 容器已经被删除</p>\n<h3 id=\"删除镜像\"><a class=\"markdownIt-Anchor\" href=\"#删除镜像\"></a> 删除镜像</h3>\n<p>查看全部镜像命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<p>删除镜像命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi &lt;镜像id&gt;</span><br></pre></td></tr></table></figure>\n<p>运行 <code>docker rmi 7614</code> 删除镜像， 这里的7614是我的redis的镜像id</p>\n<h2 id=\"常用命令\"><a class=\"markdownIt-Anchor\" href=\"#常用命令\"></a> 常用命令</h2>\n<h3 id=\"镜像\"><a class=\"markdownIt-Anchor\" href=\"#镜像\"></a> 镜像</h3>\n<h4 id=\"获取镜像\"><a class=\"markdownIt-Anchor\" href=\"#获取镜像\"></a> 获取镜像</h4>\n<p><code>docker pull IMAGE_NAME[:Tag]</code> ：用于从 Docker 仓库下载镜像，如不显式指定TAG，则默认选择latest标签</p>\n<h4 id=\"查看信息\"><a class=\"markdownIt-Anchor\" href=\"#查看信息\"></a> 查看信息</h4>\n<p><code>docker images</code>列出本地主机上已有的镜像信息</p>\n<p><code>docker inspect IMAGE_ID</code>可以获取该镜像的详细信息。</p>\n<h4 id=\"标签镜像\"><a class=\"markdownIt-Anchor\" href=\"#标签镜像\"></a> 标签镜像</h4>\n<p><code>docker tag REPOSITORY:TAG</code>可为本地镜像添加新的标签，例如 <code>docker tag ubuntu:latest latest_ubuntu:latest</code></p>\n<h4 id=\"搜索镜像\"><a class=\"markdownIt-Anchor\" href=\"#搜索镜像\"></a> 搜索镜像</h4>\n<p><code>docker search IMAGE_NAME</code> ：用于在 Docker 仓库中搜索镜像，例如 <code>docker search mysql</code></p>\n<p>可选参数：</p>\n<ul>\n<li><code>--automated=false</code> 仅显示自动创建的镜像</li>\n<li><code>--no-trunc=false</code> 输出信息不截断显示</li>\n<li><code>-s</code>，–starts=0 指定仅显示评价为指定星级以上的镜像</li>\n</ul>\n<h4 id=\"删除镜像-2\"><a class=\"markdownIt-Anchor\" href=\"#删除镜像-2\"></a> 删除镜像</h4>\n<p><code>docker rmi IMAGE[IMAGE...]</code>IMAGE可以为标签或ID。使用镜像ID来删除时，会先尝试删除所有指向该镜像的标签，然后删除该镜像文件本身。</p>\n<blockquote>\n<p>注意：当有该镜像创建的容器存在时，镜像文件默认是无法被删除的。</p>\n</blockquote>\n<p><code>docker ps -a</code>命令可以看到本机上存在的所有容器。</p>\n<p>强制删除镜像用<code>docker rmi -f IMAGE</code>命令。使用<code>-f</code>参数来强制删除一个存在容器依赖的镜像会造成一些遗留问题。正确做法是先删除依赖镜像的所有容器，再来删除镜像。删除容器用<code>docker rm CONTAINER_ID</code>命令。</p>\n<h4 id=\"创建镜像\"><a class=\"markdownIt-Anchor\" href=\"#创建镜像\"></a> 创建镜像</h4>\n<p><code>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]</code> 基于已有镜像的容器创建</p>\n<p>可选参数：</p>\n<ul>\n<li><code>-a</code>，–author=“” 作者信息</li>\n<li><code>-m</code>，–message&quot;&quot; 提交信息</li>\n<li><code>-p</code>，–pause=true 提交时暂停容器运行</li>\n</ul>\n<p>举例如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost test]# docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu              14.04               dea1945146b9        6 weeks ago         188MB</span><br><span class=\"line\">[root@localhost test]# docker run -ti ubuntu:14.04 /bin/bash</span><br><span class=\"line\">root@098ab9bc25f8:/# touch test</span><br><span class=\"line\">root@098ab9bc25f8:/# exit</span><br><span class=\"line\">exit</span><br><span class=\"line\">[root@localhost test]# docker commit -m &quot;Added a new file&quot; -a &quot;Docker Test&quot; 098ab9bc25f8 test</span><br><span class=\"line\">sha256:68ceff3107a82641378dee544caeed48e6d544b4d74b525051381b7db7479d35</span><br><span class=\"line\">[root@localhost test]# docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">test                latest              68ceff3107a8        16 seconds ago      188MB</span><br><span class=\"line\">ubuntu              14.04               dea1945146b9        6 weeks ago         188MB</span><br></pre></td></tr></table></figure>\n<p>基于本地模板导入使用<code>cat 镜像压缩包 | docker import -REPOSITORY:TAG</code>命令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost test]# ls</span><br><span class=\"line\">ubuntu-14.04-x86_64-minimal.tar.gz</span><br><span class=\"line\">[root@localhost test]# cat ubuntu-14.04-x86_64-minimal.tar.gz | docker import - ubuntu:14.04-server</span><br><span class=\"line\">sha256:ae63a9e87332075323de0e2cb3e12dd6ea8c6078e006dd937dc0d670c4a8773d</span><br><span class=\"line\">[root@localhost test]# docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu              14.04-server        ae63a9e87332        12 seconds ago      215MB</span><br><span class=\"line\">test                latest              68ceff3107a8        About an hour ago   188MB</span><br><span class=\"line\">ubuntu              14.04               dea1945146b9        6 weeks ago         188MB</span><br></pre></td></tr></table></figure>\n<h4 id=\"存储镜像\"><a class=\"markdownIt-Anchor\" href=\"#存储镜像\"></a> 存储镜像</h4>\n<p><code>docker save -o 压缩包保存名 REPOSITORY:TAG</code> 可存出镜像。</p>\n<p>举例如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost test]# docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu              14.04               dea1945146b9        6 weeks ago         188MB</span><br><span class=\"line\">[root@localhost test]# docker save -o ubuntu_server.tar ubuntu:14.04</span><br><span class=\"line\">[root@localhost test]# ls</span><br><span class=\"line\">ubuntu_server.tar</span><br></pre></td></tr></table></figure>\n<h4 id=\"载入镜像\"><a class=\"markdownIt-Anchor\" href=\"#载入镜像\"></a> 载入镜像</h4>\n<p><code>docker load --input 压缩包保存名</code>或者<code>docker load &lt; 压缩包保存名</code>可从导出的文件中重新载入镜像。</p>\n<p>举例如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost test]# ls</span><br><span class=\"line\">ubuntu_server.tar</span><br><span class=\"line\">[root@localhost test]# docker load --input ubuntu_server.tar </span><br><span class=\"line\">Loaded image: ubuntu:14.04</span><br><span class=\"line\">[root@localhost test]# docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu              14.04               dea1945146b9        6 weeks ago         188MB</span><br></pre></td></tr></table></figure>\n<h4 id=\"构建镜像\"><a class=\"markdownIt-Anchor\" href=\"#构建镜像\"></a> 构建镜像</h4>\n<p><code>docker build</code>：用于从 Dockerfile 创建一个新的镜像</p>\n<h4 id=\"上传镜像\"><a class=\"markdownIt-Anchor\" href=\"#上传镜像\"></a> 上传镜像</h4>\n<p>可以使用<code>docker push NAME[:TAG]</code>上传镜像到仓库，默认上传到DockerHub官方仓库。第一次使用必须要先登录。</p>\n<p>举例如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost test]# docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu              14.04-server        ae63a9e87332        4 minutes ago       215MB</span><br><span class=\"line\">test                latest              68ceff3107a8        About an hour ago   188MB</span><br><span class=\"line\">ubuntu              14.04               dea1945146b9        6 weeks ago         188MB</span><br><span class=\"line\">[root@localhost test]# docker tag test:latest username/test:latest</span><br><span class=\"line\">[root@localhost test]# docker images</span><br><span class=\"line\">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu                14.04-server        ae63a9e87332        7 minutes ago       215MB</span><br><span class=\"line\">username/test         latest              68ceff3107a8        About an hour ago   188MB</span><br><span class=\"line\">test                  latest              68ceff3107a8        About an hour ago   188MB</span><br><span class=\"line\">ubuntu                14.04               dea1945146b9        6 weeks ago         188MB</span><br><span class=\"line\">[root@localhost test]# docker login</span><br><span class=\"line\">Login with your Docker ID to push and pull images from Docker Hub. If you don&#x27;t have a Docker ID, head over to https://hub.docker.com to create one.</span><br><span class=\"line\">Username: username</span><br><span class=\"line\">Password: </span><br><span class=\"line\">Login Succeeded</span><br><span class=\"line\">[root@localhost test]# docker push username/test:latest</span><br><span class=\"line\">The push refers to a repository [docker.io/username/test]</span><br><span class=\"line\">786a798121af: Pushed </span><br><span class=\"line\">7fb9ba64f896: Pushed </span><br><span class=\"line\">4e1e6ac5b9d6: Pushed </span><br><span class=\"line\">48daf661d621: Pushed </span><br><span class=\"line\">bf59e7acf5c4: Pushed </span><br><span class=\"line\">c47d9b229ca4: Pushed </span><br><span class=\"line\">latest: digest: sha256:c46955d49b5b7cf15528b94d5c4fb7028b61c52cf00ee4d14073a92379e2237f size: 1566</span><br></pre></td></tr></table></figure>\n<h3 id=\"容器\"><a class=\"markdownIt-Anchor\" href=\"#容器\"></a> 容器</h3>\n<h4 id=\"创建容器\"><a class=\"markdownIt-Anchor\" href=\"#创建容器\"></a> 创建容器</h4>\n<p><code>docker create CONTAINER_NAME</code> 命令来新建一个容器，新建的容器处于停止状态，可以使用<code>docker start &lt;CONTAINER_ID&gt;</code>命令来启动它。</p>\n<h4 id=\"启动容器\"><a class=\"markdownIt-Anchor\" href=\"#启动容器\"></a> 启动容器</h4>\n<p>启动容器有两种方式：</p>\n<ul>\n<li>将在终止状态的容器重新启动，命令为  <code>docker start CONTAINER</code></li>\n<li>基于镜像创建并运行一个新的容器，命令为 <code>docker run CONTAINER</code> ， 等价于先执行<code>docker create</code>，再执行<code>docker start</code>。</li>\n</ul>\n<p>可选参数：</p>\n<ul>\n<li><code>-t</code>，让Docker分配一个伪终端并绑定到容器的标准输入上</li>\n<li><code>-i</code>，则让容器的标准输入保持打开</li>\n<li><code>-d</code>，会让Docker容器在后台以守护形式运行，获取容器输出信息</li>\n</ul>\n<p>例如 <code>docker run -t -i ubuntu:14.04 /bin/bash</code> 会启动一个bash终端，允许用户进行交互，举例如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost test]# docker run -t -i ubuntu:14.04 /bin/bash</span><br><span class=\"line\">root@eac23878c8bf:/# pwd</span><br><span class=\"line\">/</span><br><span class=\"line\">root@eac23878c8bf:/# ls</span><br><span class=\"line\">bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class=\"line\">root@eac23878c8bf:/# ps</span><br><span class=\"line\">   PID TTY          TIME CMD</span><br><span class=\"line\">     1 pts/0    00:00:00 bash</span><br><span class=\"line\">    15 pts/0    00:00:00 ps</span><br><span class=\"line\">root@eac23878c8bf:/# exit</span><br><span class=\"line\">exit</span><br><span class=\"line\">[root@localhost test]# docker run -d ubuntu:14.04 /bin/sh -c &quot;while true; do echo hello word; sleep 1; done&quot;</span><br><span class=\"line\">2105fbb444b3b028a1b26ec5879d8d282ccc2fa7d0a9776a8a86e808d3414843</span><br><span class=\"line\">[root@localhost test]# docker ps -a</span><br><span class=\"line\">CONTAINER ID     IMAGE            COMMAND                  CREATED           STATUS             PORTS     NAMES</span><br><span class=\"line\">2105fbb444b3     ubuntu:14.04     &quot;/bin/sh -c &#x27;while...&quot;   11 seconds ago    Up 10 seconds                confident_payne</span><br><span class=\"line\">eac23878c8bf     ubuntu:14.04     &quot;/bin/bash&quot;              2 minutes ago     Exited (0) 2 minutes ago     adoring_shockley</span><br><span class=\"line\">[root@localhost test]# docker logs 2105fbb444b3</span><br><span class=\"line\">hello word</span><br><span class=\"line\">hello word</span><br><span class=\"line\">hello word</span><br><span class=\"line\">hello word</span><br><span class=\"line\">...</span><br><span class=\"line\">[root@localhost test]# docker stop 2105</span><br></pre></td></tr></table></figure>\n<h4 id=\"停止容器\"><a class=\"markdownIt-Anchor\" href=\"#停止容器\"></a> 停止容器</h4>\n<p><code>docker stop  </code>命令用于停止一个正在运行的容器</p>\n<p>可选参数：</p>\n<ul>\n<li><code>-t</code>， 指定停止容器前等待的秒数。默认值是10秒</li>\n</ul>\n<p>扩展：</p>\n<p><code>docker ps -a -q</code> 命令为查看所有(<code>-a</code>)的容器ID(<code>-q</code>)，这条命令也可以提供给另外的命令组合使用，如下：</p>\n<p><code>docker stop $(docker ps -a -q)</code> ，命令为停止所有容器</p>\n<p><code>docker restart</code> 将一个运行态的容器终止然后再重新启动它。</p>\n<h4 id=\"进入容器-2\"><a class=\"markdownIt-Anchor\" href=\"#进入容器-2\"></a> 进入容器</h4>\n<p>在运行容器的时候使用<code>-d</code>参数，容器会进入后台，用户无法看到容器中的信息，需要通过命令来进入到容器中进行操作。</p>\n<p><code>docker attach CONTAINER</code> 它允许我们连接到正在运行的容器并在其中运行命令。可以使用它来在容器内部执行操作，例如查看容器的日志或运行容器内的应用程序。这条命令将会打开一个新的终端窗口，可以在容器内部运行命令。要退出容器，可以使用快捷键 <code>Ctrl+P</code> 和 <code>Ctrl+Q</code>。</p>\n<p>注意，<code>docker attach</code> 命令只能用于连接正在运行的容器。如果要连接已停止的容器，我们需要使用 <code>docker exec</code> 命令。</p>\n<p><code>docker exec</code> 命令的语法如下：</p>\n<p><code>docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</code></p>\n<p>其中，<code>CONTAINER</code> 是要连接的容器的名称或 ID，<code>COMMAND</code> 是要在容器内部运行的命令，<code>ARG</code> 是命令的参数。</p>\n<p>例如，假设想要在名为 <code>my_container</code> 的容器内部运行命令 <code>ls -l</code>，可以使用下面的命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec my_container ls -l</span><br></pre></td></tr></table></figure>\n<p>要在容器中使用 bash，举例如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost test]# docker exec -ti a0bb97c292d1 /bin/bash</span><br><span class=\"line\">root@a0bb97c292d1:/# ls</span><br><span class=\"line\">bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class=\"line\">root@a0bb97c292d1:/# exit</span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除容器-2\"><a class=\"markdownIt-Anchor\" href=\"#删除容器-2\"></a> 删除容器</h4>\n<p>可以使用<code>docker rm [OPTIONS] CONTAINER [CONTAINER...]</code>命令删除处于终止状态的容器。</p>\n<p>可选参数：</p>\n<ul>\n<li><code>-f</code>，–force=false 强行终止并删除一个运行中的容器</li>\n<li><code>-l</code>，–link=false 删除容器的连接，但保留容器</li>\n<li><code>-v</code>，–volumes=false 删除容器挂载的数据卷</li>\n</ul>\n<p>扩展</p>\n<p><code>docker rm $(docker ps -a -q)</code>，删除所有容器</p>\n<h4 id=\"导入导出\"><a class=\"markdownIt-Anchor\" href=\"#导入导出\"></a> 导入导出</h4>\n<p>导出容器是指导出一个已经创建好的容器到一个文件，不管此时这个容器是否处于运行状态，可以使用<code>docker export CONTAINER</code>命令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost test]# docker run -tid ubuntu:14.04</span><br><span class=\"line\">547e74d47ec3eb30736aee22c1b7bf2acd6e71470a1ade4561007a10b3b14a36</span><br><span class=\"line\">[root@localhost test]# docker ps -a</span><br><span class=\"line\">CONTAINER ID     IMAGE            COMMAND          CREATED          STATUS           PORTS       NAMES</span><br><span class=\"line\">547e74d47ec3     ubuntu:14.04     &quot;/bin/bash&quot;      6 seconds ago    Up 5 seconds                 unruffled_jennings</span><br><span class=\"line\">[root@localhost test]# docker export 547 &gt; test.tar</span><br><span class=\"line\">[root@localhost test]# ls</span><br><span class=\"line\">test.tar </span><br></pre></td></tr></table></figure>\n<p>导出的文件又可以使用<code>docker import</code>命令导入，成为镜像。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost test]# ls</span><br><span class=\"line\">test.tar</span><br><span class=\"line\">[root@localhost test]# cat test.tar | docker import - test/ubuntu:v1.0</span><br><span class=\"line\">sha256:1ab7c63a882a9bc13ff4673081a237ba8785d47ba69458bfe976c0e5fc7b9c99</span><br><span class=\"line\">[root@localhost test]# docker images</span><br><span class=\"line\">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">test/ubuntu           v1.0                1ab7c63a882a        22 seconds ago      175MB</span><br><span class=\"line\">ubuntu                14.04-server        ae63a9e87332        2 hours ago         215MB</span><br><span class=\"line\">securityweekly/test   latest              68ceff3107a8        3 hours ago         188MB</span><br><span class=\"line\">ubuntu                14.04               dea1945146b9        6 weeks ago         188MB</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他命令\"><a class=\"markdownIt-Anchor\" href=\"#其他命令\"></a> 其他命令</h3>\n<ul>\n<li>\n<p><code>docker --help</code> 查看帮助命令</p>\n</li>\n<li>\n<p><code>docker logs</code>：用于查看容器的日志输出。</p>\n</li>\n<li>\n<p><code>docker volume ls</code> 查看 volume 列表</p>\n</li>\n<li>\n<p><code>docker network ls</code> 查看网络列表</p>\n</li>\n</ul>\n<p>这只是一些常用的 Docker 命令，Docker 还有很多其他的命令和功能。有关 Docker 命令的完整列表，可以参考 Docker 的<a href=\"https://docs.docker.com/engine/reference/commandline/run/\">官方文档</a></p>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<blockquote>\n<p><a href=\"https://docker.easydoc.net\">Docker 快速入门</a></p>\n<p><a href=\"https://www.jianshu.com/p/f272726db9c5\">Docker安装与基本操作</a></p>\n</blockquote>\n","more":"<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h2>\n<p>Docker 是一个开源的容器管理平台，它允许开发人员在轻量级容器中运行应用程序。容器是一种轻量级的虚拟化技术，它允许将应用程序及其依赖项打包在一起，并在任何支持容器的环境中运行。这样，开发人员可以确保应用程序在不同的平台上保持一致，并且能够在任何地方快速部署和运行。</p>\n<p>Docker可以简单理解为轻量级的虚拟机，但它使用独立于底层操作系统的容器来运行应用程序。与虚拟机相比，Docker 可以更快速地启动和运行应用程序，因为它不需要启动一个完整的操作系统来运行应用程序。这也使得 Docker 更容易在多个环境中进行部署，例如开发环境、测试环境和生产环境。</p>\n<h3 id=\"优点\"><a class=\"markdownIt-Anchor\" href=\"#优点\"></a> 优点</h3>\n<ul>\n<li>轻量级：可以通过一行命令完成启动和停止，方便快捷。</li>\n<li>可移植：可以将程序及其依赖、运行环境一起打包为一个镜像，可以迁移到任意操作系统，在不同的环境中运行。</li>\n<li>隔离：运行时利用沙箱机制形成隔离容器，各个应用互不干扰，可以有效地管理应用程序之间的依赖关系和资源限制。</li>\n<li>Docker 的生态系统提供了丰富的工具，可以帮助开发人员构建、部署和管理容器化应用程序。</li>\n</ul>\n<h3 id=\"能做什么\"><a class=\"markdownIt-Anchor\" href=\"#能做什么\"></a> 能做什么</h3>\n<ol>\n<li>\n<p>快速部署，解决不同环境中系统差异的问题<br>\n在使用Docker前，我们在不同环境下（如开发环境、测试环境、生产环境等）需要安装、配置、维护不同的应用程序（如JDK、Tomcat、数据库等），不同应用在每个环境都需要做一遍同样的操作，工作量繁重。使用Docker可以自己创建空镜像从头构建（或使用公共仓库中构建好的镜像），直接能够在不同环境中一步到位搭建部署整套应用环境。而 Docker 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现“代码在我机器上没问题啊”的情况。</p>\n</li>\n<li>\n<p>解决依赖问题，多个版本软件共存，不污染系统，例如 Python2、Python3，Redis4.0，Redis5.0</p>\n<p>大型项目中依赖关系复杂，依赖的组件非常多，不同组件之间部署时往往会产生依赖兼容性问题。<br>\n例如：一个项目中，部署时需要依赖于node.js、Redis、RabbitMQ、MySQL等，这些服务部署时所需要的函数库、依赖项，甚至Node JS的版本都需要不相同，此时便会出现依赖兼容问题。Docker应用运行在容器中，使用沙箱机制可以将环境互相隔离。不同应用需要不同的版本我们就运行在不同的容器中即可。</p>\n</li>\n<li>\n<p>更轻松的扩展和维护<br>\n基于上面的优点，使得Docker在应用复用更为容易，能够使得应用快速扩展，让服务弹性伸缩变得简单，能够轻松地完成动态管理的工作，根据业务需求实时扩展或拆除应用程序和服务。</p>\n</li>\n<li>\n<p>快速安装测试/学习软件，用完就可以删除，不把时间浪费在安装软件上。例如 Redis / MongoDB / ElasticSearch / ELK</p>\n</li>\n</ol>\n<h3 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\"></a> 概念</h3>\n<p>镜像（Image）：像是文件模板，可以理解为软件安装包，可以方便的进行传播和安装。一个镜像可以创建多个容器</p>\n<p>容器（Container）：是由镜像创建的运行实例，可以理解为软件安装后的状态，每个软件运行环境都是独立的、隔离的，称之为容器。</p>\n<p>仓库（Repository）：集中存放镜像文件的场所，可以理解为 Maven、Git 的仓库，当我们需要镜像文件的时候，可以从远程仓库中拉取。官方镜像仓库：<a href=\"https://hub.docker.com/\">https://hub.docker.com/</a></p>\n<h2 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h2>\n<p>桌面版：<a href=\"https://www.docker.com/products/docker-desktop\">https://www.docker.com/products/docker-desktop</a><br>\n服务器版：<a href=\"https://docs.docker.com/engine/install/#server\">https://docs.docker.com/engine/install/#server</a></p>\n<h3 id=\"问题\"><a class=\"markdownIt-Anchor\" href=\"#问题\"></a> 问题</h3>\n<p>windows 打开桌面版的时候如果出现了如下问题</p>\n<p><code>Hardware assisted virtualization and data execution protection must be enabled in the BIOS.</code></p>\n<p>则需要开启 WSL2 功能</p>\n<p>在控制面板-&gt;程序-&gt;启用或关闭 windows 功能，勾选Windows虚拟机监控程序平台和适用于Linux的Windows子系统，以开启 Windows 虚拟化和 Linux 子系统（WSL2)</p>\n<p>如果出现 WSL 2 installation is incomplete.<br>\nThe WSL2 Linux kernel is now installed using a separate MSI update package. Please click the link and follow the instructions to install the kernel update: xxx</p>\n<p>则需要安装最新版本的 WSL2： <a href=\"https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi\">https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi</a></p>\n<h2 id=\"配置\"><a class=\"markdownIt-Anchor\" href=\"#配置\"></a> 配置</h2>\n<p>镜像加速源</p>\n<table>\n<thead>\n<tr>\n<th>镜像加速器</th>\n<th>镜像加速器地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Docker 中国官方镜像</td>\n<td><a href=\"https://registry.docker-cn.com\">https://registry.docker-cn.com</a></td>\n</tr>\n<tr>\n<td>DaoCloud 镜像站</td>\n<td><a href=\"http://f1361db2.m.daocloud.io\">http://f1361db2.m.daocloud.io</a></td>\n</tr>\n<tr>\n<td>Azure 中国镜像</td>\n<td><a href=\"https://dockerhub.azk8s.cn\">https://dockerhub.azk8s.cn</a></td>\n</tr>\n<tr>\n<td>科大镜像站</td>\n<td><a href=\"https://docker.mirrors.ustc.edu.cn\">https://docker.mirrors.ustc.edu.cn</a></td>\n</tr>\n<tr>\n<td>阿里云</td>\n<td>https://&lt;your_code&gt;.mirror.aliyuncs.com</td>\n</tr>\n<tr>\n<td>七牛云</td>\n<td><a href=\"https://reg-mirror.qiniu.com\">https://reg-mirror.qiniu.com</a></td>\n</tr>\n<tr>\n<td>网易云</td>\n<td><a href=\"https://hub-mirror.c.163.com\">https://hub-mirror.c.163.com</a></td>\n</tr>\n<tr>\n<td>腾讯云</td>\n<td><a href=\"https://mirror.ccs.tencentyun.com\">https://mirror.ccs.tencentyun.com</a></td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://sjwx.easydoc.xyz/46901064/files/l25jdwrn.png\" alt=\"img\"></p>\n<h2 id=\"安装软件\"><a class=\"markdownIt-Anchor\" href=\"#安装软件\"></a> 安装软件</h2>\n<p>传统应用安装，可能需要先安装许多的依赖。例如我们安装WordPress （一个基于 PHP 和 MySQL 的免费和开源内容管理系统（CMS））的话，则需要先安装Apache、Php、MySQL等环境后才可以正常安装WordPress。同一系统下也不方便安装多个版本的软件，有些软件还卸载不干净。</p>\n<p>相对比之下Dokcer安装更简洁，一个命令就可以快速安装和卸载。也没有系统兼容的问题，Linux专享的软件也可以在Windows下使用。</p>\n<h3 id=\"安装redis\"><a class=\"markdownIt-Anchor\" href=\"#安装redis\"></a> 安装Redis</h3>\n<p>在Redis官方网站中并没有提供Docker相关的安装方式。</p>\n<p>可以通过Docker官方镜像仓库查找Redis镜像：<a href=\"https://hub.docker.com/_/redis\">https://hub.docker.com/_/redis</a></p>\n<p>通过命令 <code>docker pull redis</code> 来拉取镜像，也可以通过直接运行 <code>docker run</code> 来创建并运行容器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 6379:6379 --name redis redis:latest</span><br></pre></td></tr></table></figure>\n<p>然后会返回一串容器id（我这里是1c8f24cddd1d7a4accac19e1ef8f7ab68e70f663c3a8f184bbc732fd50f43abd），</p>\n<p>就表示创建成功。如果有需要，我们也可以设置更多参数：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=always --log-opt max-size=100m --log-opt max-file=2 -p 6379:6379 --name redis -d redis --appendonly yes  --requirepass 123456</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>--restart=always</code> 为开机启动</li>\n<li><code>-log</code> 为日志方面的设置</li>\n<li><code>-p</code> 为将内部端口映射到外部的端口，将6379端口挂载出去，前面为宿主机端口，后面为镜像内端口</li>\n<li><code>-name</code> 为容器名字</li>\n<li><code>-d redis</code> 表示后台启动redis</li>\n<li><code>-- appendonly yes</code> 开启 redis 持久化</li>\n<li><code>-- requirepass</code> 为设置redis访问密码</li>\n</ul>\n<p>注意：生产环境尽量不要使用 latest 版本，应使用指定版本号</p>\n<h3 id=\"查看状态\"><a class=\"markdownIt-Anchor\" href=\"#查看状态\"></a> 查看状态</h3>\n<p>通过以下命令查看容器运行状态：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a |grep &lt;容器名&gt;</span><br></pre></td></tr></table></figure>\n<p>运行 <code>docker ps -a |grep redis</code>  得到以下结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1c8f24cddd1d  redis  &quot;docker-entrypoint.s…&quot;  47 seconds ago  Up 45 seconds  0.0.0.0:6379-&gt;6379/tcp  redis</span><br></pre></td></tr></table></figure>\n<p>或者通过容器 id 来查看状态如：<code>docker ps -a | grep 1c8f</code></p>\n<h3 id=\"查看容器运行日志\"><a class=\"markdownIt-Anchor\" href=\"#查看容器运行日志\"></a> 查看容器运行日志</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs --since 30m &lt;容器名/id&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>–since 30m 是查看此容器30分钟之内的日志情况。</li>\n</ul>\n<p>运行<code>docker logs --since 30m redis</code> 或 <code>docker logs --since 30m 1c8f</code> 得到如下结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1:C 15 Dec 2022 08:23:37.361 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class=\"line\">1:C 15 Dec 2022 08:23:37.361 # Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=1, just started</span><br><span class=\"line\">1:C 15 Dec 2022 08:23:37.361 # Configuration loaded</span><br><span class=\"line\">1:M 15 Dec 2022 08:23:37.363 * monotonic clock: POSIX clock_gettime</span><br><span class=\"line\">1:M 15 Dec 2022 08:23:37.366 * Running mode=standalone, port=6379.</span><br><span class=\"line\">1:M 15 Dec 2022 08:23:37.366 # Server initialized</span><br><span class=\"line\">1:M 15 Dec 2022 08:23:37.367 * Ready to accept connections</span><br></pre></td></tr></table></figure>\n<h3 id=\"进入容器\"><a class=\"markdownIt-Anchor\" href=\"#进入容器\"></a> 进入容器</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker extc -it &lt;容器&gt; &lt;命令&gt;</span><br></pre></td></tr></table></figure>\n<p>运行 <code>docker exec -it redis redis-cli</code>  或   <code>docker exec -it 1c8f redis-cli</code>  就可以进入到redis 当中，刚才我们设置了密码，因此要用<code>auth</code>命令登录后才可以使用。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; auth 123456</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; set abc 1</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get abc</span><br><span class=\"line\">&quot;1&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; exit</span><br></pre></td></tr></table></figure>\n<p>此时我们已经可以操作并查看到redis中的数据了，证明我们已经安装成功，接下来我们学习怎样停止或删除容器</p>\n<h3 id=\"删除容器\"><a class=\"markdownIt-Anchor\" href=\"#删除容器\"></a> 删除容器</h3>\n<p>我们需要停止运行中的容器才可以删除</p>\n<p>停止命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop &lt;容器名/id&gt;</span><br></pre></td></tr></table></figure>\n<p>运行 <code>docker stop redis</code> 或 <code>docker stop 1c8f</code>停止容器</p>\n<p>删除命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm &lt;容器名/id&gt;</span><br></pre></td></tr></table></figure>\n<p>运行 <code>docker rm redis</code>  或 <code>docker rm 1c8f</code> 删除容器</p>\n<p>通过 <code>docker ps -a</code> 查看 redis 容器已经被删除</p>\n<h3 id=\"删除镜像\"><a class=\"markdownIt-Anchor\" href=\"#删除镜像\"></a> 删除镜像</h3>\n<p>查看全部镜像命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<p>删除镜像命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi &lt;镜像id&gt;</span><br></pre></td></tr></table></figure>\n<p>运行 <code>docker rmi 7614</code> 删除镜像， 这里的7614是我的redis的镜像id</p>\n<h2 id=\"常用命令\"><a class=\"markdownIt-Anchor\" href=\"#常用命令\"></a> 常用命令</h2>\n<h3 id=\"镜像\"><a class=\"markdownIt-Anchor\" href=\"#镜像\"></a> 镜像</h3>\n<h4 id=\"获取镜像\"><a class=\"markdownIt-Anchor\" href=\"#获取镜像\"></a> 获取镜像</h4>\n<p><code>docker pull IMAGE_NAME[:Tag]</code> ：用于从 Docker 仓库下载镜像，如不显式指定TAG，则默认选择latest标签</p>\n<h4 id=\"查看信息\"><a class=\"markdownIt-Anchor\" href=\"#查看信息\"></a> 查看信息</h4>\n<p><code>docker images</code>列出本地主机上已有的镜像信息</p>\n<p><code>docker inspect IMAGE_ID</code>可以获取该镜像的详细信息。</p>\n<h4 id=\"标签镜像\"><a class=\"markdownIt-Anchor\" href=\"#标签镜像\"></a> 标签镜像</h4>\n<p><code>docker tag REPOSITORY:TAG</code>可为本地镜像添加新的标签，例如 <code>docker tag ubuntu:latest latest_ubuntu:latest</code></p>\n<h4 id=\"搜索镜像\"><a class=\"markdownIt-Anchor\" href=\"#搜索镜像\"></a> 搜索镜像</h4>\n<p><code>docker search IMAGE_NAME</code> ：用于在 Docker 仓库中搜索镜像，例如 <code>docker search mysql</code></p>\n<p>可选参数：</p>\n<ul>\n<li><code>--automated=false</code> 仅显示自动创建的镜像</li>\n<li><code>--no-trunc=false</code> 输出信息不截断显示</li>\n<li><code>-s</code>，–starts=0 指定仅显示评价为指定星级以上的镜像</li>\n</ul>\n<h4 id=\"删除镜像-2\"><a class=\"markdownIt-Anchor\" href=\"#删除镜像-2\"></a> 删除镜像</h4>\n<p><code>docker rmi IMAGE[IMAGE...]</code>IMAGE可以为标签或ID。使用镜像ID来删除时，会先尝试删除所有指向该镜像的标签，然后删除该镜像文件本身。</p>\n<blockquote>\n<p>注意：当有该镜像创建的容器存在时，镜像文件默认是无法被删除的。</p>\n</blockquote>\n<p><code>docker ps -a</code>命令可以看到本机上存在的所有容器。</p>\n<p>强制删除镜像用<code>docker rmi -f IMAGE</code>命令。使用<code>-f</code>参数来强制删除一个存在容器依赖的镜像会造成一些遗留问题。正确做法是先删除依赖镜像的所有容器，再来删除镜像。删除容器用<code>docker rm CONTAINER_ID</code>命令。</p>\n<h4 id=\"创建镜像\"><a class=\"markdownIt-Anchor\" href=\"#创建镜像\"></a> 创建镜像</h4>\n<p><code>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]</code> 基于已有镜像的容器创建</p>\n<p>可选参数：</p>\n<ul>\n<li><code>-a</code>，–author=“” 作者信息</li>\n<li><code>-m</code>，–message&quot;&quot; 提交信息</li>\n<li><code>-p</code>，–pause=true 提交时暂停容器运行</li>\n</ul>\n<p>举例如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost test]# docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu              14.04               dea1945146b9        6 weeks ago         188MB</span><br><span class=\"line\">[root@localhost test]# docker run -ti ubuntu:14.04 /bin/bash</span><br><span class=\"line\">root@098ab9bc25f8:/# touch test</span><br><span class=\"line\">root@098ab9bc25f8:/# exit</span><br><span class=\"line\">exit</span><br><span class=\"line\">[root@localhost test]# docker commit -m &quot;Added a new file&quot; -a &quot;Docker Test&quot; 098ab9bc25f8 test</span><br><span class=\"line\">sha256:68ceff3107a82641378dee544caeed48e6d544b4d74b525051381b7db7479d35</span><br><span class=\"line\">[root@localhost test]# docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">test                latest              68ceff3107a8        16 seconds ago      188MB</span><br><span class=\"line\">ubuntu              14.04               dea1945146b9        6 weeks ago         188MB</span><br></pre></td></tr></table></figure>\n<p>基于本地模板导入使用<code>cat 镜像压缩包 | docker import -REPOSITORY:TAG</code>命令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost test]# ls</span><br><span class=\"line\">ubuntu-14.04-x86_64-minimal.tar.gz</span><br><span class=\"line\">[root@localhost test]# cat ubuntu-14.04-x86_64-minimal.tar.gz | docker import - ubuntu:14.04-server</span><br><span class=\"line\">sha256:ae63a9e87332075323de0e2cb3e12dd6ea8c6078e006dd937dc0d670c4a8773d</span><br><span class=\"line\">[root@localhost test]# docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu              14.04-server        ae63a9e87332        12 seconds ago      215MB</span><br><span class=\"line\">test                latest              68ceff3107a8        About an hour ago   188MB</span><br><span class=\"line\">ubuntu              14.04               dea1945146b9        6 weeks ago         188MB</span><br></pre></td></tr></table></figure>\n<h4 id=\"存储镜像\"><a class=\"markdownIt-Anchor\" href=\"#存储镜像\"></a> 存储镜像</h4>\n<p><code>docker save -o 压缩包保存名 REPOSITORY:TAG</code> 可存出镜像。</p>\n<p>举例如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost test]# docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu              14.04               dea1945146b9        6 weeks ago         188MB</span><br><span class=\"line\">[root@localhost test]# docker save -o ubuntu_server.tar ubuntu:14.04</span><br><span class=\"line\">[root@localhost test]# ls</span><br><span class=\"line\">ubuntu_server.tar</span><br></pre></td></tr></table></figure>\n<h4 id=\"载入镜像\"><a class=\"markdownIt-Anchor\" href=\"#载入镜像\"></a> 载入镜像</h4>\n<p><code>docker load --input 压缩包保存名</code>或者<code>docker load &lt; 压缩包保存名</code>可从导出的文件中重新载入镜像。</p>\n<p>举例如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost test]# ls</span><br><span class=\"line\">ubuntu_server.tar</span><br><span class=\"line\">[root@localhost test]# docker load --input ubuntu_server.tar </span><br><span class=\"line\">Loaded image: ubuntu:14.04</span><br><span class=\"line\">[root@localhost test]# docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu              14.04               dea1945146b9        6 weeks ago         188MB</span><br></pre></td></tr></table></figure>\n<h4 id=\"构建镜像\"><a class=\"markdownIt-Anchor\" href=\"#构建镜像\"></a> 构建镜像</h4>\n<p><code>docker build</code>：用于从 Dockerfile 创建一个新的镜像</p>\n<h4 id=\"上传镜像\"><a class=\"markdownIt-Anchor\" href=\"#上传镜像\"></a> 上传镜像</h4>\n<p>可以使用<code>docker push NAME[:TAG]</code>上传镜像到仓库，默认上传到DockerHub官方仓库。第一次使用必须要先登录。</p>\n<p>举例如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost test]# docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu              14.04-server        ae63a9e87332        4 minutes ago       215MB</span><br><span class=\"line\">test                latest              68ceff3107a8        About an hour ago   188MB</span><br><span class=\"line\">ubuntu              14.04               dea1945146b9        6 weeks ago         188MB</span><br><span class=\"line\">[root@localhost test]# docker tag test:latest username/test:latest</span><br><span class=\"line\">[root@localhost test]# docker images</span><br><span class=\"line\">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu                14.04-server        ae63a9e87332        7 minutes ago       215MB</span><br><span class=\"line\">username/test         latest              68ceff3107a8        About an hour ago   188MB</span><br><span class=\"line\">test                  latest              68ceff3107a8        About an hour ago   188MB</span><br><span class=\"line\">ubuntu                14.04               dea1945146b9        6 weeks ago         188MB</span><br><span class=\"line\">[root@localhost test]# docker login</span><br><span class=\"line\">Login with your Docker ID to push and pull images from Docker Hub. If you don&#x27;t have a Docker ID, head over to https://hub.docker.com to create one.</span><br><span class=\"line\">Username: username</span><br><span class=\"line\">Password: </span><br><span class=\"line\">Login Succeeded</span><br><span class=\"line\">[root@localhost test]# docker push username/test:latest</span><br><span class=\"line\">The push refers to a repository [docker.io/username/test]</span><br><span class=\"line\">786a798121af: Pushed </span><br><span class=\"line\">7fb9ba64f896: Pushed </span><br><span class=\"line\">4e1e6ac5b9d6: Pushed </span><br><span class=\"line\">48daf661d621: Pushed </span><br><span class=\"line\">bf59e7acf5c4: Pushed </span><br><span class=\"line\">c47d9b229ca4: Pushed </span><br><span class=\"line\">latest: digest: sha256:c46955d49b5b7cf15528b94d5c4fb7028b61c52cf00ee4d14073a92379e2237f size: 1566</span><br></pre></td></tr></table></figure>\n<h3 id=\"容器\"><a class=\"markdownIt-Anchor\" href=\"#容器\"></a> 容器</h3>\n<h4 id=\"创建容器\"><a class=\"markdownIt-Anchor\" href=\"#创建容器\"></a> 创建容器</h4>\n<p><code>docker create CONTAINER_NAME</code> 命令来新建一个容器，新建的容器处于停止状态，可以使用<code>docker start &lt;CONTAINER_ID&gt;</code>命令来启动它。</p>\n<h4 id=\"启动容器\"><a class=\"markdownIt-Anchor\" href=\"#启动容器\"></a> 启动容器</h4>\n<p>启动容器有两种方式：</p>\n<ul>\n<li>将在终止状态的容器重新启动，命令为  <code>docker start CONTAINER</code></li>\n<li>基于镜像创建并运行一个新的容器，命令为 <code>docker run CONTAINER</code> ， 等价于先执行<code>docker create</code>，再执行<code>docker start</code>。</li>\n</ul>\n<p>可选参数：</p>\n<ul>\n<li><code>-t</code>，让Docker分配一个伪终端并绑定到容器的标准输入上</li>\n<li><code>-i</code>，则让容器的标准输入保持打开</li>\n<li><code>-d</code>，会让Docker容器在后台以守护形式运行，获取容器输出信息</li>\n</ul>\n<p>例如 <code>docker run -t -i ubuntu:14.04 /bin/bash</code> 会启动一个bash终端，允许用户进行交互，举例如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost test]# docker run -t -i ubuntu:14.04 /bin/bash</span><br><span class=\"line\">root@eac23878c8bf:/# pwd</span><br><span class=\"line\">/</span><br><span class=\"line\">root@eac23878c8bf:/# ls</span><br><span class=\"line\">bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class=\"line\">root@eac23878c8bf:/# ps</span><br><span class=\"line\">   PID TTY          TIME CMD</span><br><span class=\"line\">     1 pts/0    00:00:00 bash</span><br><span class=\"line\">    15 pts/0    00:00:00 ps</span><br><span class=\"line\">root@eac23878c8bf:/# exit</span><br><span class=\"line\">exit</span><br><span class=\"line\">[root@localhost test]# docker run -d ubuntu:14.04 /bin/sh -c &quot;while true; do echo hello word; sleep 1; done&quot;</span><br><span class=\"line\">2105fbb444b3b028a1b26ec5879d8d282ccc2fa7d0a9776a8a86e808d3414843</span><br><span class=\"line\">[root@localhost test]# docker ps -a</span><br><span class=\"line\">CONTAINER ID     IMAGE            COMMAND                  CREATED           STATUS             PORTS     NAMES</span><br><span class=\"line\">2105fbb444b3     ubuntu:14.04     &quot;/bin/sh -c &#x27;while...&quot;   11 seconds ago    Up 10 seconds                confident_payne</span><br><span class=\"line\">eac23878c8bf     ubuntu:14.04     &quot;/bin/bash&quot;              2 minutes ago     Exited (0) 2 minutes ago     adoring_shockley</span><br><span class=\"line\">[root@localhost test]# docker logs 2105fbb444b3</span><br><span class=\"line\">hello word</span><br><span class=\"line\">hello word</span><br><span class=\"line\">hello word</span><br><span class=\"line\">hello word</span><br><span class=\"line\">...</span><br><span class=\"line\">[root@localhost test]# docker stop 2105</span><br></pre></td></tr></table></figure>\n<h4 id=\"停止容器\"><a class=\"markdownIt-Anchor\" href=\"#停止容器\"></a> 停止容器</h4>\n<p><code>docker stop  </code>命令用于停止一个正在运行的容器</p>\n<p>可选参数：</p>\n<ul>\n<li><code>-t</code>， 指定停止容器前等待的秒数。默认值是10秒</li>\n</ul>\n<p>扩展：</p>\n<p><code>docker ps -a -q</code> 命令为查看所有(<code>-a</code>)的容器ID(<code>-q</code>)，这条命令也可以提供给另外的命令组合使用，如下：</p>\n<p><code>docker stop $(docker ps -a -q)</code> ，命令为停止所有容器</p>\n<p><code>docker restart</code> 将一个运行态的容器终止然后再重新启动它。</p>\n<h4 id=\"进入容器-2\"><a class=\"markdownIt-Anchor\" href=\"#进入容器-2\"></a> 进入容器</h4>\n<p>在运行容器的时候使用<code>-d</code>参数，容器会进入后台，用户无法看到容器中的信息，需要通过命令来进入到容器中进行操作。</p>\n<p><code>docker attach CONTAINER</code> 它允许我们连接到正在运行的容器并在其中运行命令。可以使用它来在容器内部执行操作，例如查看容器的日志或运行容器内的应用程序。这条命令将会打开一个新的终端窗口，可以在容器内部运行命令。要退出容器，可以使用快捷键 <code>Ctrl+P</code> 和 <code>Ctrl+Q</code>。</p>\n<p>注意，<code>docker attach</code> 命令只能用于连接正在运行的容器。如果要连接已停止的容器，我们需要使用 <code>docker exec</code> 命令。</p>\n<p><code>docker exec</code> 命令的语法如下：</p>\n<p><code>docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</code></p>\n<p>其中，<code>CONTAINER</code> 是要连接的容器的名称或 ID，<code>COMMAND</code> 是要在容器内部运行的命令，<code>ARG</code> 是命令的参数。</p>\n<p>例如，假设想要在名为 <code>my_container</code> 的容器内部运行命令 <code>ls -l</code>，可以使用下面的命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec my_container ls -l</span><br></pre></td></tr></table></figure>\n<p>要在容器中使用 bash，举例如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost test]# docker exec -ti a0bb97c292d1 /bin/bash</span><br><span class=\"line\">root@a0bb97c292d1:/# ls</span><br><span class=\"line\">bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class=\"line\">root@a0bb97c292d1:/# exit</span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除容器-2\"><a class=\"markdownIt-Anchor\" href=\"#删除容器-2\"></a> 删除容器</h4>\n<p>可以使用<code>docker rm [OPTIONS] CONTAINER [CONTAINER...]</code>命令删除处于终止状态的容器。</p>\n<p>可选参数：</p>\n<ul>\n<li><code>-f</code>，–force=false 强行终止并删除一个运行中的容器</li>\n<li><code>-l</code>，–link=false 删除容器的连接，但保留容器</li>\n<li><code>-v</code>，–volumes=false 删除容器挂载的数据卷</li>\n</ul>\n<p>扩展</p>\n<p><code>docker rm $(docker ps -a -q)</code>，删除所有容器</p>\n<h4 id=\"导入导出\"><a class=\"markdownIt-Anchor\" href=\"#导入导出\"></a> 导入导出</h4>\n<p>导出容器是指导出一个已经创建好的容器到一个文件，不管此时这个容器是否处于运行状态，可以使用<code>docker export CONTAINER</code>命令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost test]# docker run -tid ubuntu:14.04</span><br><span class=\"line\">547e74d47ec3eb30736aee22c1b7bf2acd6e71470a1ade4561007a10b3b14a36</span><br><span class=\"line\">[root@localhost test]# docker ps -a</span><br><span class=\"line\">CONTAINER ID     IMAGE            COMMAND          CREATED          STATUS           PORTS       NAMES</span><br><span class=\"line\">547e74d47ec3     ubuntu:14.04     &quot;/bin/bash&quot;      6 seconds ago    Up 5 seconds                 unruffled_jennings</span><br><span class=\"line\">[root@localhost test]# docker export 547 &gt; test.tar</span><br><span class=\"line\">[root@localhost test]# ls</span><br><span class=\"line\">test.tar </span><br></pre></td></tr></table></figure>\n<p>导出的文件又可以使用<code>docker import</code>命令导入，成为镜像。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost test]# ls</span><br><span class=\"line\">test.tar</span><br><span class=\"line\">[root@localhost test]# cat test.tar | docker import - test/ubuntu:v1.0</span><br><span class=\"line\">sha256:1ab7c63a882a9bc13ff4673081a237ba8785d47ba69458bfe976c0e5fc7b9c99</span><br><span class=\"line\">[root@localhost test]# docker images</span><br><span class=\"line\">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">test/ubuntu           v1.0                1ab7c63a882a        22 seconds ago      175MB</span><br><span class=\"line\">ubuntu                14.04-server        ae63a9e87332        2 hours ago         215MB</span><br><span class=\"line\">securityweekly/test   latest              68ceff3107a8        3 hours ago         188MB</span><br><span class=\"line\">ubuntu                14.04               dea1945146b9        6 weeks ago         188MB</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他命令\"><a class=\"markdownIt-Anchor\" href=\"#其他命令\"></a> 其他命令</h3>\n<ul>\n<li>\n<p><code>docker --help</code> 查看帮助命令</p>\n</li>\n<li>\n<p><code>docker logs</code>：用于查看容器的日志输出。</p>\n</li>\n<li>\n<p><code>docker volume ls</code> 查看 volume 列表</p>\n</li>\n<li>\n<p><code>docker network ls</code> 查看网络列表</p>\n</li>\n</ul>\n<p>这只是一些常用的 Docker 命令，Docker 还有很多其他的命令和功能。有关 Docker 命令的完整列表，可以参考 Docker 的<a href=\"https://docs.docker.com/engine/reference/commandline/run/\">官方文档</a></p>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<blockquote>\n<p><a href=\"https://docker.easydoc.net\">Docker 快速入门</a></p>\n<p><a href=\"https://www.jianshu.com/p/f272726db9c5\">Docker安装与基本操作</a></p>\n</blockquote>\n","categories":[{"name":"技术","path":"api/categories/技术.json"},{"name":"容器","path":"api/categories/容器.json"},{"name":"Docker","path":"api/categories/Docker.json"}],"tags":[{"name":"技术","path":"api/tags/技术.json"},{"name":"容器","path":"api/tags/容器.json"},{"name":"Docker","path":"api/tags/Docker.json"}]}