<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Biu&#39;s Blog</title>
  
  
  <link href="http://blog.heyb.top/atom.xml" rel="self"/>
  
  <link href="http://blog.heyb.top/"/>
  <updated>2022-10-18T10:01:20.825Z</updated>
  <id>http://blog.heyb.top/</id>
  
  <author>
    <name>He Yongbiao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Hexo】使用Hexo搭建个人博客</title>
    <link href="http://blog.heyb.top/2022/09/10/[hexo]-use-hexo-to-build-a-personal-blog.html"/>
    <id>http://blog.heyb.top/2022/09/10/[hexo]-use-hexo-to-build-a-personal-blog.html</id>
    <published>2022-09-09T16:00:00.000Z</published>
    <updated>2022-10-18T10:01:20.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>如首篇文章所说的，在很久之前我就想搭建自己的个人博客网站，以前在 csdn 的博客不知道为啥就被封禁了，懒得去申诉了。我也有想过自己开发一个，但是奈何审美水平不高，做一个好的前端页面自觉要花费很多功夫，搭建完成之后还要购买服务器来进行维护，都是比较耗费尽力的，后来找了一轮相关的资料，就找到 <a href="https://hexo.io/zh-cn/">Hexo</a> 这个博客的框架。觉得各方面都比较符合我的期望，下面会做一些入门的介绍。</p><h2 id="什么是hexo"><a class="markdownIt-Anchor" href="#什么是hexo"></a> 什么是Hexo</h2><p>Hexo 是是一个快速、简洁且高效的静态博客框架，基于 Node.js 渲染，支持 Markdown 语法且能通过命令行一键部署到 github、heroku、coding 等网站。拥有免费且丰富的主题和插件，文章的本体可以留存在本地备份随时修改。</p><p>官方网站：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p>Github: <a href="https://github.com/hexojs/hexo">https://github.com/hexojs/hexo</a></p><h2 id="安装前提环境"><a class="markdownIt-Anchor" href="#安装前提环境"></a> 安装前提环境</h2><p>安装前提：</p><p><a href="https://github.com">Github</a> | <a href="https://gitee.com/">Gitee</a>| <a href="https://coding.net/">Coding</a> ：资源/代码存放的仓库</p><p><a href="https://nodejs.org/zh-cn/">Nodejs</a> （Node 各系统安装教程：<a href="https://wsxc0617.github.io/2019/05/11/4-nodejs-install-setup/">【NODE】NODE.JS 安装配置(转)</a>） ：用来创建 Hexo 博客框架的</p><p><a href="https://git-scm.com/">Git</a>：将本地的 Hexo 内容提交到 Github 上去</p><h2 id="安装-hexo"><a class="markdownIt-Anchor" href="#安装-hexo"></a> 安装 Hexo</h2><p>安装好 Node 、 NPM 之后，输入安装 hexo 命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p>安装完成后，在自己选定的文件夹下（如 D:\Hexo），执行以下指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>Hexo 会进行初始化，在目标文件夹建立博客所需要的文件，随后我们安装依赖包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>就已经安装好了，我们可以通过 hexo help (或者 hexo h )来查看 hexo 支持的命令</p><p>以下为常用命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo g #完整命令为 hexo generate，用于生成静态文件</span><br><span class="line">hexo s #完整命令为 hexo server，用于启动服务器，主要用来本地预览</span><br><span class="line">hexo d #完整命令为 hexo deploy，用于将本地文件发布到 github 上</span><br><span class="line">hexo n #完整命令为 hexo new，用于新建一篇文章</span><br></pre></td></tr></table></figure><p>通常我们只要执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>然后用浏览器访问 <a href="http://localhost:4000">http://localhost:4000</a> 就可以在本地预览到博客内容了，hexo3.0使用的默认主题是landscape。</p><h2 id="注册github帐号"><a class="markdownIt-Anchor" href="#注册github帐号"></a> 注册Github帐号</h2><p>已经有Github帐号跳过此步，首先进入<a href="https://github.com/">Github</a>进行注册，用户名、邮箱和密码之后都需要用到，自己记好。</p><h2 id="创建repository"><a class="markdownIt-Anchor" href="#创建repository"></a> 创建repository</h2><p>repository相当于一个仓库，用来放置你的代码文件。首先，登陆进入<a href="https://github.com/">Github</a>，并进入个人页面——右上角自己的头像 —— Your repositories，然后选择<code>Repositories</code>，点击New，新建一个<code>repository</code></p><p>创建时，只需要填写Repository name即可，这个名字的格式必须为 [你的github名称].github.io，<a href="http://xn--biuhe-dq1hs2fdz5aotrzx0c.github.io">例如我的为biuhe.github.io</a>，点击<code>Create repository</code> 即可创建</p><h2 id="部署本地文件到github"><a class="markdownIt-Anchor" href="#部署本地文件到github"></a> 部署本地文件到github</h2><p>创建好Repository，我们可以先把博客放到 Github 上去看看效果。</p><p>编辑刚才创建的hexo目录下的 <code>_config.yml</code> 文件，在 <code>_config.yml</code> 最下方，添加如下配置(命令中的第一个biuhe为Github的用户名，第二个biuhe为之前New的Repository的名字，记得改成自己的。另外记得一点，hexo的配置文件中任何冒号后面都是带一个空格的，否则会出现异常：ERROR Deployer not found : github）</p><p>详细可参考：<a href="https://hexo.io/docs/one-command-deployment">https://hexo.io/docs/one-command-deployment</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">      <span class="attr">github:</span> <span class="string">git@github.com:biuhe/biuhe.github.io.git,master</span></span><br></pre></td></tr></table></figure><p>配置 <code>_config.yml </code>并保存。如果你是第一次使用 Github 或者是已经使用过，但没有配置过SSH，则可能需要配置一下:</p><p>在Git Bash输入以下指令（任意位置点击鼠标右键），检查是否已经存在了SSH keys。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al ~/.ssh</span><br></pre></td></tr></table></figure><p>如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件：<br><img src="http://image.tengj.top/hexo4.png" alt="img"><br>输入以下指令（邮箱就是你注册Github时候的邮箱)后，回车，出现提示让你输入的时候直接先回车，一共需要3次，如下图所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;123@qq.com&quot;</span><br></pre></td></tr></table></figure><p>然后键入以下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-agent -s</span><br></pre></td></tr></table></figure><p>出现<code>echo Agent pid xxxxx;</code> 继续输入指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>如果提示错误：<code>Could not open a connection to your authentication agent.</code>则输入以下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eval &#x27;ssh-agent -s&#x27;</span><br><span class="line">ssh-add</span><br></pre></td></tr></table></figure><p>会出现如：<code>Identity added: /c/Users/用户/.ssh/id_rsa (/c/users/用户/.ssh/id_rsa)</code></p><p>到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴，不放心的在执行下面命令后，先黏贴在记事本上)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>然后到Github里面，点击右上角个人头像——Settings，在左边菜单栏找到SSH and GPG keys，点击New SSH key，Title 随便命名，Key就粘贴上刚才复制的key，然后点Add SSH key，最后会让你重新输入下gitHub的密码即可</p><p>添加完成之后在自己电脑上执行 shell 命令进行测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>可能会看到有警告，没事，输入“yes”就好</p><p>出现类似：<code>You've successfully authenticated, but GitHub does not provide shell access.</code></p><p>就表示SSH配置好了，执行以下命令部署到Github上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>如果执行hexo d命令报下名错：<code>ERROR Deployer not found: git</code></p><p>就需要安装一下 <code>hexo-deployer-git</code> 这个模块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装好了继续执行<code>hexo d</code>部署命令，输入 github 的账号密码，就可以访问了。我的是： <a href="http://biuhe.github.io">biuhe.github.io</a></p><h2 id="发表一篇文章"><a class="markdownIt-Anchor" href="#发表一篇文章"></a> 发表一篇文章</h2><p>1.在Git Bash执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;my new post&quot;</span><br></pre></td></tr></table></figure><p>2.在创建的hexo目录下<code>source/_posts</code> 文件中打开 <a href="http://my-new-post.md">my-new-post.md</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: my new post #可以改成中文的，如“新文章”</span><br><span class="line">date: 2016-02-21 16:04:09 #发表日期，一般不改动</span><br><span class="line">categories: blog #文章文类</span><br><span class="line"><span class="section">tags: [文章] #文章标签，多于一项时用这种格式，只有一项时使用tags: blog</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"><span class="section">#这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上</span></span><br><span class="line">&lt;!--more--&gt;，在&lt;!--more--&gt;之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。</span><br></pre></td></tr></table></figure><p>写完文章后，你可以使用</p><ol><li><code>hexo g</code> 生成静态文件。</li><li><code>hexo s</code> 在本地预览效果</li><li><code>hexo d</code> 同步到 github，然后使用http:// <a href="http://xn--github-8h6jw94g4v9a.github.io">github用户名.github.io</a> 进行访问</li></ol><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>到这里，就算初步搭好了一个属于自己的独立博客，后续就是本地写文章然后部署最后发布就行。当然这只是最基本的流程，hexo提供了许多好看的主题，后续会进行讲解。</p><p>参考</p><blockquote><p>本文摘自：<a href="http://tengj.top/">嘟嘟独立</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;如首篇文章所说的，在很久之前我就想搭建自己的个人博客网站，以前在 csdn 的博客不知道为啥就被封禁了，懒得去申诉了。我也有想过自己开发一个，但</summary>
      
    
    
    
    <category term="写作" scheme="http://blog.heyb.top/categories/%E5%86%99%E4%BD%9C/"/>
    
    <category term="博客" scheme="http://blog.heyb.top/categories/%E5%86%99%E4%BD%9C/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="Hexo" scheme="http://blog.heyb.top/categories/%E5%86%99%E4%BD%9C/%E5%8D%9A%E5%AE%A2/Hexo/"/>
    
    
    <category term="博客" scheme="http://blog.heyb.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="Blog" scheme="http://blog.heyb.top/tags/Blog/"/>
    
    <category term="Hexo" scheme="http://blog.heyb.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>【Hexo】1-使用Hexo搭建个人博客</title>
    <link href="http://blog.heyb.top/2022/09/10/[hexo]-1---use-hexo-to-build-a-personal-blog.html"/>
    <id>http://blog.heyb.top/2022/09/10/[hexo]-1---use-hexo-to-build-a-personal-blog.html</id>
    <published>2022-09-09T16:00:00.000Z</published>
    <updated>2022-10-20T07:03:48.231Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>如首篇文章所说的，在很久之前我就想搭建自己的个人博客网站，以前在 csdn 的博客不知道为啥就被封禁了，懒得去申诉了。我也有想过自己开发一个，但是奈何审美水平不高，做一个好的前端页面自觉要花费很多功夫，搭建完成之后还要购买服务器来进行维护，都是比较耗费尽力的，后来找了一轮相关的资料，就找到 <a href="https://hexo.io/zh-cn/">Hexo</a> 这个博客的框架。觉得各方面都比较符合我的期望，下面会做一些入门的介绍。</p><h2 id="什么是hexo"><a class="markdownIt-Anchor" href="#什么是hexo"></a> 什么是Hexo</h2><p>Hexo 是是一个快速、简洁且高效的静态博客框架，基于 Node.js 渲染，支持 Markdown 语法且能通过命令行一键部署到 github、heroku、coding 等网站。拥有免费且丰富的主题和插件，文章的本体可以留存在本地备份随时修改。</p><p>官方网站：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p>Github: <a href="https://github.com/hexojs/hexo">https://github.com/hexojs/hexo</a></p><h2 id="优点和不足"><a class="markdownIt-Anchor" href="#优点和不足"></a> 优点和不足</h2><p>优点：免费；轻量；可以更改主题、增加插件等；原文内容在本地，迁移方便；</p><p>不足：依赖本地环境，不太适用于不同设备上随心发布；</p><h2 id="安装前置环境"><a class="markdownIt-Anchor" href="#安装前置环境"></a> 安装前置环境</h2><p>安装前提：</p><p><a href="https://github.com">Github</a> | <a href="https://gitee.com/">Gitee</a>| <a href="https://coding.net/">Coding</a> ：资源/代码存放的仓库，目前他们均提供了相关的 pages —— 一种免费的静态站点托管服务，让我们可以在仓库里托管和发布自己的静态网站页面。</p><p><a href="https://nodejs.org/zh-cn/">Nodejs</a> （Node 各系统安装教程：<a href="https://wsxc0617.github.io/2019/05/11/4-nodejs-install-setup/">【NODE】NODE.JS 安装配置(转)</a>） ：用来创建 Hexo 博客框架的，建议使用 Node.js 12.0 及以上版本</p><p><a href="https://git-scm.com/">Git</a>：将本地的 Hexo 内容提交到 Github 上去</p><h2 id="准备-github-pages-仓库"><a class="markdownIt-Anchor" href="#准备-github-pages-仓库"></a> 准备 Github Pages 仓库</h2><h3 id="注册github帐号"><a class="markdownIt-Anchor" href="#注册github帐号"></a> 注册Github帐号</h3><p>已经有Github帐号跳过此步，首先进入<a href="https://github.com/">Github</a>进行注册，用户名、邮箱和密码之后都需要用到，自己记好。</p><p>在 Shell 中本地全局设置用户名和邮箱</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub 用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure><h3 id="创建-ssh-密钥"><a class="markdownIt-Anchor" href="#创建-ssh-密钥"></a> 创建 SSH 密钥</h3><p>在 Shell 中运行以下命令并多次回车</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;Github 邮箱&quot;</span><br></pre></td></tr></table></figure><p>然后键入以下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-agent -s</span><br></pre></td></tr></table></figure><p>出现<code>echo Agent pid xxxxx;</code> 继续输入指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>如果提示错误：<code>Could not open a connection to your authentication agent.</code>则输入以下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eval &#x27;ssh-agent -s&#x27;</span><br><span class="line">ssh-add</span><br></pre></td></tr></table></figure><p>会出现如：<code>Identity added: /c/Users/用户/.ssh/id_rsa (/c/users/用户/.ssh/id_rsa)</code></p><p>到了这一步，就可以添加SSH key到你的Github账户了。输入以下指令，拷贝Key（或者进入 [C:\Users\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>然后到Github里面，点击右上角个人头像——Settings，在左边菜单栏找到SSH and GPG keys，点击New SSH key，Title 随便命名，Key就粘贴上刚才复制的key，然后点Add SSH key，最后会让你重新输入下gitHub的密码即可</p><p>添加完成之后在自己电脑上执行 shell 命令进行测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>可能会看到有警告，没事，输入“yes”就好</p><p>出现类似：<code>Hi xxx! You've successfully authenticated, but GitHub does not provide shell access.</code>就表示SSH配置好了</p><h3 id="创建repository"><a class="markdownIt-Anchor" href="#创建repository"></a> 创建repository</h3><p>repository相当于一个仓库，用来放置你的代码文件。首先，登陆进入<a href="https://github.com/">Github</a>，并进入个人页面——右上角自己的头像 —— Your repositories，然后选择<code>Repositories</code>，点击New，新建一个<code>repository</code></p><p>创建时，只需要填写Repository name即可，这个名字的格式必须为 [你的github名称].github.io，<a href="http://xn--biuhe-dq1hs2fdz5aotrzx0c.github.io">例如我的为biuhe.github.io</a>，点击<code>Create repository</code> 即可创建</p><h2 id="安装-hexo"><a class="markdownIt-Anchor" href="#安装-hexo"></a> 安装 Hexo</h2><p>安装好 Node 之后，输入安装 hexo 命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p>安装完成后，在自己选定的文件夹下（如 D:\Hexo），执行以下指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>Hexo 会进行初始化，在目标文件夹建立博客所需要的文件，随后我们安装依赖包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>就已经安装好了，我们可以通过 hexo help (或者 hexo h )来查看 hexo 支持的命令</p><p>以下为常用命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo help # 帮助</span><br><span class="line">hexo new &quot;文章名称&quot; # 新建文章</span><br><span class="line">hexo new page &quot;页面名称&quot; # 新建页面</span><br><span class="line">hexo g # 完整命令为 hexo generate，用于生成静态文件</span><br><span class="line">hexo d # 完整命令为 hexo deploy，用于将本地文件发布到 github 上</span><br><span class="line">hexo s # 完整命令为 hexo server，用于启动服务器，主要用来本地预览</span><br><span class="line">hexo n # 完整命令为 hexo new，用于新建一篇文章</span><br><span class="line">hexo clean # 清楚缓存文件等</span><br></pre></td></tr></table></figure><p>通常我们只要执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>然后用浏览器访问 <a href="http://localhost:4000">http://localhost:4000</a> 就可以在本地预览到博客内容了，hexo3.0使用的默认主题是landscape。</p><p>如果页面无法加载可能是端口被占用了，可以先在刚才命令窗口<code>Ctrl+C</code> 关闭服务器，使用 <code>hexo server -p 端口号</code> ，如<code>hexo server -p 5000 </code> 指定运行端口为 5000， 然后通过  http://localhost:5000进行访问</p><p>Hexo 博客目录文件结构如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml# 网站配置信息</span><br><span class="line">├── db.json# 数据</span><br><span class="line">├── node_modules# node下载的依赖模块（npm install生成的）</span><br><span class="line">├── package-lock.json # 锁定 node 安装模块的版本号</span><br><span class="line">├── package.json# node 依赖模块信息</span><br><span class="line">├── public# 网站文件</span><br><span class="line">├── scaffolds# 模板文件</span><br><span class="line">├── source# 用户资源（存放markdown文档）</span><br><span class="line">└── themes# 主题</span><br></pre></td></tr></table></figure><h2 id="部署github"><a class="markdownIt-Anchor" href="#部署github"></a> 部署github</h2><p>编辑刚才创建的hexo目录下的 <code>_config.yml</code> 文件，在 <code>_config.yml</code> 最下方，添加如下配置(命令中的第一个biuhe为Github的用户名，第二个biuhe为之前New的Repository的名字，记得改成自己的。另外记得一点，hexo的配置文件中任何冒号后面都是带一个空格的，否则会出现异常：ERROR Deployer not found : github）</p><p>详细可参考：<a href="https://hexo.io/docs/one-command-deployment">https://hexo.io/docs/one-command-deployment</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">      <span class="attr">github:</span> <span class="string">git@github.com:biuhe/biuhe.github.io.git,master</span></span><br></pre></td></tr></table></figure><p>配置 <code>_config.yml </code>并保存，执行以下命令部署到Github上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>如果执行hexo d命令报下名错：<code>ERROR Deployer not found: git</code></p><p>就需要安装一下 <code>hexo-deployer-git</code> 这个模块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装好了继续执行<code>hexo d</code>部署命令，输入 github 的账号密码，就可以访问了。我的是： <a href="http://biuhe.github.io">biuhe.github.io</a></p><h2 id="发表一篇文章"><a class="markdownIt-Anchor" href="#发表一篇文章"></a> 发表一篇文章</h2><p>1.在Git Bash执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;my new post&quot;</span><br></pre></td></tr></table></figure><p>2.在创建的hexo目录下<code>source/_posts</code> 文件中打开 <a href="http://my-new-post.md">my-new-post.md</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: my new post #可以改成中文的，如“新文章”</span><br><span class="line">date: 2016-02-21 16:04:09 #发表日期，一般不改动</span><br><span class="line">categories: blog #文章文类</span><br><span class="line"><span class="section">tags: [文章] #文章标签，多于一项时用这种格式，只有一项时使用tags: blog</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"><span class="section">#这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上</span></span><br><span class="line">&lt;!--more--&gt;，在&lt;!--more--&gt;之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。</span><br></pre></td></tr></table></figure><p>写完文章后，你可以使用</p><ol><li><code>hexo g</code> 生成静态文件。</li><li><code>hexo s</code> 在本地预览效果</li><li><code>hexo d</code> 同步到 github，然后使用http:// <a href="http://xn--github-8h6jw94g4v9a.github.io">github用户名.github.io</a> 进行访问</li></ol><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>到这里，就算初步搭好了一个属于自己的独立博客，后续就是本地写文章然后部署最后发布就行。当然这只是最基本的流程，hexo提供了许多好看的主题，后续会进行讲解。</p><p>参考</p><blockquote><p>本文摘自：<a href="http://tengj.top/">嘟嘟独立</a></p><p>官方中文文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;如首篇文章所说的，在很久之前我就想搭建自己的个人博客网站，以前在 csdn 的博客不知道为啥就被封禁了，懒得去申诉了。我也有想过自己开发一个，但</summary>
      
    
    
    
    <category term="写作" scheme="http://blog.heyb.top/categories/%E5%86%99%E4%BD%9C/"/>
    
    <category term="博客" scheme="http://blog.heyb.top/categories/%E5%86%99%E4%BD%9C/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="Hexo" scheme="http://blog.heyb.top/categories/%E5%86%99%E4%BD%9C/%E5%8D%9A%E5%AE%A2/Hexo/"/>
    
    
    <category term="博客" scheme="http://blog.heyb.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="Blog" scheme="http://blog.heyb.top/tags/Blog/"/>
    
    <category term="Hexo" scheme="http://blog.heyb.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>【Node】Node.js 版本管理升降级</title>
    <link href="http://blog.heyb.top/2022/08/19/%E3%80%90node%E3%80%91node.-js-version-management-promotion-and-demotion.html"/>
    <id>http://blog.heyb.top/2022/08/19/%E3%80%90node%E3%80%91node.-js-version-management-promotion-and-demotion.html</id>
    <published>2022-08-19T10:04:23.000Z</published>
    <updated>2022-10-18T09:59:09.664Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h2><p>因为 Node 版本不兼容，导致 <code>npm install</code> 或者 <code>npm run dev</code> 等操作报错。因此我们需要降级或者使用指定版本的 Node。</p><h2 id="版本管理模块-n"><a class="markdownIt-Anchor" href="#版本管理模块-n"></a> 版本管理模块 N</h2><ol><li>安装 Node 版本管理模块</li></ol><p><code>sudo npm install n -g</code></p><ol start="2"><li>根据需要安装版本</li></ol><p>例如 安装稳定版本  <code>sudo n stable</code> ，安装最新版本 <code>sudo n latest</code></p><ol start="3"><li>安装指定版本 Node 进行升降级</li></ol><p><code>sudo n v10.0.0</code></p><h2 id="版本管理工具-nvm-推荐"><a class="markdownIt-Anchor" href="#版本管理工具-nvm-推荐"></a> 版本管理工具 NVM （推荐）</h2><p>nvm （Node Version Manager）允许通过命令行快速安装和使用不同版本的节点</p><p>github: <a href="https://github.com/nvm-sh/nvm">https://github.com/nvm-sh/nvm</a></p><p>详细内容建议通过官方 <a href="http://readme.md">readme.md</a> 文档来进行学习</p><h3 id="windows"><a class="markdownIt-Anchor" href="#windows"></a> Windows</h3><p>github: <a href="https://github.com/coreybutler/nvm-windows">https://github.com/coreybutler/nvm-windows</a></p><p>下载地址到发布页进行下载 exe 结尾的安装程序进行安装：<a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a></p><h3 id="macos"><a class="markdownIt-Anchor" href="#macos"></a> macOS</h3><p>推荐使用 brew 进行下载管理</p><ol><li>安装</li></ol><p><code>brew install nvm</code></p><ol start="2"><li>安装后配置环境变量</li></ol><p><code>echo &quot;source $(brew --prefix nvm)/nvm.sh&quot; &gt;&gt; .bash_profile;</code></p><ol start="3"><li>使环境变量生效</li></ol><p><code>. ~/.bash_profile</code></p><ol start="4"><li>nvm use 指定版本</li></ol><p>如 <code>nvm use 12.13.0</code> 即可安装指定版本</p><ol start="5"><li>NVM 其他命令</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">nvm list 是查找本电脑上所有的node版本</span><br><span class="line">    - nvm list 查看已经安装的版本</span><br><span class="line">    - nvm list installed 查看已经安装的版本</span><br><span class="line">    - nvm list available 查看网络可以安装的版本</span><br><span class="line">nvm install &lt;version&gt; 安装指定版本node</span><br><span class="line">nvm use &lt;version&gt; 切换使用指定的版本node</span><br><span class="line">nvm ls 列出所有版本</span><br><span class="line">nvm current显示当前版本</span><br><span class="line">nvm alias &lt;name&gt; &lt;version&gt; ## 给不同的版本号添加别名</span><br><span class="line">nvm unalias &lt;name&gt; ## 删除已定义的别名</span><br><span class="line">nvm reinstall-packages &lt;version&gt; ## 在当前版本node环境下，重新全局安装指定版本号的npm包</span><br><span class="line">nvm on 打开nodejs控制</span><br><span class="line">nvm off 关闭nodejs控制</span><br><span class="line">nvm proxy 查看设置与代理</span><br><span class="line">nvm node_mirror [url] 设置或者查看setting.txt中的node_mirror，如果不设置的默认是 https://nodejs.org/dist/</span><br><span class="line"></span><br><span class="line">nvm npm_mirror [url] 设置或者查看setting.txt中的npm_mirror,如果不设置的话默认的是： https://github.com/npm/npm/archive/.</span><br><span class="line">nvm uninstall &lt;version&gt; 卸载制定的版本</span><br><span class="line">nvm use [version] [arch] 切换制定的node版本和位数</span><br><span class="line">nvm root [path] 设置和查看root路径</span><br><span class="line">nvm version 查看当前的版本</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#背景&quot;&gt;&lt;/a&gt; 背景&lt;/h2&gt;
&lt;p&gt;因为 Node 版本不兼容，导致 &lt;code&gt;npm install&lt;/code&gt; 或者 &lt;code&gt;npm run dev&lt;/code&gt; 等操</summary>
      
    
    
    
    <category term="技术" scheme="http://blog.heyb.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="前端" scheme="http://blog.heyb.top/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Node" scheme="http://blog.heyb.top/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/Node/"/>
    
    
    <category term="前端" scheme="http://blog.heyb.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Node" scheme="http://blog.heyb.top/tags/Node/"/>
    
    <category term="NVM" scheme="http://blog.heyb.top/tags/NVM/"/>
    
  </entry>
  
  <entry>
    <title>【Node】Node.js 安装配置</title>
    <link href="http://blog.heyb.top/2022/08/12/%E3%80%90node%E3%80%91node.-js-installation-configuration.html"/>
    <id>http://blog.heyb.top/2022/08/12/%E3%80%90node%E3%80%91node.-js-installation-configuration.html</id>
    <published>2022-08-11T16:00:00.000Z</published>
    <updated>2022-10-19T06:55:20.736Z</updated>
    
    <content type="html"><![CDATA[<p>本文摘自：<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">https://www.runoob.com/nodejs/nodejs-install-setup.html</a></p><p>本章节我们将向大家介绍在 Windows 和 Linux 上安装 Node.js 的方法。</p><p>本安装教程以 Node.js v4.4.3 LTS(长期支持版本)版本为例。</p><p>Node.js 安装包及源码下载地址为：<a href="https://nodejs.org/en/download/%E3%80%82">https://nodejs.org/en/download/。</a></p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/download-page.jpg" alt="nodejs_download"></p><p>你可以根据不同平台系统选择你需要的 Node.js 安装包。</p><p>Node.js 历史版本下载地址：<a href="https://nodejs.org/dist/">https://nodejs.org/dist/</a></p><p>**注意：**Linux 上安装 Node.js 需要安装 Python 2.6 或 2.7 ，不建议安装 Python 3.0 以上版本。</p><h2 id="windows-上安装-nodejs"><a class="markdownIt-Anchor" href="#windows-上安装-nodejs"></a> Windows 上安装 Node.js</h2><p>你可以采用以下两种方式来安装。</p><h3 id="1-windows-安装包msi"><a class="markdownIt-Anchor" href="#1-windows-安装包msi"></a> 1、Windows 安装包(.msi)</h3><p>32 位安装包下载地址 : <a href="https://nodejs.org/dist/v4.4.3/node-v4.4.3-x86.msi">https://nodejs.org/dist/v4.4.3/node-v4.4.3-x86.msi</a></p><p>64 位安装包下载地址 : <a href="https://nodejs.org/dist/v4.4.3/node-v4.4.3-x64.msi">https://nodejs.org/dist/v4.4.3/node-v4.4.3-x64.msi</a></p><p>本文实例以 v0.10.26 版本为例，其他版本类似， 安装步骤：</p><p>步骤 1 : 双击下载后的安装包 <strong>v0.10.26</strong>，如下所示：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/install-node-msi-version-on-windows-step1.png" alt="install-node-msi-version-on-windows-step1"></p><p>步骤 2 : 点击以上的Run(运行)，将出现如下界面：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/install-node-msi-version-on-windows-step2.png" alt="install-node-msi-version-on-windows-step2"></p><p>步骤 3 : 勾选接受协议选项，点击 next（下一步） 按钮 :</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/install-node-msi-version-on-windows-step3.png" alt="install-node-msi-version-on-windows-step3"></p><p>步骤 4 : Node.js默认安装目录为 &quot;C:\Program Files\nodejs&quot; , 你可以修改目录，并点击 next（下一步）：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/install-node-msi-version-on-windows-step4.png" alt="install-node-msi-version-on-windows-step4"></p><p>步骤 5 : 点击树形图标来选择你需要的安装模式 , 然后点击下一步 next（下一步）</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/install-node-msi-version-on-windows-step5.png" alt="install-node-msi-version-on-windows-step5"></p><p>步骤 6 :点击 Install（安装） 开始安装Node.js。你也可以点击 Back（返回）来修改先前的配置。 然后并点击 next（下一步）：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/install-node-msi-version-on-windows-step6.png" alt="install-node-msi-version-on-windows-step6"></p><p>安装过程：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/install-node-msi-version-on-windows-step7.png" alt="install-node-msi-version-on-windows-step7"></p><p>点击 Finish（完成）按钮退出安装向导。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/install-node-msi-version-on-windows-step8.png" alt="install-node-msi-version-on-windows-step8"></p><p>检测PATH环境变量是否配置了Node.js，点击开始=》运行=》输入&quot;cmd&quot; =&gt; 输入命令&quot;path&quot;，输出如下结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PATH=C:\oraclexe\app\oracle\product\10.2.0\server\bin;C:\Windows\system32;</span><br><span class="line">C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;</span><br><span class="line">c:\python32\python;C:\MinGW\bin;C:\Program Files\GTK2-Runtime\lib;</span><br><span class="line">C:\Program Files\MySQL\MySQL Server 5.5\bin;C:\Program Files\nodejs\;</span><br><span class="line">C:\Users\rg\AppData\Roaming\npm</span><br></pre></td></tr></table></figure><p>我们可以看到环境变量中已经包含了C:\Program Files\nodejs\</p><p>检查Node.js版本，执行<code>node --version</code>  得到版本号如： v0.10.26</p><p>如果你获得以上输出结果，说明你已经成功安装了Node.js</p><h3 id="2-windows-二进制文件-exe安装"><a class="markdownIt-Anchor" href="#2-windows-二进制文件-exe安装"></a> 2、Windows 二进制文件 (.exe)安装</h3><p>32 位安装包下载地址 : <a href="http://nodejs.org/dist/v0.10.26/node.exe">http://nodejs.org/dist/v0.10.26/node.exe</a></p><p>64 位安装包下载地址 : <a href="http://nodejs.org/dist/v0.10.26/x64/node.exe">http://nodejs.org/dist/v0.10.26/x64/node.exe</a></p><p><strong>安装步骤</strong></p><p>步骤 1 : 双击下载的安装包 Node.exe ，将出现如下界面 :</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/install-node-exe-on-windows-step1.png" alt="install-node-exe-on-windows-step1"></p><p>点击 Run（运行）按钮将出现命令行窗口：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/install-node-exe-on-windows-step21.png" alt="install-node-exe-on-windows-step21"></p><h3 id="版本测试"><a class="markdownIt-Anchor" href="#版本测试"></a> 版本测试</h3><p>进入 node.exe 所在的目录，如下所示：</p><p>执行<code>node --version</code>  得到版本号如： v0.10.26</p><p>如果你获得以上输出结果，说明你已经成功安装了Node.js</p><h2 id="linux-上安装-nodejs"><a class="markdownIt-Anchor" href="#linux-上安装-nodejs"></a> Linux 上安装 Node.js</h2><h3 id="直接使用已编译好的包"><a class="markdownIt-Anchor" href="#直接使用已编译好的包"></a> 直接使用已编译好的包</h3><p>Node 官网已经把 linux 下载版本更改为已编译好的版本了，我们可以直接下载解压后使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">wget https://nodejs.org/dist/v10.9.0/node-v10.9.0-linux-x64.tar.xz    // 下载</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tar xf  node-v10.9.0-linux-x64.tar.xz       // 解压</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span> node-v10.9.0-linux-x64/                  // 进入解压目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">./bin/node -v                               // 执行node命令 查看版本</span></span><br><span class="line">v10.9.0</span><br></pre></td></tr></table></figure><p>解压文件的 bin 目录底下包含了 node、npm 等命令，我们可以使用 ln 命令来设置软连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/software/nodejs/bin/npm   /usr/local/bin/ </span><br><span class="line">ln -s /usr/software/nodejs/bin/node   /usr/local/bin/</span><br></pre></td></tr></table></figure><h3 id="ubuntu-源码安装-nodejs"><a class="markdownIt-Anchor" href="#ubuntu-源码安装-nodejs"></a> Ubuntu 源码安装 Node.js</h3><p>以下部分我们将介绍在 Ubuntu Linux 下使用源码安装 Node.js 。 其他的 Linux 系统，如 Centos 等类似如下安装步骤。</p><p>在 Github 上获取 Node.js 源码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo git <span class="built_in">clone</span> https://github.com/nodejs/node.git</span></span><br><span class="line">Cloning into &#x27;node&#x27;...</span><br></pre></td></tr></table></figure><p>修改目录权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">chmod</span> -R 755 node</span></span><br></pre></td></tr></table></figure><p>使用 <strong>./configure</strong> 创建编译文件，并按照：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> node</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo ./configure</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo make</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo make install</span></span><br></pre></td></tr></table></figure><p>查看 node 版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">node --version</span></span><br><span class="line">v0.10.25</span><br></pre></td></tr></table></figure><h3 id="ubuntu-apt-get命令安装"><a class="markdownIt-Anchor" href="#ubuntu-apt-get命令安装"></a> Ubuntu apt-get命令安装</h3><p>命令格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure><h3 id="centos-下源码安装-nodejs"><a class="markdownIt-Anchor" href="#centos-下源码安装-nodejs"></a> CentOS 下源码安装 Node.js</h3><ol><li>下载源码，你需要在 <a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a> 下载最新的Nodejs版本，本文以v0.10.24为例:</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src/</span><br><span class="line">wget http://nodejs.org/dist/v0.10.24/node-v0.10.24.tar.gz</span><br></pre></td></tr></table></figure><ol start="2"><li>解压源码</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf node-v0.10.24.tar.gz</span><br></pre></td></tr></table></figure><ol start="3"><li>编译安装</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd node-v0.10.24</span><br><span class="line">./configure --prefix=/usr/local/node/0.10.24</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><ol start="3"><li>配置NODE_HOME，进入profile编辑环境变量</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>设置 nodejs 环境变量，在 <em><strong>export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL</strong></em> 一行的上面添加如下内容:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">set</span> <span class="keyword">for</span> nodejs</span></span><br><span class="line">export NODE_HOME=/usr/local/node/0.10.24</span><br><span class="line">export PATH=$NODE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p>:wq保存并退出，编译/etc/profile 使配置生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>验证是否安装配置成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>输出 v0.10.24 表示配置成功</p><p>npm模块安装路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/node/0.10.24/lib/node_modules/</span><br></pre></td></tr></table></figure><p>**注：**Nodejs 官网提供了编译好的 Linux 二进制包，你也可以下载下来直接应用。</p><h2 id="mac-os-上安装"><a class="markdownIt-Anchor" href="#mac-os-上安装"></a> Mac OS 上安装</h2><p>你可以通过以下两种方式在 Mac OS 上来安装 node：</p><h3 id="pkg"><a class="markdownIt-Anchor" href="#pkg"></a> pkg</h3><h4 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h4><p>在<a href="https://nodejs.org/en/download/">官方下载网站</a>下载 pkg 安装包，直接点击安装即可。</p><h4 id="卸载"><a class="markdownIt-Anchor" href="#卸载"></a> 卸载</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /usr/local/&#123;bin/&#123;node,npm&#125;,lib/node_modules/npm,lib/node,share/man/*/node.*&#125;</span><br></pre></td></tr></table></figure><h3 id="brew"><a class="markdownIt-Anchor" href="#brew"></a> brew</h3><h4 id="安装-2"><a class="markdownIt-Anchor" href="#安装-2"></a> 安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>验证是否安装配置成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><h4 id="卸载-2"><a class="markdownIt-Anchor" href="#卸载-2"></a> 卸载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall node --ignore-dependencies </span><br></pre></td></tr></table></figure><p>如果提示异常 <code>Error: No such keg: /usr/local/Cellar/node</code></p><p>则执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall node --force</span><br></pre></td></tr></table></figure><h2 id="配置镜像"><a class="markdownIt-Anchor" href="#配置镜像"></a> 配置镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前镜像</span></span><br><span class="line">npm config get registry</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置镜像为 淘宝镜像</span></span><br><span class="line">npm config set registry http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文摘自：&lt;a href=&quot;https://www.runoob.com/nodejs/nodejs-install-setup.html&quot;&gt;https://www.runoob.com/nodejs/nodejs-install-setup.html&lt;/a&gt;&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="技术" scheme="http://blog.heyb.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="前端" scheme="http://blog.heyb.top/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Node" scheme="http://blog.heyb.top/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/Node/"/>
    
    
    <category term="前端" scheme="http://blog.heyb.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Node" scheme="http://blog.heyb.top/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>hello hexo</title>
    <link href="http://blog.heyb.top/2022/08/10/hello-hexo.html"/>
    <id>http://blog.heyb.top/2022/08/10/hello-hexo.html</id>
    <published>2022-08-10T14:32:54.000Z</published>
    <updated>2022-08-12T07:05:12.018Z</updated>
    
    <content type="html"><![CDATA[<p>  我刚洗好澡坐下来写下这一开篇文章，似乎已经很久很久没有这样安静下来的写一些东西了。 自工作以来，我总是不断的在吸收摄入知识，已经很久没有像以前初高中时候玩qq空间那样，写一些感想，输出一些内容了。这个时代不断的飞速发展，节奏越来越快，到处都是微博、短视频，甚至教学内容也都逐渐碎片化。我想是时候该慢一些，拾回当初的自己，也检视这十年的自己。</p><h2 id="生活"><a class="markdownIt-Anchor" href="#生活"></a> 生活</h2><p>  毕业后什么都想尝试，买了很多杂七杂八的电子产品。到最近已经「没有那种世俗欲望了.jpg」，趋向于寻求稳定、适己的事物以及状态。</p><p>  一直以来都想着自己从零开始开发一个博客系统。但是现实很骨感，一是除去了工作和睡觉并没有留给我太多的时间。二是学艺不精，想要实现前端的界面好的效果实在是太麻烦，总是想着要做就做到最好。但往往一个好的东西是需要时间去雕琢的，开发项目也是如此，现在知名的应用大多最初版本都不是尽善尽美的。现在安定下来，在自己的笔记本电脑上码字，让我有一种归属感，也重新拾起了搭建自己的小天地的想法。这博客可能更多的记录生活中的一些琐事，对生活的思考，和朋友的一些故事等等，也会整理和收纳在工作中遇到的一些技术上的问题以及一些有趣的文章。</p><p>  可能文章内容没有别人的那么有趣，文笔流畅。但总算是个好的开始，写多了，慢慢拓展，总会比什么都不做得到的进步更多，是吧？</p><h2 id="感情"><a class="markdownIt-Anchor" href="#感情"></a> 感情</h2><p>  最近我常常有一种觉得自己处在一个舒适满意的环境中，我常和小环说我好舒服呀。</p><p>  我觉得我们似乎开始步入了「长期稳定的亲密关系」之中。在一起近两年的时间了，除了逢年过节回老家，几乎每天都是面对面的在一起，我仍然想着每天下班第一时间见到她，每天仍然还有很多事情叭叭叭的想和她分享。大部分的时候我们的想法出奇的一致，喜好也大抵相同，所以不用特别花心思去磨合、迁就对方。</p><p>  我自觉成长了很多，抱着学习、经营的心态，去维护我们这段感情。期望我们能步入下一个阶段 :)</p><h2 id="学习"><a class="markdownIt-Anchor" href="#学习"></a> 学习</h2><p>  有些东西真的不去面对的话就会变成心结，甚至多年以后做梦还是会觉得遗憾当初没有好好把握。所以我现在仍要花费比之前在学校更多的努力才觉得能弥补自己一些。去年底开始报一些班课学习，等课程完结之后我再说出来吧。</p><p>  不过我感觉毕业之后学习东西才开始快起来，对于一些新鲜的东西接纳远比之前在校的时候更快一些，我想也可能跟自己工作了这几年的经验有关系，能对于事物理解得更深刻。</p><p>  今年更多的是学习学科方向，把以前落下的数学、英语知识补一补。今年比较混乱，忙着找工作（算是借口吧），技术上反而没有太多的长进。计划今年考取PMP资格认证。最近开始写博客后，打算把之前的知识点给整理一下，再查漏补缺。</p><p>  感觉自己学的东西越多，就越觉得自己渺小。所以想把自己知道的东西整理下来，让别人少走一些弯路。</p><h2 id="工作"><a class="markdownIt-Anchor" href="#工作"></a> 工作</h2><p>  今年是奔波的一年。去年离开了邮政从广州回到了南宁，期望在南宁能够长远发展。去了小环所在的教育集团当技术主管，本想着能施展自己所长，却因为双减政策导致集团转型，整个部门都被裁剪。后来经过总监介绍去了他朋友的一家电力外包公司，但是公司各方面都存在问题，恶性循环，到后面已经拖欠三四个月工资，已经不是凭我一己之力能够做出改变的，加之南宁的互联网大环境还是有待发展，所以考虑了还是先继续回到广州工作。</p><p>  回广州面试了近一个半月，十几家公司，几经波折，最后找到一个在外企做服务支撑的公司。也感谢盛斌、陈鑫他们几个好友对我的鼓励，毕竟多年前我都未曾敢想象自己现在能拿到这个工资，从国企几年再出来已经不太清楚自己的市场定位了，是他们一直都跟我说可以再开高一些工资，让我觉得我的能力是值得的。</p><p>  外国团队的领导对我们也很照顾，团队小伙伴的氛围也很好。各方面的工作安排都很合理，不像国内团队那么内卷，能留给自己的时间很充裕，这一点是让我最喜欢的地方。这能让我在业余时间做很多自己想要做的事情。甚至可以常态化 WFH（work for home居家办公）。</p><p>  当然凡事是有两面性的，不好的地方就是和外国团队有时差，花费在沟通的时间比较多。整体而言做事效率比以前低了许多。开会聊天和文档也都是用英语，对自己英语考验还是挺大的。还有就是我们组缺少Tech Lead，很多问题只能去其他各组大佬来支持，很多流程不太熟悉，明明很简单的东西还要去咨询别人（很多时候只是需要别人确定是或者否），所以自己会有一种挫败感。</p><p>  现在也知道，工作嘛，总是有开心和不如意的地方，调整好心态再继续努力了。自己觉得开心的一点是已经开始能够听得懂一些带口音的英语了，也开始逐渐尝试摆脱翻译工具，觉得学习英语也是一件不错的事情。</p><h2 id="结束语"><a class="markdownIt-Anchor" href="#结束语"></a> 结束语</h2><p>  今年是一个平凡又不普通的一年，经历过这些才越觉得平凡的可贵。今年只剩一个季度，希望以后的日子自己和身边的人都能够健健康康快快乐乐的就足够了，不求风骚惊天下，但求猥琐动世人。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;  我刚洗好澡坐下来写下这一开篇文章，似乎已经很久很久没有这样安静下来的写一些东西了。 自工作以来，我总是不断的在吸收摄入知识，已经很久没有像以前初高中时候玩qq空间那样，写一些感想，输出一些内容了。这个时代不断的飞速发展，节奏越来越快，到处都是微博、短视频，甚至教学内容也</summary>
      
    
    
    
    <category term="个人" scheme="http://blog.heyb.top/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
    <category term="个人" scheme="http://blog.heyb.top/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
</feed>
