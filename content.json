{"meta":{"title":"Biu's Blog","subtitle":"","description":"","author":"He Yongbiao","url":"http://blog.heyb.top","root":"/"},"pages":[{"title":"About","date":"2022-08-07T14:46:31.562Z","updated":"2022-08-07T14:46:31.559Z","comments":false,"path":"about/index.html","permalink":"http://blog.heyb.top/about/index.html","excerpt":"","text":"联系我 邮箱：wsxc_0617@sina.cn 微信：biubiu20201001 GitHub: https://github.com/biuhe"},{"title":"Books","date":"2022-08-15T02:27:07.862Z","updated":"2022-08-08T09:52:08.744Z","comments":false,"path":"books/index.html","permalink":"http://blog.heyb.top/books/index.html","excerpt":"","text":""},{"title":"categories","date":"2022-08-15T02:27:07.868Z","updated":"2022-08-07T10:43:28.631Z","comments":false,"path":"categories/index.html","permalink":"http://blog.heyb.top/categories/index.html","excerpt":"","text":""},{"title":"Links","date":"2022-08-15T02:27:07.867Z","updated":"2022-08-08T09:53:19.202Z","comments":false,"path":"links/index.html","permalink":"http://blog.heyb.top/links/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-08-15T02:27:07.865Z","updated":"2022-08-07T10:43:28.837Z","comments":false,"path":"tags/index.html","permalink":"http://blog.heyb.top/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2022-08-15T02:27:07.846Z","updated":"2022-08-07T10:43:28.768Z","comments":false,"path":"repository/index.html","permalink":"http://blog.heyb.top/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"【Hexo】1-使用Hexo搭建个人博客","slug":"写作/hexo/【Hexo】1-使用Hexo搭建个人博客","date":"2022-09-09T16:00:00.000Z","updated":"2022-10-20T13:22:31.351Z","comments":true,"path":"2022/09/10/[hexo]-1---use-hexo-to-build-a-personal-blog.html","link":"","permalink":"http://blog.heyb.top/2022/09/10/[hexo]-1---use-hexo-to-build-a-personal-blog.html","excerpt":"","text":"前言 如首篇文章所说的，在很久之前我就想搭建自己的个人博客网站，以前在 csdn 的博客不知道为啥就被封禁了，懒得去申诉了。我也有想过自己开发一个，但是奈何审美水平不高，做一个好的前端页面自觉要花费很多功夫，搭建完成之后还要购买服务器来进行维护，都是比较耗费尽力的，后来找了一轮相关的资料，就找到 Hexo 这个博客的框架。觉得各方面都比较符合我的期望，下面会做一些入门的介绍。 什么是Hexo Hexo 是是一个快速、简洁且高效的静态博客框架，基于 Node.js 渲染，支持 Markdown 语法且能通过命令行一键部署到 github、heroku、coding 等网站。拥有免费且丰富的主题和插件，文章的本体可以留存在本地备份随时修改。 官方网站：https://hexo.io/zh-cn/ Github: https://github.com/hexojs/hexo 优点和不足 优点：免费；轻量；可以更改主题、增加插件等；原文内容在本地，迁移方便； 不足：依赖本地环境，不太适用于不同设备上随心发布； 安装前置环境 安装前提： Github | Gitee| Coding ：资源/代码存放的仓库，目前他们均提供了相关的 pages —— 一种免费的静态站点托管服务，让我们可以在仓库里托管和发布自己的静态网站页面。 Nodejs （Node 各系统安装教程：【NODE】NODE.JS 安装配置(转)） ：用来创建 Hexo 博客框架的，建议使用 Node.js 12.0 及以上版本 Git：将本地的 Hexo 内容提交到 Github 上去 准备 Github Pages 仓库 注册Github帐号 已经有Github帐号跳过此步，首先进入Github进行注册，用户名、邮箱和密码之后都需要用到，自己记好。 在 Shell 中本地全局设置用户名和邮箱 12git config --global user.name &quot;GitHub 用户名&quot;git config --global user.email &quot;GitHub 邮箱&quot; 创建 SSH 密钥 在 Shell 中运行以下命令并多次回车 1ssh-keygen -t rsa -C &quot;Github 邮箱&quot; 然后键入以下指令： 1ssh-agent -s 出现echo Agent pid xxxxx; 继续输入指令： 1ssh-add ~/.ssh/id_rsa 如果提示错误：Could not open a connection to your authentication agent.则输入以下指令： 12eval &#x27;ssh-agent -s&#x27;ssh-add 会出现如：Identity added: /c/Users/用户/.ssh/id_rsa (/c/users/用户/.ssh/id_rsa) 到了这一步，就可以添加SSH key到你的Github账户了。输入以下指令，拷贝Key（或者进入 [C:\\Users\\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。)： 1clip &lt; ~/.ssh/id_rsa.pub 然后到Github里面，点击右上角个人头像——Settings，在左边菜单栏找到SSH and GPG keys，点击New SSH key，Title 随便命名，Key就粘贴上刚才复制的key，然后点Add SSH key，最后会让你重新输入下gitHub的密码即可 添加完成之后在自己电脑上执行 shell 命令进行测试 1ssh -T git@github.com 可能会看到有警告，没事，输入“yes”就好 出现类似：Hi xxx! You've successfully authenticated, but GitHub does not provide shell access.就表示SSH配置好了 创建repository repository相当于一个仓库，用来放置你的代码文件。首先，登陆进入Github，并进入个人页面——右上角自己的头像 —— Your repositories，然后选择Repositories，点击New，新建一个repository 创建时，只需要填写Repository name即可，这个名字的格式必须为 [你的github名称].github.io，例如我的为biuhe.github.io，点击Create repository 即可创建 安装 Hexo 安装好 Node 之后，输入安装 hexo 命令： 1npm install -g hexo 安装完成后，在自己选定的文件夹下（如 D:\\Hexo），执行以下指令 1hexo init Hexo 会进行初始化，在目标文件夹建立博客所需要的文件，随后我们安装依赖包： 1npm install 就已经安装好了，我们可以通过 hexo help (或者 hexo h )来查看 hexo 支持的命令 以下为常用命令： 12345678hexo help # 帮助hexo new &quot;文章名称&quot; # 新建文章hexo new page &quot;页面名称&quot; # 新建页面hexo g # 完整命令为 hexo generate，用于生成静态文件hexo d # 完整命令为 hexo deploy，用于将本地文件发布到 github 上hexo s # 完整命令为 hexo server，用于启动服务器，主要用来本地预览hexo n # 完整命令为 hexo new，用于新建一篇文章hexo clean # 清楚缓存文件等 通常我们只要执行 12hexo ghexo s 然后用浏览器访问 http://localhost:4000 就可以在本地预览到博客内容了，hexo3.0使用的默认主题是landscape。 如果页面无法加载可能是端口被占用了，可以先在刚才命令窗口Ctrl+C 关闭服务器，使用 hexo server -p 端口号 ，如hexo server -p 5000 指定运行端口为 5000， 然后通过 http://localhost:5000进行访问 Hexo 博客目录文件结构如下： 12345678910.├── _config.yml # 网站配置信息├── db.json # 数据├── node_modules # node下载的依赖模块（npm install生成的）├── package-lock.json # 锁定 node 安装模块的版本号├── package.json # node 依赖模块信息├── public # 网站文件├── scaffolds # 模板文件├── source # 用户资源（存放markdown文档）└── themes # 主题 部署github 编辑刚才创建的hexo目录下的 _config.yml 文件，在 _config.yml 最下方，添加如下配置(命令中的第一个biuhe为Github的用户名，第二个biuhe为之前New的Repository的名字，记得改成自己的。另外记得一点，hexo的配置文件中任何冒号后面都是带一个空格的，否则会出现异常：ERROR Deployer not found : github） 详细可参考：https://hexo.io/docs/one-command-deployment 1234deploy: type: git repo: github: git@github.com:biuhe/biuhe.github.io.git,master 配置 _config.yml 并保存，执行以下命令部署到Github上。 12hexo ghexo d 如果执行hexo d命令报下名错：ERROR Deployer not found: git 就需要安装一下 hexo-deployer-git 这个模块： 1npm install hexo-deployer-git --save 安装好了继续执行hexo d部署命令，输入 github 的账号密码，就可以访问了。我的是： biuhe.github.io 发表一篇文章 1.在Git Bash执行命令： 1hexo new &quot;my new post&quot; 2.在创建的hexo目录下source/_posts 文件中打开 my-new-post.md 1234567title: my new post #可以改成中文的，如“新文章”date: 2016-02-21 16:04:09 #发表日期，一般不改动categories: blog #文章文类tags: [文章] #文章标签，多于一项时用这种格式，只有一项时使用tags: blog---#这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上&lt;!--more--&gt;，在&lt;!--more--&gt;之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。 写完文章后，你可以使用 hexo g 生成静态文件。 hexo s 在本地预览效果 hexo d 同步到 github，然后使用http:// github用户名.github.io 进行访问 总结 到这里，就算初步搭好了一个属于自己的独立博客，后续就是本地写文章然后部署最后发布就行。当然这只是最基本的流程，hexo提供了许多好看的主题，后续会进行讲解。 参考 本文摘自：嘟嘟独立 官方中文文档：https://hexo.io/zh-cn/docs/","categories":[{"name":"写作","slug":"写作","permalink":"http://blog.heyb.top/categories/%E5%86%99%E4%BD%9C/"},{"name":"博客","slug":"写作/博客","permalink":"http://blog.heyb.top/categories/%E5%86%99%E4%BD%9C/%E5%8D%9A%E5%AE%A2/"},{"name":"Hexo","slug":"写作/博客/Hexo","permalink":"http://blog.heyb.top/categories/%E5%86%99%E4%BD%9C/%E5%8D%9A%E5%AE%A2/Hexo/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://blog.heyb.top/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"Blog","slug":"Blog","permalink":"http://blog.heyb.top/tags/Blog/"},{"name":"Hexo","slug":"Hexo","permalink":"http://blog.heyb.top/tags/Hexo/"}]},{"title":"【Node】Node.js 版本管理升降级","slug":"技术/node/【Node】Node.js 版本管理升降级","date":"2022-08-19T10:04:23.000Z","updated":"2022-10-18T09:59:09.664Z","comments":true,"path":"2022/08/19/【node】node.-js-version-management-promotion-and-demotion.html","link":"","permalink":"http://blog.heyb.top/2022/08/19/%E3%80%90node%E3%80%91node.-js-version-management-promotion-and-demotion.html","excerpt":"","text":"背景 因为 Node 版本不兼容，导致 npm install 或者 npm run dev 等操作报错。因此我们需要降级或者使用指定版本的 Node。 版本管理模块 N 安装 Node 版本管理模块 sudo npm install n -g 根据需要安装版本 例如 安装稳定版本 sudo n stable ，安装最新版本 sudo n latest 安装指定版本 Node 进行升降级 sudo n v10.0.0 版本管理工具 NVM （推荐） nvm （Node Version Manager）允许通过命令行快速安装和使用不同版本的节点 github: https://github.com/nvm-sh/nvm 详细内容建议通过官方 readme.md 文档来进行学习 Windows github: https://github.com/coreybutler/nvm-windows 下载地址到发布页进行下载 exe 结尾的安装程序进行安装：https://github.com/coreybutler/nvm-windows/releases macOS 推荐使用 brew 进行下载管理 安装 brew install nvm 安装后配置环境变量 echo &quot;source $(brew --prefix nvm)/nvm.sh&quot; &gt;&gt; .bash_profile; 使环境变量生效 . ~/.bash_profile nvm use 指定版本 如 nvm use 12.13.0 即可安装指定版本 NVM 其他命令 123456789101112131415161718192021nvm list 是查找本电脑上所有的node版本 - nvm list 查看已经安装的版本 - nvm list installed 查看已经安装的版本 - nvm list available 查看网络可以安装的版本nvm install &lt;version&gt; 安装指定版本nodenvm use &lt;version&gt; 切换使用指定的版本nodenvm ls 列出所有版本nvm current显示当前版本nvm alias &lt;name&gt; &lt;version&gt; ## 给不同的版本号添加别名nvm unalias &lt;name&gt; ## 删除已定义的别名nvm reinstall-packages &lt;version&gt; ## 在当前版本node环境下，重新全局安装指定版本号的npm包nvm on 打开nodejs控制nvm off 关闭nodejs控制nvm proxy 查看设置与代理nvm node_mirror [url] 设置或者查看setting.txt中的node_mirror，如果不设置的默认是 https://nodejs.org/dist/nvm npm_mirror [url] 设置或者查看setting.txt中的npm_mirror,如果不设置的话默认的是： https://github.com/npm/npm/archive/.nvm uninstall &lt;version&gt; 卸载制定的版本nvm use [version] [arch] 切换制定的node版本和位数nvm root [path] 设置和查看root路径nvm version 查看当前的版本","categories":[{"name":"技术","slug":"技术","permalink":"http://blog.heyb.top/categories/%E6%8A%80%E6%9C%AF/"},{"name":"前端","slug":"技术/前端","permalink":"http://blog.heyb.top/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"},{"name":"Node","slug":"技术/前端/Node","permalink":"http://blog.heyb.top/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/Node/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://blog.heyb.top/tags/%E5%89%8D%E7%AB%AF/"},{"name":"Node","slug":"Node","permalink":"http://blog.heyb.top/tags/Node/"},{"name":"NVM","slug":"NVM","permalink":"http://blog.heyb.top/tags/NVM/"}]},{"title":"【Node】Node.js 安装配置","slug":"技术/node/【Node】Node.js 安装配置","date":"2022-08-11T16:00:00.000Z","updated":"2022-10-19T06:55:20.736Z","comments":true,"path":"2022/08/12/【node】node.-js-installation-configuration.html","link":"","permalink":"http://blog.heyb.top/2022/08/12/%E3%80%90node%E3%80%91node.-js-installation-configuration.html","excerpt":"","text":"本文摘自：https://www.runoob.com/nodejs/nodejs-install-setup.html 本章节我们将向大家介绍在 Windows 和 Linux 上安装 Node.js 的方法。 本安装教程以 Node.js v4.4.3 LTS(长期支持版本)版本为例。 Node.js 安装包及源码下载地址为：https://nodejs.org/en/download/。 你可以根据不同平台系统选择你需要的 Node.js 安装包。 Node.js 历史版本下载地址：https://nodejs.org/dist/ **注意：**Linux 上安装 Node.js 需要安装 Python 2.6 或 2.7 ，不建议安装 Python 3.0 以上版本。 Windows 上安装 Node.js 你可以采用以下两种方式来安装。 1、Windows 安装包(.msi) 32 位安装包下载地址 : https://nodejs.org/dist/v4.4.3/node-v4.4.3-x86.msi 64 位安装包下载地址 : https://nodejs.org/dist/v4.4.3/node-v4.4.3-x64.msi 本文实例以 v0.10.26 版本为例，其他版本类似， 安装步骤： 步骤 1 : 双击下载后的安装包 v0.10.26，如下所示： 步骤 2 : 点击以上的Run(运行)，将出现如下界面： 步骤 3 : 勾选接受协议选项，点击 next（下一步） 按钮 : 步骤 4 : Node.js默认安装目录为 &quot;C:\\Program Files\\nodejs&quot; , 你可以修改目录，并点击 next（下一步）： 步骤 5 : 点击树形图标来选择你需要的安装模式 , 然后点击下一步 next（下一步） 步骤 6 :点击 Install（安装） 开始安装Node.js。你也可以点击 Back（返回）来修改先前的配置。 然后并点击 next（下一步）： 安装过程： 点击 Finish（完成）按钮退出安装向导。 检测PATH环境变量是否配置了Node.js，点击开始=》运行=》输入&quot;cmd&quot; =&gt; 输入命令&quot;path&quot;，输出如下结果： 12345PATH=C:\\oraclexe\\app\\oracle\\product\\10.2.0\\server\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;c:\\python32\\python;C:\\MinGW\\bin;C:\\Program Files\\GTK2-Runtime\\lib;C:\\Program Files\\MySQL\\MySQL Server 5.5\\bin;C:\\Program Files\\nodejs\\;C:\\Users\\rg\\AppData\\Roaming\\npm 我们可以看到环境变量中已经包含了C:\\Program Files\\nodejs\\ 检查Node.js版本，执行node --version 得到版本号如： v0.10.26 如果你获得以上输出结果，说明你已经成功安装了Node.js 2、Windows 二进制文件 (.exe)安装 32 位安装包下载地址 : http://nodejs.org/dist/v0.10.26/node.exe 64 位安装包下载地址 : http://nodejs.org/dist/v0.10.26/x64/node.exe 安装步骤 步骤 1 : 双击下载的安装包 Node.exe ，将出现如下界面 : 点击 Run（运行）按钮将出现命令行窗口： 版本测试 进入 node.exe 所在的目录，如下所示： 执行node --version 得到版本号如： v0.10.26 如果你获得以上输出结果，说明你已经成功安装了Node.js Linux 上安装 Node.js 直接使用已编译好的包 Node 官网已经把 linux 下载版本更改为已编译好的版本了，我们可以直接下载解压后使用： 12345# wget https://nodejs.org/dist/v10.9.0/node-v10.9.0-linux-x64.tar.xz // 下载# tar xf node-v10.9.0-linux-x64.tar.xz // 解压# cd node-v10.9.0-linux-x64/ // 进入解压目录# ./bin/node -v // 执行node命令 查看版本v10.9.0 解压文件的 bin 目录底下包含了 node、npm 等命令，我们可以使用 ln 命令来设置软连接： 12ln -s /usr/software/nodejs/bin/npm /usr/local/bin/ ln -s /usr/software/nodejs/bin/node /usr/local/bin/ Ubuntu 源码安装 Node.js 以下部分我们将介绍在 Ubuntu Linux 下使用源码安装 Node.js 。 其他的 Linux 系统，如 Centos 等类似如下安装步骤。 在 Github 上获取 Node.js 源码： 12$ sudo git clone https://github.com/nodejs/node.gitCloning into &#x27;node&#x27;... 修改目录权限： 1$ sudo chmod -R 755 node 使用 ./configure 创建编译文件，并按照： 1234$ cd node$ sudo ./configure$ sudo make$ sudo make install 查看 node 版本： 12$ node --versionv0.10.25 Ubuntu apt-get命令安装 命令格式如下： 12sudo apt-get install nodejssudo apt-get install npm CentOS 下源码安装 Node.js 下载源码，你需要在 https://nodejs.org/en/download/ 下载最新的Nodejs版本，本文以v0.10.24为例: 12cd /usr/local/src/wget http://nodejs.org/dist/v0.10.24/node-v0.10.24.tar.gz 解压源码 1tar zxvf node-v0.10.24.tar.gz 编译安装 1234cd node-v0.10.24./configure --prefix=/usr/local/node/0.10.24makemake install 配置NODE_HOME，进入profile编辑环境变量 1vim /etc/profile 设置 nodejs 环境变量，在 export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL 一行的上面添加如下内容: 123#set for nodejsexport NODE_HOME=/usr/local/node/0.10.24export PATH=$NODE_HOME/bin:$PATH :wq保存并退出，编译/etc/profile 使配置生效 1source /etc/profile 验证是否安装配置成功 1node -v 输出 v0.10.24 表示配置成功 npm模块安装路径 1/usr/local/node/0.10.24/lib/node_modules/ **注：**Nodejs 官网提供了编译好的 Linux 二进制包，你也可以下载下来直接应用。 Mac OS 上安装 你可以通过以下两种方式在 Mac OS 上来安装 node： pkg 安装 在官方下载网站下载 pkg 安装包，直接点击安装即可。 卸载 1sudo rm -rf /usr/local/&#123;bin/&#123;node,npm&#125;,lib/node_modules/npm,lib/node,share/man/*/node.*&#125; brew 安装 1brew install node 验证是否安装配置成功 1node -v 卸载 1brew uninstall node --ignore-dependencies 如果提示异常 Error: No such keg: /usr/local/Cellar/node 则执行 1brew uninstall node --force 配置镜像 1234# 查看当前镜像npm config get registry# 设置镜像为 淘宝镜像npm config set registry http://registry.npm.taobao.org/","categories":[{"name":"技术","slug":"技术","permalink":"http://blog.heyb.top/categories/%E6%8A%80%E6%9C%AF/"},{"name":"前端","slug":"技术/前端","permalink":"http://blog.heyb.top/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"},{"name":"Node","slug":"技术/前端/Node","permalink":"http://blog.heyb.top/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/Node/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://blog.heyb.top/tags/%E5%89%8D%E7%AB%AF/"},{"name":"Node","slug":"Node","permalink":"http://blog.heyb.top/tags/Node/"}]},{"title":"hello hexo","slug":"个人/hello hexo","date":"2022-08-10T14:32:54.000Z","updated":"2022-08-12T07:05:12.018Z","comments":true,"path":"2022/08/10/hello-hexo.html","link":"","permalink":"http://blog.heyb.top/2022/08/10/hello-hexo.html","excerpt":"","text":"我刚洗好澡坐下来写下这一开篇文章，似乎已经很久很久没有这样安静下来的写一些东西了。 自工作以来，我总是不断的在吸收摄入知识，已经很久没有像以前初高中时候玩qq空间那样，写一些感想，输出一些内容了。这个时代不断的飞速发展，节奏越来越快，到处都是微博、短视频，甚至教学内容也都逐渐碎片化。我想是时候该慢一些，拾回当初的自己，也检视这十年的自己。 生活 毕业后什么都想尝试，买了很多杂七杂八的电子产品。到最近已经「没有那种世俗欲望了.jpg」，趋向于寻求稳定、适己的事物以及状态。 一直以来都想着自己从零开始开发一个博客系统。但是现实很骨感，一是除去了工作和睡觉并没有留给我太多的时间。二是学艺不精，想要实现前端的界面好的效果实在是太麻烦，总是想着要做就做到最好。但往往一个好的东西是需要时间去雕琢的，开发项目也是如此，现在知名的应用大多最初版本都不是尽善尽美的。现在安定下来，在自己的笔记本电脑上码字，让我有一种归属感，也重新拾起了搭建自己的小天地的想法。这博客可能更多的记录生活中的一些琐事，对生活的思考，和朋友的一些故事等等，也会整理和收纳在工作中遇到的一些技术上的问题以及一些有趣的文章。 可能文章内容没有别人的那么有趣，文笔流畅。但总算是个好的开始，写多了，慢慢拓展，总会比什么都不做得到的进步更多，是吧？ 感情 最近我常常有一种觉得自己处在一个舒适满意的环境中，我常和小环说我好舒服呀。 我觉得我们似乎开始步入了「长期稳定的亲密关系」之中。在一起近两年的时间了，除了逢年过节回老家，几乎每天都是面对面的在一起，我仍然想着每天下班第一时间见到她，每天仍然还有很多事情叭叭叭的想和她分享。大部分的时候我们的想法出奇的一致，喜好也大抵相同，所以不用特别花心思去磨合、迁就对方。 我自觉成长了很多，抱着学习、经营的心态，去维护我们这段感情。期望我们能步入下一个阶段 :) 学习 有些东西真的不去面对的话就会变成心结，甚至多年以后做梦还是会觉得遗憾当初没有好好把握。所以我现在仍要花费比之前在学校更多的努力才觉得能弥补自己一些。去年底开始报一些班课学习，等课程完结之后我再说出来吧。 不过我感觉毕业之后学习东西才开始快起来，对于一些新鲜的东西接纳远比之前在校的时候更快一些，我想也可能跟自己工作了这几年的经验有关系，能对于事物理解得更深刻。 今年更多的是学习学科方向，把以前落下的数学、英语知识补一补。今年比较混乱，忙着找工作（算是借口吧），技术上反而没有太多的长进。计划今年考取PMP资格认证。最近开始写博客后，打算把之前的知识点给整理一下，再查漏补缺。 感觉自己学的东西越多，就越觉得自己渺小。所以想把自己知道的东西整理下来，让别人少走一些弯路。 工作 今年是奔波的一年。去年离开了邮政从广州回到了南宁，期望在南宁能够长远发展。去了小环所在的教育集团当技术主管，本想着能施展自己所长，却因为双减政策导致集团转型，整个部门都被裁剪。后来经过总监介绍去了他朋友的一家电力外包公司，但是公司各方面都存在问题，恶性循环，到后面已经拖欠三四个月工资，已经不是凭我一己之力能够做出改变的，加之南宁的互联网大环境还是有待发展，所以考虑了还是先继续回到广州工作。 回广州面试了近一个半月，十几家公司，几经波折，最后找到一个在外企做服务支撑的公司。也感谢盛斌、陈鑫他们几个好友对我的鼓励，毕竟多年前我都未曾敢想象自己现在能拿到这个工资，从国企几年再出来已经不太清楚自己的市场定位了，是他们一直都跟我说可以再开高一些工资，让我觉得我的能力是值得的。 外国团队的领导对我们也很照顾，团队小伙伴的氛围也很好。各方面的工作安排都很合理，不像国内团队那么内卷，能留给自己的时间很充裕，这一点是让我最喜欢的地方。这能让我在业余时间做很多自己想要做的事情。甚至可以常态化 WFH（work for home居家办公）。 当然凡事是有两面性的，不好的地方就是和外国团队有时差，花费在沟通的时间比较多。整体而言做事效率比以前低了许多。开会聊天和文档也都是用英语，对自己英语考验还是挺大的。还有就是我们组缺少Tech Lead，很多问题只能去其他各组大佬来支持，很多流程不太熟悉，明明很简单的东西还要去咨询别人（很多时候只是需要别人确定是或者否），所以自己会有一种挫败感。 现在也知道，工作嘛，总是有开心和不如意的地方，调整好心态再继续努力了。自己觉得开心的一点是已经开始能够听得懂一些带口音的英语了，也开始逐渐尝试摆脱翻译工具，觉得学习英语也是一件不错的事情。 结束语 今年是一个平凡又不普通的一年，经历过这些才越觉得平凡的可贵。今年只剩一个季度，希望以后的日子自己和身边的人都能够健健康康快快乐乐的就足够了，不求风骚惊天下，但求猥琐动世人。","categories":[{"name":"个人","slug":"个人","permalink":"http://blog.heyb.top/categories/%E4%B8%AA%E4%BA%BA/"}],"tags":[{"name":"个人","slug":"个人","permalink":"http://blog.heyb.top/tags/%E4%B8%AA%E4%BA%BA/"}]}],"categories":[{"name":"写作","slug":"写作","permalink":"http://blog.heyb.top/categories/%E5%86%99%E4%BD%9C/"},{"name":"博客","slug":"写作/博客","permalink":"http://blog.heyb.top/categories/%E5%86%99%E4%BD%9C/%E5%8D%9A%E5%AE%A2/"},{"name":"Hexo","slug":"写作/博客/Hexo","permalink":"http://blog.heyb.top/categories/%E5%86%99%E4%BD%9C/%E5%8D%9A%E5%AE%A2/Hexo/"},{"name":"技术","slug":"技术","permalink":"http://blog.heyb.top/categories/%E6%8A%80%E6%9C%AF/"},{"name":"前端","slug":"技术/前端","permalink":"http://blog.heyb.top/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"},{"name":"Node","slug":"技术/前端/Node","permalink":"http://blog.heyb.top/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/Node/"},{"name":"个人","slug":"个人","permalink":"http://blog.heyb.top/categories/%E4%B8%AA%E4%BA%BA/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://blog.heyb.top/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"Blog","slug":"Blog","permalink":"http://blog.heyb.top/tags/Blog/"},{"name":"Hexo","slug":"Hexo","permalink":"http://blog.heyb.top/tags/Hexo/"},{"name":"前端","slug":"前端","permalink":"http://blog.heyb.top/tags/%E5%89%8D%E7%AB%AF/"},{"name":"Node","slug":"Node","permalink":"http://blog.heyb.top/tags/Node/"},{"name":"NVM","slug":"NVM","permalink":"http://blog.heyb.top/tags/NVM/"},{"name":"个人","slug":"个人","permalink":"http://blog.heyb.top/tags/%E4%B8%AA%E4%BA%BA/"}]}